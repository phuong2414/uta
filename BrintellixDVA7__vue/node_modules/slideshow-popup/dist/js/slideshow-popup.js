'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.SlideshowPopup = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('utils');

var utils = _interopRequireWildcard(_utils);

var _structure = require('structure');

var _structure2 = _interopRequireDefault(_structure);

var _settings = require('settings');

var _settings2 = _interopRequireDefault(_settings);

var _nav = require('nav');

var _nav2 = _interopRequireDefault(_nav);

var _slide = require('slide');

var _presentationIdentifier = require('presentation-identifier');

var _presentationIdentifier2 = _interopRequireDefault(_presentationIdentifier);

var _validateNav = require('validate-nav');

var _validateNav2 = _interopRequireDefault(_validateNav);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var storageKey = _presentationIdentifier2.default + 'SlideshowPopup';

var SlideshowPopup = exports.SlideshowPopup = function () {
	function SlideshowPopup() {
		var _this = this;

		_classCallCheck(this, SlideshowPopup);

		this.chapters = [];
		this.history = [];
		this.number = 0;
		this.load();

		_nav2.default.onenter(this.load.bind(this));

		_nav2.default.observer.subscribe("willGoto", function (options) {
			!options.presentation && _validateNav2.default.validate(options);
			if (_this.isExitingDynamicChapters(options)) {
				_this.clearHistory();
			}
		});
	}

	_createClass(SlideshowPopup, [{
		key: 'collectPopup',
		value: function collectPopup(slides, slide) {
			var newChapter = {
				id: 'dynamic-content-' + (this.number + 1),
				name: 'Dynamic Content ' + (this.number + 1),
				content: slides,
				collected: true
			};

			_structure2.default.chapters[newChapter.id] = newChapter;
			_structure2.default.publish('update');

			this.openPopup({ chapter: newChapter.id, slide: slide });
		}
	}, {
		key: 'openPopup',
		value: function openPopup(options) {
			this.insertChapter(_structure2.default.chapters[options.chapter]);
			this.save();

			_nav2.default.goto(options);
		}
	}, {
		key: 'closePopup',
		value: function closePopup() {
			_nav2.default.goto(this.history.pop());
		}
	}, {
		key: 'clearStructure',
		value: function clearStructure() {
			var chapter = this.chapters.pop();
			if (chapter.collected) {
				delete _structure2.default.chapters[chapter.id];
				_structure2.default.publish('update');
			}
			this.number--;
			this.save();
		}
	}, {
		key: 'clearHistory',
		value: function clearHistory() {
			while (!!this.chapters.length) {
				this.clearStructure();
			}
			this.history = [];
			this.save();
		}
	}, {
		key: 'isPopup',
		value: function isPopup() {
			return !!this.history.length;
		}
	}, {
		key: 'isExitingDynamicChapters',
		value: function isExitingDynamicChapters(options) {
			if (!this.chapters.length) {
				return false;
			}
			return options.chapter !== require('chapter').local.id && !_structure2.default.chapters[options.chapter].collected;
		}
	}, {
		key: 'getCurrentPopupChapter',
		value: function getCurrentPopupChapter() {
			return this.chapters[this.chapters.length - 1];
		}
	}, {
		key: 'insertChapter',
		value: function insertChapter(chapter) {
			this.chapters.push(chapter);
			this.history.push({ slide: _slide.sid, chapter: require('chapter').local.id });
			this.number++;
		}
	}, {
		key: 'save',
		value: function save() {
			sessionStorage.setItem(storageKey, JSON.stringify(this));
		}
	}, {
		key: 'load',
		value: function load() {
			utils.mixin(this, JSON.parse(sessionStorage.getItem(storageKey)) || {});
		}
	}]);

	return SlideshowPopup;
}();