import * as utils from 'utils';
import structure from 'structure';
import settings from 'settings';
import nav from 'nav';
import {sid as currentSlide} from 'slide';
import presentationIdentifier from 'presentation-identifier';
import validateNav from 'validate-nav';

const storageKey = presentationIdentifier + 'SlideshowPopup';

export class SlideshowPopup{
	constructor(){
		this.chapters = [];
		this.history = [];
		this.number = 0;
		this.load();

		nav.onenter(this.load.bind(this));

		nav.observer.subscribe("willGoto", (options) => {
			!options.presentation && validateNav.validate(options);
			if(this.isExitingDynamicChapters(options)){
				this.clearHistory();
			}
		});
	}

	collectPopup(slides, slide){
		let newChapter = {
			id: `dynamic-content-${this.number + 1}`,
			name: `Dynamic Content ${this.number + 1}`,
			content: slides,
			collected: true
		};

		structure.chapters[newChapter.id] = newChapter;
		structure.publish('update');

		this.openPopup({chapter: newChapter.id, slide: slide});
	}

	openPopup(options){
		this.insertChapter(structure.chapters[options.chapter]);
		this.save();

		nav.goto(options);
	}

	closePopup(){
		nav.goto(this.history.pop());
	}

	clearStructure(){
		let chapter = this.chapters.pop();
		if(chapter.collected){
			delete structure.chapters[chapter.id];
			structure.publish('update');
		}
		this.number--;
		this.save();
	}

	clearHistory(){
		while(!!this.chapters.length){
			this.clearStructure();
		}
		this.history = [];
		this.save();
	}

	isPopup(){
		return !!this.history.length;
	}

	isExitingDynamicChapters(options){
		if(!this.chapters.length){
			return false;
		}
		return options.chapter !== require('chapter').local.id && !structure.chapters[options.chapter].collected;
	}

	getCurrentPopupChapter(){
		return this.chapters[this.chapters.length - 1];
	}

	insertChapter(chapter){
		this.chapters.push(chapter);
		this.history.push({slide: currentSlide, chapter: require('chapter').local.id});
		this.number++;
	}

	save(){
		sessionStorage.setItem(storageKey, JSON.stringify(this));
	}

	load(){
		utils.mixin(this, JSON.parse(sessionStorage.getItem(storageKey)) || {});
	}
}