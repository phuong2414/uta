import {Component} from 'component';
import * as utils from 'utils';

const scrollerSelector = 'co-select .selected';

export class Menu extends Component {
	constructor() {
		super(...arguments);
	}

	ready(){
		this.refresh();
	}

	get defaults() {
		return {
			'orientation': {
				value: 'horizontal',
				values: ['horizontal', 'vertical'],
				type: String,
				refresh: true
			},
			'selected': {
				value: '',
				type: String,
				refresh: true
			},
			scrollerModel: {
				type: Object,
				value: {
					scrollbars: false,
					bounce: false,
					scrollToSelector: scrollerSelector,
					scrollX: true,
					scrollY: false,
					preventDefault: false
				}
			}
		};
	}

	// TODO: prevent swipes
	template() {
		return require('../template.html');
	};

	refresh(property) {
		let isVertical = (this.orientation === 'vertical');
		this.element.classList[isVertical ? 'add' : 'remove']('vertical');
		setTimeout(() => {
			this.scrollerModel.scrollX = !isVertical;
			this.scrollerModel.scrollY = isVertical;
			setTimeout(() => { // for slow browsers(safari)
				this.element.querySelector('co-iscroll').model.refresh();
			}, 500);
			utils.dispathEvent(this.element, 'orientation-change', {detail: this});
		}, 0);
		if (property === 'selected') {
			this.scrollerModel.scrollToSelector = '';
			setTimeout(()=>{ // fix for property editing eWizard
				this.scrollerModel.scrollToSelector = scrollerSelector;
			},0);
		}
	}
}