"use strict";

var Component = require("component").Component,
    touch = require("touch"),
    utils = require("utils");

function Button(element, model) {
	Component.call(this, element, model);

	this.element.addEventListener(touch.events.start, this);
	this.element.addEventListener(touch.events.end, this);
	Object.keys(this.defaults).forEach(function (property) {
		if (this.defaults[property].refresh) {
			this.refresh(property);
		}
	}, this);
};

utils.inherits(Button, Component);

Button.prototype.defaults = {
	"toggles": {
		type: Boolean,
		value: true
	},
	"active": {
		type: Boolean,
		value: false,
		refresh: true
	},
	"pressed": {
		type: Boolean,
		value: false,
		refresh: true
	},
	"disabled": {
		type: Boolean,
		value: false,
		refresh: true
	}
};

Button.prototype.handleEvent = function (event) {
	if (this.disabled) {
		return;
	}
	switch (event.type) {
		case touch.events.start:
			{
				this.press();
				if (!this.toggles) {
					this.activate();
				}
				break;
			}
		case touch.events.end:
			{
				this.release();
				if (this.toggles) {
					this.toggle();
				} else {
					this.deactivate();
				}
				break;
			}
	}
};

Button.prototype.press = function () {
	this.pressed = true;
	utils.dispatchEvent(this.element, "press");
};

Button.prototype.release = function () {
	this.pressed = false;
	utils.dispatchEvent(this.element, "release");
};

Button.prototype.toggle = function () {
	this.active = !this.active;
	utils.dispatchEvent(this.element, "toggle");
};

Button.prototype.activate = function () {
	this.active = true;
};

Button.prototype.deactivate = function () {
	this.active = false;
};

Button.prototype.dispatchActiveState = function () {
	if (this.notInitialActivation) {
		utils.dispatchEvent(this.element, this.active ? "activate" : "deactivate");
	}
	this.notInitialActivation = true;
};

Button.prototype.toggleOff = function () {
	if (!this.toggles && this.active) {
		this.deactivate();
		utils.dispatchEvent(this.element, "toggle");
	}
};

Button.prototype.template = function () {
	return "<content></content>";
};

// on selected change
// android 4.0 does not support the second parameter for the classList.toggle method
Button.prototype.refresh = function (changedProperty) {
	var method = this[changedProperty] ? 'add' : 'remove';
	this.element.classList[method](changedProperty);

	if (changedProperty === "toggles") {
		this.toggleOff();
	} else if (changedProperty === "active") {
		this.dispatchActiveState();
	}
};

module.exports = Button;