import {Component} from 'component';
import nav from 'nav';
import {events} from 'touch';
import * as utils from 'utils';

export class Button extends Component {
	constructor() {
		super(...arguments);

		this.element.addEventListener(events.start, this);
		this.element.addEventListener('tap', this);
		Object
			.keys(this.defaults)
			.forEach(property => {
				if (this.defaults[property].refresh) {
					this.refresh(property);
				}
			});

		nav.onleave(()=>{this.active = false});
	};

	get defaults() {
		return {
			toggles: {
				type: Boolean,
				value: false
			},
			active: {
				type: Boolean,
				value: false,
				refresh: true
			},
			pressed: {
				type: Boolean,
				value: false,
				refresh: true
			},
			"shadow": {
				type: Boolean,
				value: false,
				refresh: true
			},
			disabled: {
				type: Boolean,
				value: false,
				refresh: true
			}
		}
	};

	handleEvent(event) {
		if (this.disabled) {
			return;
		}
		switch (event.type) {
			case 'tap': {
				if (this.toggles) {
					this.toggle();
				}
				break;
			}
			case events.start: {
				this.press();
				if (!this.toggles) {
					this.activateButton();
				}
				document.addEventListener(events.end, this, true);
				break;
			}
			case events.end: {
				this.release();
				if (!this.toggles) {
					this.deactivateButton();
				}
				document.removeEventListener(events.end, this, true);
				break;
			}
		}
	};

	activateButton() {
		this.active = true;
	};

	deactivateButton() {
		this.active = false;
	};

	press() {
		this.pressed = true;
		utils.dispatchEvent(this.element, 'press');
	};

	release() {
		this.pressed = false;
		utils.dispatchEvent(this.element, 'release');
	};

	toggle() {
		this.active = !this.active;
		utils.dispatchEvent(this.element, 'toggle');
	};

	dispatchActiveState() {
		if (this.notInitialActivation) {
			utils.dispatchEvent(this.element, this.active ? 'activatebutton' : 'deactivatebutton');
		}
		this.notInitialActivation = true;
	};

	toggleOff() {
		if (!this.toggles && this.active) {
			this.deactivateButton();
			utils.dispatchEvent(this.element, 'toggle');
		}
	};

	template() {
		return require('../template.html');
	};

	// on selected change
	// android 4.0 does not support the second parameter for the classList.toggle method
	refresh(changedProperty) {
		var method = this[changedProperty] ? 'add' : 'remove';
		this.element.classList[method](changedProperty);

		if (changedProperty === 'toggles') {
			this.toggleOff();
		} else if (changedProperty === 'active') {
			this.dispatchActiveState();
		}
	};
}