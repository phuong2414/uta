'use strict';

exports.init = function () {
  if (this.optionsIndex.length > 0) {
    this._refresh('optionsIndex');
  } else {
    this._refresh('selectedValues');
  }
};

exports.optionsRefresh = function (selected, options, addedOption, removedOption, indexRemovedOption) {
  var indexAdded = void 0;

  if (removedOption) {
    this.removeActiveOption(indexRemovedOption);
  }

  if (addedOption) {
    indexAdded = this.options.indexOf(addedOption.model);
    this.addedNewCollectionUpper(indexAdded);

    /* if(~indexAdded){ // after added on ewizard this co-select marked as checked
        this.optionsIndex.push(indexAdded)
    } */
  }
};

exports.removeActiveOption = function (indexRemovedOption) {
  var newOptionsIndex = this.optionsIndex.filter(function (indexVal) {
    return indexRemovedOption !== indexVal;
  }).map(function (indexVal, index) {
    return indexRemovedOption > -1 && indexVal > indexRemovedOption ? --indexVal : indexVal;
  });

  this.optionsIndex = newOptionsIndex;
};

exports.addedNewCollectionUpper = function (indexAdded) {
  var isChanged,
      newOptionsIndex = this.optionsIndex.map(function (activeIndex) {
    if (indexAdded <= activeIndex) {
      isChanged = true;
      return ++activeIndex;
    } else {
      return activeIndex;
    }
  });

  if (isChanged) {
    this.optionsIndex = newOptionsIndex;
  }
};

exports.onOptionTap = function (event) {
  var option = event.detail;
  option.toggle();
  event.stopPropagation();
};

exports.onOptionChange = function (event) {
  var option = event.detail,
      index = this.options.indexOf(option),
      indexInSelect = void 0;

  if (!this.optionsIndexStateLocalChange) {
    indexInSelect = this.optionsIndex.indexOf(index);

    if (~indexInSelect) {
      this.optionsIndex.splice(indexInSelect, 1);
    } else {
      this.optionsIndex.push(index);
    }
  }
  this.optionsIndexStateLocalChange = false;
  event.stopPropagation();
};

exports._refresh = function (attrName, isModel) {
  var _this = this;

  switch (attrName) {
    case 'optionsIndex':
      {
        var _ret = function () {

          var isChanges = void 0,
              selectedValues = [];

          _this.options.forEach(function (option, index) {
            _this.optionsIndexStateLocalChange = true;

            if (~_this.optionsIndex.indexOf(index)) {
              option.select();
              if (!~_this.selectedValues.indexOf(option.value)) {
                isChanges = true;
              }
              selectedValues.push(option.value);
            } else {
              option.unselect();
              if (~_this.selectedValues.indexOf(option.value)) {
                isChanges = true;
              }
            }
          });

          if (isChanges || _this.selectedValues.length !== _this.optionsIndex.length) {
            _this.selectedValues = selectedValues;
            _this.dispatchEvent('change', { detail: _this.selectedValues });
          }

          _this.optionsIndexStateLocalChange = false;
          return 'break';
        }();

        if (_ret === 'break') break;
      }
    case 'selectedValues':
      {
        (function () {
          var isChanges = void 0,
              newIndexArray = [],
              currentInd = void 0,
              indexInAll = void 0,
              values = _this.getValuesByIndexAll();

          _this.selectedValues.forEach(function (value, index) {

            currentInd = values.indexOf(value);

            if (!~currentInd) {
              isChanges = true;
            }

            indexInAll = _this.options.indexOf(_this.getOptionByValue(value));

            if (~indexInAll) {
              newIndexArray.push(indexInAll);
            }
          });

          if (!isChanges) {
            isChanges = values.some(function (activeValue) {
              return !~_this.selectedValues.indexOf(activeValue);
            });
          }

          if (isChanges) {
            _this.optionsIndex = newIndexArray;
          }
        })();
      }
  }
};

exports.getValuesByIndexAll = function () {
  var _this2 = this;

  return this.optionsIndex.map(function (option) {
    return _this2.options[option].value;
  });
};