(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (resolve){
'use strict';

var Select = require('./src/js/Select.js').Select,
    single = require('./src/js/Select.js').single,
    multiple = require('./src/js/Select.js').multiple,
    createComponent = require("component").createComponent;

module.exports = createComponent({
	name: 'co-select',
	constructor: Select,
	localizationTemplate: resolve('i18n/{lang}.json')
});

module.exports.single = single;
module.exports.multiple = multiple;require("rivets").components[module.exports.name] = module.exports;

}).call(this,function(relativePath){
			var settings = require('settings'),
				componentsDirecotry = settings.components;

			  return componentsDirecotry + '/co-select/' + relativePath;
		})
},{"./src/js/Select.js":10,"component":4,"rivets":"rivets","settings":"settings"}],2:[function(require,module,exports){
"use strict";

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Cache = function () {
  function Cache() {
    _classCallCheck(this, Cache);

    this.storage = {};
  }

  _createClass(Cache, [{
    key: "set",
    value: function set(key, data) {
      this.storage[key] = data;
    }
  }, {
    key: "get",
    value: function get(key) {
      return this.storage[key];
    }
  }, {
    key: "isCache",
    value: function isCache(key) {
      return Object.prototype.hasOwnProperty.call(this.storage, key);
    }
  }]);

  return Cache;
}();

module.exports = Cache;

},{}],3:[function(require,module,exports){
module.exports={
	"localizationPath": "components/{name}/i18n/{lang}.json"
}
},{}],4:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var rivets = require('rivets');
var utils = require('utils');
var ComponentConstructor = require('./src/js/ComponentConstructor.js').ComponentConstructor;
var buildModel = require('./src/js/buildModel.js');
var buildObservations = require('./src/js/buildObservations.js');
var config = require('./config.json');

function registerComponent(name, Constructor, localExtensions) {
  rivets.components[name] = createComponent(name, Constructor, localExtensions);
}

function createComponent(options, Constructor, localExtensions) {
  var name;

  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
    name = options.name;
    Constructor = options.constructor;
    localExtensions = options.localExtensions;
  } else {
    name = options;
  }

  Constructor.prototype.localizationTemplate = options.localizationTemplate || config.localizationPath;

  var descriptor = {
    name: name,
    block: Constructor.block,
    static: getStaticProperties(Constructor.prototype.defaults),
    template: Constructor.prototype.template,
    constructor: Constructor,
    initialize: function initialize(element, data) {
      var defaultProperties = utils.toCamelCaseObject(Constructor.prototype.defaults);
      var model = buildModel(defaultProperties, data, name);
      var componentInstance = new Constructor(element, model, this.view, this);

      Constructor.prototype.name = name;

      buildObservations.call(this, componentInstance, defaultProperties, data.model || {});

      return componentInstance;
    },
    unbind: function unbind() {
      // TODO: make unobserve..
    }
  };

  if (localExtensions) {
    rivets._.extensions.forEach(function (extensionName) {
      var extension = localExtensions[extensionName];

      if (extension) {
        descriptor[extensionName] = extension;
      }
    });
  }

  return descriptor;
}

function getStaticProperties(properties) {
  return Object.keys(properties).filter(function (property) {
    return isStaticProperty(properties, property);
  }).map(function (property) {
    return utils.toCamelCase(property);
  });
}

function isStaticProperty(properties, property) {
  return properties[property] && properties[property].static;
}

module.exports = registerComponent;
module.exports.createComponent = createComponent;
module.exports.Component = ComponentConstructor;

},{"./config.json":3,"./src/js/ComponentConstructor.js":5,"./src/js/buildModel.js":8,"./src/js/buildObservations.js":9,"rivets":"rivets","utils":"utils"}],5:[function(require,module,exports){
'use strict';

var _Promise = typeof Promise === 'undefined' ? require('es6-promise').Promise : Promise;

var utils = require('utils');
var builKeypath = require('./buildKeypath.js');
var getLocalizationByConstructor = require('./buildLocalization.js');
var generalModel = require('general-model');
var dispatcher = require('dispatcher');

function ComponentConstructor(element, model, view, binding) {
  this.element = element;
  this.parentScope = view.models;
  utils.mixin(this, model);
  this.element.model = this;
  this.element.view = {
    subscribe: subscribeToView.bind(this)
  };
  this.element.setAttribute('co-component', '');
  this.model = model;
  this.view = view;
  this.binding = binding;
  this.element.addEventListener('activate', handleActivation.bind(this));
  this.element.addEventListener('deactivate', handleDeactivation.bind(this));

  this.setIsConfigurable();
}

ComponentConstructor.prototype.isCommon = function () {
  return getParentKeypathes(this).some(function (keypath) {
    return utils.startsWith(keypath, 'm.common');
  });
};

ComponentConstructor.prototype.getTextElementsByProperty = function (property) {
  return utils.toArray(this.element.querySelectorAll('[rv-html]')).filter(function (element) {
    return element.getAttribute('rv-html') === property;
  }).filter(function (element) {
    return element.scope === this;
  }, this);
};

ComponentConstructor.prototype.getLocalization = function (lang) {
  return getLocalizationByConstructor(this.__proto__.constructor, lang);
};

ComponentConstructor.prototype.getAbsoluteKeypath = function () {
  return builKeypath(this.parentScope, this.getKeypath());
};

ComponentConstructor.prototype.getKeypath = function () {
  return this.element.getAttribute('model') || '';
};

ComponentConstructor.prototype.toJSON = function () {
  var that = this;
  return Object.keys(this).reduce(function (acc, property) {
    if (that.model.hasOwnProperty(property)) {
      acc[property] = that[property];
    }
    return acc;
  }, {});
};

ComponentConstructor.prototype.setIsConfigurable = function () {
  var keypath = this.getKeypath();
  Object.defineProperty(this, 'isConfigurable', {
    value: utils.startsWith(keypath, 'm.'),
    enumerable: true,
    configurable: false,
    writable: true
  });
};

ComponentConstructor.prototype.getLabel = function (lang) {
  return new _Promise(function (resolve, reject) {
    var label = getLabelFromElement(this.element);

    if (label) {
      resolve(label);
    } else {
      getLocalizationByConstructor(this.__proto__.constructor, lang).then(function (localization) {
        resolve(localization.name);
      }).catch(function (err) {
        resolve(getNameFromTagNameComponent(this.name || this.element.tagName.toLowerCase()));
      }.bind(this));
    }
  }.bind(this));
};

ComponentConstructor.prototype.setLabel = function (label) {
  this.element.setAttribute('user-label', label);
};

ComponentConstructor.prototype.subscribe = function (callback) {
  return new generalModel.ModelNotifier().observe(this.model).subscribe(function (model) {
    callback(model);
  }, true);
};

function getNameFromTagNameComponent(coTagName) {
  var normalName = coTagName.replace('co-', '').split('-').join(' ');

  return normalName[0].toUpperCase() + normalName.substring(1, normalName.lenght);
}

function handleActivation(event) {
  if (typeof this.activate === 'function' && isCobaltEvent(event)) {
    var prevModelState = utils.parse(this);
    this.activate(event.target);
    this.difference = utils.difference(prevModelState, utils.parse(this));
  }
}

function handleDeactivation(event) {
  if (typeof this.deactivate === 'function' && isCobaltEvent(event)) {
    this.deactivate(event.target);
  }

  utils.deepMixin(this, this.difference);
}

function isCobaltEvent(event) {
  return event.detail && !!event.detail.isCobaltEvent;
}

function getParentKeypathes(scope, keypathes) {
  keypathes = keypathes || [];
  if (scope && typeof scope.getKeypath === 'function') {
    keypathes.push(scope.getKeypath());
    getParentKeypathes(scope.parentScope, keypathes);
  }

  return keypathes;
}

function getLabelFromElement(element) {
  return element.getAttribute('user-label');
}

function subscribeToView(callback) {
  var _this = this;

  dispatcher.subscribeEvent(function (event) {
    if (event.type === dispatcher.EventType.DOM_REFRESHED && event.element === _this.element) {
      callback(_this.element);
    }
  });
}

exports.ComponentConstructor = ComponentConstructor;

},{"./buildKeypath.js":6,"./buildLocalization.js":7,"dispatcher":"dispatcher","es6-promise":"es6-promise","general-model":"general-model","utils":"utils"}],6:[function(require,module,exports){
'use strict';

function buildAbsoluteKeypath(parentPath, keypath) {
	var key = removeAlias(keypath);

	if (parentPath) {
		return key ? parentPath + '.' + removeAlias(keypath) : parentPath;
	} else {
		return keypath;
	}
}

function collectParentsKeypath(model, keypathes) {
	keypathes = keypathes || [];
	if (model && model.keypath) {
		keypathes.unshift(keypathModifier(model), model.index);
		collectParentsKeypath(model.__proto__, keypathes);
	}

	return keypathes;
}

function keypathModifier(model) {
	if (model.__proto__.keypath) {
		return removeAlias(model.keypath);
	}

	return model.keypath;
}

function removeAlias(keypath) {
	return keypath.split('.').slice(1).join('.');
}

module.exports = function (parentScope, keypath) {
	return buildAbsoluteKeypath(collectParentsKeypath(parentScope).join('.'), keypath);
};

},{}],7:[function(require,module,exports){
'use strict';

var _loader = require('loader');

var _utils = require('utils');

var _cache = require('cache');

var _cache2 = _interopRequireDefault(_cache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Promise = typeof Promise === 'undefined' ? require('es6-promise').Promise : Promise;

var cache = new _cache2.default();

module.exports = getLocalizationByConstructor;

function getLocalizationByConstructor(constructor, outsideLang) {
  var defaultLang = 'en';
  var lang = outsideLang || defaultLang;
  // TODO: works only if localizationTemplate and name were added to the prototype during component registration

  return getLocalization(constructor, lang, defaultLang).then(function (localization) {
    return extendLocalizationByScheme(localization.defaults, constructor.prototype.defaults, lang).then(function () {
      return localization;
    });
  });
}

function getLocalization(constructor, lang, defaultLang) {
  var localizationPath = getLocalizationPath(constructor, lang);

  return loadLocalizationData(localizationPath).then(function (localization) {
    if (isLocalization(localization)) {
      return localization;
    } else if (lang !== defaultLang) {
      var defaultLocalizationPath = getLocalizationPath(constructor, defaultLang);
      return loadLocalizationData(defaultLocalizationPath);
    }
    return _Promise.resolve({});
  });
}

function getLocalizationPath(constructor, lang) {
  return (0, _utils.template)(constructor.prototype.localizationTemplate, { name: constructor.prototype.name, lang: lang });
}

function loadLocalizationData(path) {
  var loadFromCache = true;
  var reviver = null;

  if (!cache.isCache(path)) {
    cache.set(path, (0, _loader.loadJSON)(path, reviver, loadFromCache));
  }

  return cache.get(path);
}

function isLocalization(localization) {
  return localization && Object.keys(localization).length;
}

// if property described in scheme has 'base' defined, it's localization is extended with localization from 'base'
function extendLocalizationByScheme(localization, scheme, lang) {
  var localizationPromises = [];

  var _loop = function _loop(prop) {
    var propertyDescriptor = scheme[prop],
        localizationLoadingPromise = void 0;

    if (propertyDescriptor.sealed) {
      return 'continue';
    }

    if (propertyDescriptor.base) {
      localizationLoadingPromise = getLocalizationByConstructor(propertyDescriptor.base, lang).then(function (subLocalization) {
        return localization[prop].defaults = subLocalization.defaults;
      });
    } else if (propertyDescriptor.scheme) {
      localizationLoadingPromise = extendLocalizationByScheme(localization[prop].defaults, propertyDescriptor.scheme, lang);
    } else {
      return 'continue';
    }
    localizationPromises.push(localizationLoadingPromise);
  };

  for (var prop in scheme) {
    var _ret = _loop(prop);

    if (_ret === 'continue') continue;
  }

  return _Promise.all(localizationPromises);
}

},{"cache":2,"es6-promise":"es6-promise","loader":"loader","utils":"utils"}],8:[function(require,module,exports){
"use strict";

var utils = require("utils");

function buildModel(defaultProperties, data, name) {
	var defaultModel = getDefaultModel(defaultProperties),
	    elementModel = utils.toCamelCaseObject(data.model || {}),
	    attributesData = getDataFromAttributes(defaultProperties, data),
	    model = mixin(mixin(defaultModel, elementModel, defaultProperties), attributesData, defaultProperties);

	return model;
}

function mixin(target, source, defaultProperties) {
	Object.keys(source).forEach(function (property) {
		if (source.hasOwnProperty(property) && defined(source[property]) && defaultProperties.hasOwnProperty(property)) {
			if (target[property] && target[property].constructor === Object) {
				addMissingProperies(defaultProperties[property].value, source[property]); // add missing properties and keep reference for correct observing
			}
			target[property] = source[property];
		}
	});

	return target;
}

function addMissingProperies(defaultProperties, source) {
	return Object.keys(defaultProperties).forEach(function (property) {
		if (!source.hasOwnProperty(property)) {
			source[property] = defaultProperties[property];
		}
	});
}

function getDefaultModel(defaultProperties) {
	return Object.keys(defaultProperties).reduce(function (acc, property) {
		acc[property] = defaultProperties[property].value;
		return acc;
	}, {});
}

function getDataFromAttributes(defaultProperties, data) {
	return Object.keys(defaultProperties).reduce(function (acc, property) {
		if (data.hasOwnProperty(property)) {
			if (defaultProperties[property] && defaultProperties[property].static) {
				acc[property] = utils.revive(data[property]);
			} else {
				acc[property] = data[property];
			}
		}
		return acc;
	}, {});
}

function defined(value) {
	return value !== undefined && value !== null;
}

module.exports = buildModel;

},{"utils":"utils"}],9:[function(require,module,exports){
'use strict';

var generalModel = require('general-model');
var complexProperties = [Object, Array, DataView, 'Object', 'Array', 'DataView'];

module.exports = function buildObservations(componentInstance, defaultProperties, model) {
  Object.keys(defaultProperties).forEach(function (property) {
    model[property] = componentInstance[property];

    if (isRefreshableProperty(defaultProperties, property) && isComplexProperty(defaultProperties, property)) {
      observeComplexProperty(property, componentInstance);
    }

    this.observe(componentInstance, property, function () {
      if (isRefreshableProperty(defaultProperties, property)) {
        componentInstance.refresh(property);
      }
      componentInstance.model[property] = componentInstance[property];
      model[property] = componentInstance[property];
    });

    this.observe(componentInstance.model, property, function () {
      componentInstance[property] = componentInstance.model[property];
    });

    this.observe(model, property, function () {
      componentInstance[property] = model[property];
    });
  }, this);
};

function observeComplexProperty(property, componentInstance) {
  // setTimeout because nested bindings...
  setTimeout(function () {
    new generalModel.ModelNotifier().deepObserve(componentInstance, property).subscribe(function (model) {
      componentInstance.refresh(property);
    }, true);
  }, 50);
}

function isComplexProperty(defaultProperties, property) {
  var isComplexProp = complexProperties.indexOf(defaultProperties[property].type) !== -1;
  return !isComplexProp ? Array.isArray(defaultProperties[property].type) : isComplexProp;
}

function isRefreshableProperty(defaultProperties, property) {
  return !!defaultProperties[property].refresh;
}

},{"general-model":"general-model"}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiple = exports.single = exports.Select = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _component = require('component');

var _multiple = require('./multiple.js');

var multiple = _interopRequireWildcard(_multiple);

var _single = require('./single.js');

var single = _interopRequireWildcard(_single);

var _utils = require('utils');

var utils = _interopRequireWildcard(_utils);

var _utils2 = require('./utils.js');

var selectUtils = _interopRequireWildcard(_utils2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Select = function (_Component) {
  _inherits(Select, _Component);

  function Select(element, model) {
    _classCallCheck(this, Select);

    var _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).apply(this, arguments));

    utils.mixin(_this, _this.multiple ? multiple : single);
    return _this;
  }

  _createClass(Select, [{
    key: 'addEventListeners',
    value: function addEventListeners() {
      var _this2 = this;

      setTimeout(function () {
        _this2.init();
        if (!selectUtils.isThisComponentInCheckbox(_this2.element)) {
          _this2.element.addEventListener('option-tap', _this2.onOptionTapLocalListener.bind(_this2));
        }
        _this2.element.addEventListener('option-change', _this2.onOptionChangeLocalListener.bind(_this2));
      }, 0);
    }
  }, {
    key: 'ready',
    value: function ready() {
      selectUtils.observe(this.element, { childList: true, subtree: true }, this.reInitSelect.bind(this));
      this.addEventListeners();
    }
  }, {
    key: 'reInitSelect',
    value: function reInitSelect(mutations) {
      if (mutations.length >= 1 && this.options) {
        var removedOption = selectUtils.getCoOptionFromCollectionItemInMutations(mutations[0].removedNodes);
        var addedOption = selectUtils.getCoOptionFromCollectionItemInMutations(mutations[0].addedNodes);
        var indexRemovedOption = removedOption ? this.getIndexActiveOption(removedOption.model) : -1;

        this.options = selectUtils.getOptions(this.element);

        this.optionsRefresh(this.selected || this.selectedValues, this.options, addedOption, removedOption, indexRemovedOption);
      } else {
        this.options = selectUtils.getOptions(this.element);
      }
    }
  }, {
    key: 'getIndexActiveOption',
    value: function getIndexActiveOption(optionModel) {
      return this.options.indexOf(optionModel);
    }
  }, {
    key: 'template',
    value: function template() {
      return require('../template.html');
    }
  }, {
    key: 'dispatchEvent',
    value: function dispatchEvent(eventName, options) {
      utils.dispatchEvent(this.element, eventName, options);
    }
  }, {
    key: 'onOptionChangeLocalListener',
    value: function onOptionChangeLocalListener() {
      this.onOptionChange.apply(this, arguments);
    }
  }, {
    key: 'onOptionTapLocalListener',
    value: function onOptionTapLocalListener() {
      this.onOptionTap.apply(this, arguments);
    }
  }, {
    key: 'refresh',
    value: function refresh(attrName) {
      switch (attrName) {
        case 'multiple':
          this.clearAllData();
          utils.mixin(this, this.multiple ? multiple : single);
          break;
        default:
          this._refresh(attrName);
      }
    }
  }, {
    key: 'getOptionByValue',
    value: function getOptionByValue(value) {
      var optionFound = void 0;
      if (this.options) {
        this.options.some(function (option) {
          return option && option.value === value && (optionFound = option);
        });
      }
      return optionFound || null;
    }
  }, {
    key: 'clearAllData',
    value: function clearAllData() {
      var _this3 = this;

      Object.keys(this.defaults).forEach(function (el) {
        if (el !== 'multiple') {
          _this3[utils.toCamelCase(el)] = _this3.defaults[el].value;
        }
      });
    }
  }, {
    key: 'defaults',
    get: function get() {
      return {
        'multiple': {
          type: Boolean,
          value: false,
          refresh: true
        },
        'selected-values': {
          type: Array,
          value: [],
          refresh: true
        },
        'selected': {
          type: String,
          value: '',
          refresh: true
        },
        'index': {
          type: Number,
          value: -1,
          refresh: true
        },
        'options-index': {
          type: Array,
          value: [],
          refresh: true,
          sealed: true
        }
      };
    }
  }]);

  return Select;
}(_component.Component);

exports.Select = Select;
exports.single = single;
exports.multiple = multiple;

},{"../template.html":14,"./multiple.js":11,"./single.js":12,"./utils.js":13,"component":4,"utils":"utils"}],11:[function(require,module,exports){
'use strict';

exports.init = function () {
  if (this.optionsIndex.length > 0) {
    this._refresh('optionsIndex');
  } else {
    this._refresh('selectedValues');
  }
};

exports.optionsRefresh = function (selected, options, addedOption, removedOption, indexRemovedOption) {
  var indexAdded = void 0;

  if (removedOption) {
    this.removeActiveOption(indexRemovedOption);
  }

  if (addedOption) {
    indexAdded = this.options.indexOf(addedOption.model);
    this.addedNewCollectionUpper(indexAdded);

    /* if(~indexAdded){ // after added on ewizard this co-select marked as checked
        this.optionsIndex.push(indexAdded)
    } */
  }
};

exports.removeActiveOption = function (indexRemovedOption) {
  var newOptionsIndex = this.optionsIndex.filter(function (indexVal) {
    return indexRemovedOption !== indexVal;
  }).map(function (indexVal, index) {
    return indexRemovedOption > -1 && indexVal > indexRemovedOption ? --indexVal : indexVal;
  });

  this.optionsIndex = newOptionsIndex;
};

exports.addedNewCollectionUpper = function (indexAdded) {
  var isChanged,
      newOptionsIndex = this.optionsIndex.map(function (activeIndex) {
    if (indexAdded <= activeIndex) {
      isChanged = true;
      return ++activeIndex;
    } else {
      return activeIndex;
    }
  });

  if (isChanged) {
    this.optionsIndex = newOptionsIndex;
  }
};

exports.onOptionTap = function (event) {
  var option = event.detail;
  option.toggle();
  event.stopPropagation();
};

exports.onOptionChange = function (event) {
  var option = event.detail,
      index = this.options.indexOf(option),
      indexInSelect = void 0;

  if (!this.optionsIndexStateLocalChange) {
    indexInSelect = this.optionsIndex.indexOf(index);

    if (~indexInSelect) {
      this.optionsIndex.splice(indexInSelect, 1);
    } else {
      this.optionsIndex.push(index);
    }
  }
  this.optionsIndexStateLocalChange = false;
  event.stopPropagation();
};

exports._refresh = function (attrName, isModel) {
  var _this = this;

  switch (attrName) {
    case 'optionsIndex':
      {

        var isChanges = void 0,
            selectedValues = [];

        this.options.forEach(function (option, index) {
          _this.optionsIndexStateLocalChange = true;

          if (~_this.optionsIndex.indexOf(index)) {
            option.select();
            if (!~_this.selectedValues.indexOf(option.value)) {
              isChanges = true;
            }
            selectedValues.push(option.value);
          } else {
            option.unselect();
            if (~_this.selectedValues.indexOf(option.value)) {
              isChanges = true;
            }
          }
        });

        if (isChanges || this.selectedValues.length !== this.optionsIndex.length) {
          this.selectedValues = selectedValues;
          this.dispatchEvent('change', { detail: this.selectedValues });
        }

        this.optionsIndexStateLocalChange = false;
        break;
      }
    case 'selectedValues':
      {
        var _isChanges = void 0,
            newIndexArray = [],
            currentInd = void 0,
            indexInAll = void 0,
            values = this.getValuesByIndexAll();

        this.selectedValues.forEach(function (value, index) {

          currentInd = values.indexOf(value);

          if (!~currentInd) {
            _isChanges = true;
          }

          indexInAll = _this.options.indexOf(_this.getOptionByValue(value));

          if (~indexInAll) {
            newIndexArray.push(indexInAll);
          }
        });

        if (!_isChanges) {
          _isChanges = values.some(function (activeValue) {
            return !~_this.selectedValues.indexOf(activeValue);
          });
        }

        if (_isChanges) {
          this.optionsIndex = newIndexArray;
        }
      }
  }
};

exports.getValuesByIndexAll = function () {
  var _this2 = this;

  return this.optionsIndex.map(function (option) {
    return _this2.options[option].value;
  });
};

},{}],12:[function(require,module,exports){
'use strict';

var _utils = require('utils');

var utils = _interopRequireWildcard(_utils);

var _utils2 = require('./utils.js');

var selectUtils = _interopRequireWildcard(_utils2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.init = function () {
	allOptionOff(this.options);
	if (~this.index) {
		this._refresh('index');
	} else if (this.selected) {
		this._refresh('selected');
	}
};

function allOptionOff(options) {
	options.forEach(function (elem) {
		elem.unselect();
	});
}
exports.optionsRefresh = function (selected, options, addedOption, removedOption, currentActiveIndex) {

	if (addedOption) {
		addedOption.model.unselect();
		if (this.index > -1 && this.options.indexOf(addedOption.model) <= this.index) {
			this.index++;
		}
	} else if (this.index > -1 && currentActiveIndex > -1 && currentActiveIndex === this.index) {
		this.index = this.lastIndex = -1;
		this.selected = '';
	}
};

exports.onOptionTap = function (event) {
	var option = event.detail;
	this.tap = true;

	if (!option.selected) {
		option.select();
	}
};

exports.onOptionChange = function (event) {
	var option = event.detail,
	    index = this.options.indexOf(option);

	if (!this.tap) {
		if (this.index == index) {
			this.index = this.lastIndex = -1;
			this.selected = '';
		}
	}

	if (this.lastIndex != index && !this.options[index].model.selected) {
		this.lastIndex = this.index;
		this.index = index;
	}

	this.tap = false;
	event.stopPropagation();
};

exports._refresh = function (attrName) {
	switch (attrName) {
		case 'index':
			{
				this.unselectLastActive(this.lastIndex);
				this.selectNewItemByIndex(this.index);
				break;
			}
		case 'selected':
			{
				if (this.index >= 0 && this.index < this.options.length && this.options[this.index].value == this.selected) {
					return;
				} else {
					var newOptionSelected = this.getOptionByValue(this.selected);
					this.index = this.options.indexOf(newOptionSelected);
				}
				break;
			}
	}
};

exports.unselectLastActive = function () {
	if (this.lastIndex > -1 && this.options[this.lastIndex]) {
		this.options[this.lastIndex].unselect();
	}
};

exports.selectNewItemByIndex = function (index) {
	if (index > -1 && index < this.options.length) {
		this.options[index].select();
		this.selected = this.options[index].value;
		this.dispatchEvent('change', { detail: this.selected });

		this.lastIndex = index;
	} else {
		this.lastIndex = -1;
	}
};

},{"./utils.js":13,"utils":"utils"}],13:[function(require,module,exports){
'use strict';

var _utils = require('utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

module.exports.observe = function (element, config, callback) {
	new MutationObserver(function (mutations) {
		callback(mutations);
	}).observe(element, config);
	callback([]);
};

module.exports.getOptions = function (element) {
	return utils.toArray(element.getElementsByTagName('co-option')).map(function (optionElement) {
		return optionElement.model;
	}).filter(function (optionElementModel) {
		return optionElementModel;
	});
};

module.exports.isThisComponentInCheckbox = function (element) {
	return element.parentElement.tagName == "CO-CHECKBOX-GROUP" || element.parentElement.tagName == "CO-CHECKBOXES";
};

module.exports.getCoOptionFromCollectionItemInMutations = function (mutation) {
	if (mutation.length && mutation[0].tagName == 'CO-COLLECTION-ITEM') {
		return mutation[0].querySelector('co-option');
	}
	return false;
};

function isComponentLoad(component) {
	return component.hasAttribute('co-component');
}
module.exports.isCollectionLoad = function (collection) {
	if (collection && collection.children.length > 0) {
		return isComponentLoad(collection.children[0]);
	} else {
		return true;
	}
};

},{"utils":"utils"}],14:[function(require,module,exports){
module.exports = '<content co-select=""></content>'
},{}]},{},[1]);
