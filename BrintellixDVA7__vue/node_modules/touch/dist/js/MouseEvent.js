Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.MouseEvent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Event2 = require('./Event');

var _utils = require('utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var isMouse = !!window.MouseEvent;

var MouseEvent = exports.MouseEvent = function (_Event) {
	_inherits(MouseEvent, _Event);

	function MouseEvent() {
		_classCallCheck(this, MouseEvent);

		var _this = _possibleConstructorReturn(this, (MouseEvent.__proto__ || Object.getPrototypeOf(MouseEvent)).apply(this, arguments));

		_this.isMouse = isMouse;
		_this.numOfTouches = 1;
		return _this;
	}

	_createClass(MouseEvent, [{
		key: 'moveHandler',
		value: function moveHandler(event) {
			this.event = event;
			_get(MouseEvent.prototype.__proto__ || Object.getPrototypeOf(MouseEvent.prototype), 'moveHandler', this).call(this, event);
		}
	}, {
		key: 'events',
		get: function get() {
			return {
				start: 'mousedown',
				move: 'mousemove',
				end: 'mouseup'
			};
		}
	}, {
		key: 'options',
		get: function get() {
			return (0, _utils.mixin)(_get(MouseEvent.prototype.__proto__ || Object.getPrototypeOf(MouseEvent.prototype), 'options', this), {
				mouseEvent: this.event
			});
		}
	}], [{
		key: 'isMouse',
		get: function get() {
			return isMouse;
		}
	}]);

	return MouseEvent;
}(_Event2.Event);