Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.PointerEvent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _TouchEvent2 = require('./TouchEvent');

var _utils = require('utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var isPointerEvent = !!window.PointerEvent;

var PointerEvent = exports.PointerEvent = function (_TouchEvent) {
	_inherits(PointerEvent, _TouchEvent);

	function PointerEvent() {
		_classCallCheck(this, PointerEvent);

		var _this = _possibleConstructorReturn(this, (PointerEvent.__proto__ || Object.getPrototypeOf(PointerEvent)).apply(this, arguments));

		_this.isPointerEvent = isPointerEvent;
		_this.pointerEvents = [];
		_this.countTouches = 0;
		_this.maxCountTouches = 0;
		return _this;
	}

	_createClass(PointerEvent, [{
		key: 'startHandler',
		value: function startHandler(event) {
			this.savedPointerID = event.pointerId;
			this.prevEvent = null;
			_get(PointerEvent.prototype.__proto__ || Object.getPrototypeOf(PointerEvent.prototype), 'startHandler', this).call(this, event);
		}
	}, {
		key: 'moveHandler',
		value: function moveHandler(event) {
			this.updatePointerEvent(event);
			_get(PointerEvent.prototype.__proto__ || Object.getPrototypeOf(PointerEvent.prototype), 'moveHandler', this).call(this, event);
		}
	}, {
		key: 'endHandler',
		value: function endHandler(event) {
			_get(PointerEvent.prototype.__proto__ || Object.getPrototypeOf(PointerEvent.prototype), 'endHandler', this).call(this, event);
			this.prevEvent = null;
			this.removePointerEvent(event);
		}
	}, {
		key: 'updatePointerEvent',
		value: function updatePointerEvent(event) {
			this.removeCurrentPointerEvent(event);
			this.removeOutdatedPointerEvents();
			this.pushPointerEvent(event);
			this.countTouches = this.getCountTouches();
			if (this.maxCountTouches < this.countTouches) {
				this.maxCountTouches = this.countTouches;
			}
		}
	}, {
		key: 'pushPointerEvent',
		value: function pushPointerEvent(event) {
			event.pushTime = Date.now();
			this.pointerEvents.push(event);
		}
	}, {
		key: 'removePointerEvent',
		value: function removePointerEvent(event) {
			this.removeCurrentPointerEvent(event);
			this.countTouches = this.getCountTouches();
			if (this.countTouches === 0) {
				this.maxCountTouches = 0;
			}
		}
	}, {
		key: 'removeCurrentPointerEvent',
		value: function removeCurrentPointerEvent(event) {
			if (this.isTouchEvent(event)) {
				this.pointerEvents = this.pointerEvents.filter(function (pointerEvent) {
					return !(pointerEvent.pointerId === event.pointerId);
				});
			} else {
				this.pointerEvents = [];
			}
		}
	}, {
		key: 'removeOutdatedPointerEvents',
		value: function removeOutdatedPointerEvents() {
			var currentTime = Date.now();
			var timeLimit = 2500;

			this.pointerEvents = this.pointerEvents.filter(function (pointerEvent) {
				return currentTime - pointerEvent.pushTime < timeLimit;
			});
		}
	}, {
		key: 'getCountTouches',
		value: function getCountTouches() {
			return this.pointerEvents.length;
		}
	}, {
		key: 'setNumTouhces',
		value: function setNumTouhces() {
			this.numOfTouches = this.maxCountTouches;
		}
	}, {
		key: 'getOriginalEvent',
		value: function getOriginalEvent(event) {
			if (!this.isTouchEvent(event)) {
				return event;
			}
			if (event.pointerId === this.savedPointerID) {
				this.prevEvent = event;
				return event;
			} else {
				return this.prevEvent || event;
			}
		}
	}, {
		key: 'isTouchEvent',
		value: function isTouchEvent(event) {
			return event.pointerType === 'touch';
		}
	}, {
		key: 'events',
		get: function get() {
			return {
				start: 'pointerdown',
				move: 'pointermove',
				end: 'pointerup'
			};
		}
	}, {
		key: 'options',
		get: function get() {
			return (0, _utils.mixin)(_get(PointerEvent.prototype.__proto__ || Object.getPrototypeOf(PointerEvent.prototype), 'options', this), {
				touchEvents: this.pointerEvents
			});
		}
	}], [{
		key: 'isTouch',
		get: function get() {
			return false;
		}
	}, {
		key: 'isPointerEvent',
		get: function get() {
			return isPointerEvent;
		}
	}]);

	return PointerEvent;
}(_TouchEvent2.TouchEvent);