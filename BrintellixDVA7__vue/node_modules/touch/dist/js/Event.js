Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Event = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Event = exports.Event = function () {
	function Event() {
		var _this = this;

		_classCallCheck(this, Event);

		this.sensitivity = 50;
		this.start = function (event) {
			return _this.startHandler(event);
		};
		this.move = function (event) {
			return _this.moveHandler(event);
		};
		this.end = function (event) {
			return _this.endHandler(event);
		};
		this.numOfTouches = 0;
	}

	_createClass(Event, [{
		key: 'init',
		value: function init(root) {
			var _this2 = this;

			var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

			Object.keys(this.events).forEach(function (eventName) {
				root.addEventListener(_this2.events[eventName], function (event) {
					return _this2[eventName](event);
				});
			});
		}
	}, {
		key: 'setStartPosition',
		value: function setStartPosition(event) {
			this.startTime = Date.now();
			this.startX = event.screenX;
			this.startY = event.screenY;
		}
	}, {
		key: 'getFinalPosition',
		value: function getFinalPosition(event) {
			this.endX = event.screenX;
			this.endY = event.screenY;
		}
	}, {
		key: 'startHandler',
		value: function startHandler(event) {
			this.target = event.target;
			this.setStartPosition(event);
			this.getFinalPosition(event);
		}
	}, {
		key: 'moveHandler',
		value: function moveHandler(event) {
			this.getFinalPosition(event);
		}
	}, {
		key: 'endHandler',
		value: function endHandler(event) {
			var timeDiff = Date.now() - this.startTime,
			    diffX = this.endX - this.startX,
			    diffY = this.endY - this.startY;

			this.absX = Math.abs(diffX);
			this.absY = Math.abs(diffY);

			if (this.absX < 5 && this.absY < 5) {
				this.dispatchEvent(this.target, timeDiff < 300 ? 'tap' : 'hold', { pageX: this.endX, pageY: this.endY });
			} else if (timeDiff < 500) {

				if (this.absX >= this.absY) {
					if (this.absX >= this.sensitivity) {
						this.dispatchEvent(this.target, diffX > 0 ? 'swiperight' : 'swipeleft', this.options);
					}
				} else {
					if (this.absY >= this.sensitivity) {
						this.dispatchEvent(this.target, diffY > 0 ? 'swipedown' : 'swipeup', this.options);
					}
				}
			}
		}
	}, {
		key: 'getOriginalEvent',
		value: function getOriginalEvent(event) {
			return event;
		}
	}, {
		key: 'dispatchEvent',
		value: function dispatchEvent(target, eventType, options) {
			(0, _utils.dispatchEvent)(target, eventType, {
				detail: options || {}
			});
		}
	}, {
		key: 'events',
		get: function get() {
			return {
				start: '',
				move: '',
				end: ''
			};
		}
	}, {
		key: 'options',
		get: function get() {
			return {
				lengthX: this.absX,
				lengthY: this.absY,
				startX: this.startX,
				startY: this.startY,
				endX: this.endX,
				endY: this.endY,
				touchesCount: this.numOfTouches
			};
		}
	}]);

	return Event;
}();