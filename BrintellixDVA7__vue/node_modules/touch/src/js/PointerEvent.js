import {TouchEvent} from './TouchEvent';
import {mixin} from 'utils';

const isPointerEvent = !!window.PointerEvent;

export class PointerEvent extends TouchEvent {

	constructor() {
		super(...arguments);
		this.isPointerEvent = isPointerEvent;
		this.pointerEvents = [];
		this.countTouches = 0;
		this.maxCountTouches = 0;
	}

	static get isTouch(){
		return false;
	}

	static get isPointerEvent(){
		return isPointerEvent;
	}
	
	get events() {
		return {
			start: 'pointerdown', 
			move: 'pointermove', 
			end: 'pointerup'
		};
	}

	get options() {
		return mixin(super.options, {
			touchEvents: this.pointerEvents
		});
	}
	
	startHandler(event){
		this.savedPointerID = event.pointerId;
		this.prevEvent = null;
		super.startHandler(event);
	}

	moveHandler(event){
		this.updatePointerEvent(event);
		super.moveHandler(event);
	}

	endHandler(event){
		super.endHandler(event);
		this.prevEvent = null;
		this.removePointerEvent(event);
	}

	updatePointerEvent(event) {
		this.removeCurrentPointerEvent(event);
		this.removeOutdatedPointerEvents();
		this.pushPointerEvent(event);
		this.countTouches = this.getCountTouches();
		if(this.maxCountTouches < this.countTouches){
			this.maxCountTouches = this.countTouches;
		}
	}

	pushPointerEvent(event) {
		event.pushTime = Date.now();
		this.pointerEvents.push(event);
	}

	removePointerEvent(event) {
		this.removeCurrentPointerEvent(event);
		this.countTouches = this.getCountTouches();
		if(this.countTouches === 0){
			this.maxCountTouches = 0;
		}
	}

	removeCurrentPointerEvent(event){
		if(this.isTouchEvent(event)){
			this.pointerEvents = this.pointerEvents.filter(pointerEvent => {
				return !(pointerEvent.pointerId === event.pointerId);
			});
		}else{
			this.pointerEvents = [];
		}
	}

	removeOutdatedPointerEvents(){
		const currentTime = Date.now();
		const timeLimit = 2500;

		this.pointerEvents = this.pointerEvents.filter(pointerEvent => {
			return currentTime - pointerEvent.pushTime < timeLimit;
		});
	}

	getCountTouches() {
	   	return this.pointerEvents.length;
	}

	setNumTouhces(){
		this.numOfTouches = this.maxCountTouches;
	}

	getOriginalEvent(event){
		if(!this.isTouchEvent(event)){
			return event;
		}
		if(event.pointerId === this.savedPointerID){
			this.prevEvent = event;
			return event;
		}else{
			return this.prevEvent || event;
		}
	}

	isTouchEvent(event){
		return event.pointerType === 'touch';
	}
}
