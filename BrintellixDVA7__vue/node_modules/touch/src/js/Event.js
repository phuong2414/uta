import {dispatchEvent} from 'utils';

export class Event{

	constructor() {
		this.sensitivity = 50;
		this.start = event => this.startHandler(event);
		this.move = event => this.moveHandler(event);
		this.end = event => this.endHandler(event);
		this.numOfTouches = 0;
	}

	get events() {
		return {
			start: '', 
			move: '', 
			end: ''
		};
	}

	init(root, options = {}){
		Object.keys(this.events).forEach(eventName => {
			root.addEventListener(this.events[eventName], event => this[eventName](event));
		});
	}

	setStartPosition(event){
		this.startTime = Date.now();
		this.startX = event.screenX;
		this.startY = event.screenY;
	};

	getFinalPosition(event){
		this.endX = event.screenX;
		this.endY = event.screenY;
	};

	startHandler(event){
		this.target = event.target;
		this.setStartPosition(event);
		this.getFinalPosition(event);
	}

	moveHandler(event){
		this.getFinalPosition(event);
	}

	get options() {
		return {
			lengthX: this.absX,
			lengthY: this.absY,
			startX: this.startX,
			startY: this.startY,
			endX: this.endX,
			endY: this.endY,
			touchesCount: this.numOfTouches
		};
	}

	endHandler(event){
		let timeDiff = Date.now() - this.startTime,
			diffX = this.endX - this.startX,
			diffY = this.endY - this.startY;

		this.absX = Math.abs(diffX);
		this.absY = Math.abs(diffY);

		if(this.absX < 5 && this.absY < 5){
			this.dispatchEvent(this.target, timeDiff < 300 ? 'tap' : 'hold', {pageX: this.endX, pageY: this.endY});
		}else if(timeDiff < 500){

			if(this.absX >= this.absY){
				if(this.absX >= this.sensitivity){
					this.dispatchEvent(this.target, diffX > 0 ? 'swiperight' : 'swipeleft', this.options);
				}
			}else{
				if(this.absY >= this.sensitivity){
					this.dispatchEvent(this.target, diffY > 0 ? 'swipedown' : 'swipeup', this.options);
				}
			}

		}
	}

	getOriginalEvent(event){
		return event;
	}

	dispatchEvent(target, eventType, options){
		dispatchEvent(target, eventType, {
			detail: options || {}
		});
	}
}

