import {Event} from './Event';
import {mixin, toArray} from 'utils';
import isMobileTablet from './mobile-tablet-check';
import isPassiveOption from './passive-option-check';
import settings  from 'settings';

const isTouch = (window.hasOwnProperty('ontouchstart') || 'ontouchstart' in window) && isMobileTablet;


export class TouchEvent extends Event {

	constructor() {
		super(...arguments);
		this.isTouch = isTouch;
		this.numOfTouches = 0;
	}

	static get isTouch(){
		return isTouch;
	}

	get events() {
		return {
			start: 'touchstart',
			move: 'touchmove', 
			end: 'touchend'
		};
	}

	get options() {
		return mixin(super.options, {
			touchesCount: this.numOfTouches,
			touchEvents: this.event.touches ? toArray(this.event.touches) : []
		});
	}

	init(root, options = { preserveDefaultMovementBehavior: false }){
		super.init(root, options);

		root.addEventListener('touchmove', event => {
			if(!options.preserveDefaultMovementBehavior 
				&& !~(["VIDEO", "TEXTAREA"].indexOf(event.target.tagName))){
					event.preventDefault();
			}
		}, isPassiveOption ? { passive : false } : false);
	}

	setStartPosition(event){
		super.setStartPosition(event);
		this.duration = 0;
	}

	startHandler(event){
		var touchTarget = event.target;
		this.numOfTouches = 0;
		event = this.getOriginalEvent(event);
		super.startHandler(event);
		if (!this.target) {
			this.target = touchTarget;//fix iOs10
		}

		this.timer = setInterval(() => { //TODO
			this.duration++;
			if(this.numOfTouches === 2 && this.duration > 500){
				this.dispatchEvent(this.target, 'doublehold');
				clearInterval(this.timer);
			}
		}, 1);
	}

	moveHandler(event){
		this.event = event;
		this.setNumTouhces(event);
		event = this.getOriginalEvent(event);
		super.moveHandler(event);
	}

	endHandler(event){
		super.endHandler(event);
		clearInterval(this.timer);
	}

	setNumTouhces(event){
		let length = event.touches.length;
		if(this.numOfTouches < length){
			this.numOfTouches = length;
		}
	}

	getOriginalEvent(event){
		return event.touches[0] || event.changedTouches[0];
	}
}