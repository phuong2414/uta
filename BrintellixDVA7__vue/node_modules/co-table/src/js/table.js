import {Component} from 'component'
import rivets from 'rivets'
import localUtils from './utils.js'

rivets.binders['border-w'] = {
	routine: (element, width) =>{
		element.style.borderWidth = width + 'px' || '1px'
	}
}
rivets.binders['border-c'] = {
	routine: (element, color) =>{
		element.style.borderColor = color || 'inherit'
	}
}
rivets.binders.bgc = {
	routine: (element, bgsetting) =>{
		if (!bgsetting && bgsetting !== '') {
			return
		}
		element.style.backgroundColor = bgsetting
	}
}
rivets.binders.bgi = {
	routine: (element, bgsetting) =>{
		if (!bgsetting && bgsetting !== '') {
			return
		}
		element.style.backgroundImage = `url(${localUtils.formatSrc(bgsetting)})`
	}
}
rivets.binders.bgs = {
	routine: (element, bgsetting) =>{
		if (!bgsetting && bgsetting !== '') {
			return
		}
		element.style.backgroundSize = bgsetting
	}
}
rivets.binders.bgp = {
	routine: (element, bgsetting) =>{
		if (!bgsetting && bgsetting !== '') {
			return
		}
		element.style.backgroundPosition = bgsetting
	}
}
rivets.binders.colw = {
	routine: (element, colWidth) =>{
		element.style.width = colWidth ? colWidth + 'px' : ''
	}
}

rivets.binders.rowh = {
	routine: (element, rowHeight) =>{
		element.style.height = rowHeight ? rowHeight + 'px' : ''
	}
}

function isFirstCell(celInd, count){
	return celInd - count === 0 && celInd > 0
}

function isLastCell(celInd, count, row, rows){
	return celInd - count === row.length - 1 && celInd < rows.length - 1
}

export class Table extends Component {
	constructor(){
		super(...arguments)

		this.scrollerModel = {
			scrollbars: 'custom',
			bounce: false,
			scrollX: true,
			scrollY: true,
			momentum: false,
			snap: false,
			stopPropagationSwipe: 'vertical',
			preventDefault: false
		}
	}


	checkborder(rows){
		var table = this.element.querySelector('tbody')
		rows.forEach((rows, rowInd) =>{
			var count = 0,
				tr = table.children[rowInd]
			rows.forEach((cell, celInd) =>{
				if (cell === 2) {
					count++
				} else if (cell === 1) {
					var borderClass = '',
						colspan = this.rows[rowInd].cells[celInd - count].colspan - 1

					if ((rows[celInd + colspan + 1] === 2 || rows[celInd - 1] === 2)) {
						if (isFirstCell(celInd, count)) {
							borderClass += ' border-left'
						}
						if (isLastCell(celInd, count, this.rows[rowInd].cells, rows)) {
							borderClass += ' border-right'
						}
					}

					if (this.rows[rowInd].cells[celInd - count].rowspan > 1 && this.rows[rowInd].cells[celInd - count].rowspan + rowInd === this.rows.length) {
						borderClass += ' border-bottom'
					}
					tr.children[celInd - count].className = borderClass.substr(1)

					if (colspan > 0) {
						count += colspan
					}
				}
			})
		})
	}

	createMatrix(){
		var rows = this.rows.length,
			colInd = 0,
			matrix = new Array(rows),
			column = this.getColumnCount()
		for (var i = 0; i < rows; i++) {
			matrix[i] = new Array(column)
		}

		this.rows.forEach((row, rowIndex) =>{
			colInd = 0
			row.cells.forEach((cell) =>{
				colInd = this.getNextFreeCellColInd(matrix, rowIndex, colInd)
				matrix[rowIndex][colInd] = 1
				if (cell.colspan > 1 || cell.rowspan > 1) {
					this.createAdditionCells(matrix, cell, rowIndex, colInd)
				}
			})
		})
		return matrix
	}

	getColumnCount(){
		var count = 0
		if (this.rows[0]) {
			this.rows[0].cells.forEach(function(cell){
				count += (cell.colspan || 0)
			})
		}
		return count
	}

	createAdditionCells(matrix, cell, rowIndex, colInd){
		for (var i = 0; i < cell.rowspan; i++) {
			for (var j = 0; j < cell.colspan; j++) {
				if (i > 0 || j > 0) {
					matrix[rowIndex + i][colInd + j] = i === 0 ? 3 : 2
				}
			}
		}
	}

	getRowHeight(){
		return this.rowHeight[this.index] ? this.rowHeight[this.index].value : ''
	}

	getNextFreeCellColInd(matrix, currentRowInd, currentColInd){
		if (matrix[currentRowInd][currentColInd] && currentColInd < matrix[currentRowInd].length) {
			return this.getNextFreeCellColInd(matrix, currentRowInd, currentColInd + 1)
		} else {
			return currentColInd
		}
	}

	get defaults(){
		return {
			colWidth: {
				type: 'Array',
				value: [
					{
						'value': "50"
					},
					{
						'value': "50"
					},
					{
						'value': "50"
					}],
				refresh: true,
				sealed: true
			},
			rowHeight: {
				type: 'Array',
				value: [
					{
						'value': ""
					},
					{
						'value': ""
					},
					{
						'value': ""
					}],
				refresh: true,
				sealed: true
			},
			rows: {
				type: 'DataView',
				DataView: 'table',
				refresh: true,
				value: [
					{
						'border': {
							'width': '1',
							'color': '#000'
						},
						'cells': [
							{
								'colspan': 1,
								'rowspan': 1,
								'background': {
									'color': '',
									'image': '',
									'size': '100% 100%',
									'position': '0 0'
								},
								'border': {
									'width': '1',
									'color': '#000'
								},
								'text': {
									'html': '1'
								}
							},
							{
								'colspan': 1,
								'rowspan': 1,
								'background': {
									'color': '',
									'image': '',
									'size': '100% 100%',
									'position': '0 0'
								},
								'border': {
									'width': '1',
									'color': '#000'
								},
								'text': {
									'html': '2'
								}
							},
							{
								'colspan': 1,
								'rowspan': 1,
								'background': {
									'color': '',
									'image': '',
									'size': '100% 100%',
									'position': '0 0'
								},
								'border': {
									'width': '1',
									'color': '#000'
								},
								'text': {
									'html': '3'
								}
							}
						]
					},
					{
						'border': {
							'width': '1',
							'color': '#000'
						},
						'cells': [
							{
								'colspan': 1,
								'rowspan': 1,
								'background': {
									'color': '',
									'image': '',
									'size': '100% 100%',
									'position': '0 0'
								},
								'border': {
									'width': '1',
									'color': '#000'
								},
								'text': {
									'html': '4'
								}
							},
							{
								'colspan': 1,
								'rowspan': 1,
								'background': {
									'color': '',
									'image': '',
									'size': '100% 100%',
									'position': '0 0'
								},
								'border': {
									'width': '1',
									'color': '#000'
								},
								'text': {
									'html': '5'
								}
							},
							{
								'colspan': 1,
								'rowspan': 1,
								'background': {
									'color': '',
									'image': '',
									'size': '100% 100%',
									'position': '0 0'
								},
								'border': {
									'width': '1',
									'color': '#000'
								},
								'text': {
									'html': '6'
								}
							}
						]
					}
				]
			}
		}
	}

	ready(){
		this.coIscroll = this.element.querySelector('co-iscroll').model;
		this.coIscroll.HWCompositing = false;
		this.update();
	}

	update() {
		setTimeout(() => {
			this.checkborder(this.createMatrix());
			this.coIscroll.scroller.refresh();
		});
	}

	template(){
		return require('../template.html')
	}

	refresh(){
		this.update();
		this.view.update()
	}
}
