'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Iscroller = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _component = require('component');

var _iscroll = require('iscroll');

var _iscroll2 = _interopRequireDefault(_iscroll);

var _dispatcher = require('dispatcher');

var _dispatcher2 = _interopRequireDefault(_dispatcher);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Iscroller = exports.Iscroller = function (_Component) {
	_inherits(Iscroller, _Component);

	function Iscroller(element) {
		_classCallCheck(this, Iscroller);

		var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Iscroller).apply(this, arguments));

		element.style.opacity = 0;

		_this.lockSwipeEvents(element);

		_this.activateElement = function (event) {
			_this.scroller.scrollToElement(event.target, 0);
		};
		_this.deactivateElement = function () {
			_this.scroller.x = _this.xBeforeEditing;
			_this.scroller.y = _this.yBeforeEditing;
			_this.refresh();
		};

		setTimeout(function () {
			_this.scroller = new _iscroll2.default(element, _this);
			_this.scrollToElement(_this.scrollToSelector, 0);
			_this.scroller.on('beforeScrollStart', function () {
				return _this.scrollToSelector = '';
			});
			_this.observe();
			element.style.removeProperty('opacity');
		}, 0);

		return _this;
	}

	_createClass(Iscroller, [{
		key: 'ready',
		value: function ready() {
			var _this2 = this;

			var intervalHandler;

			_dispatcher2.default.subscribeAction(function (action) {
				if (action.type === _dispatcher2.default.ActionType.EDIT_PRESENTATION) {
					_this2.isEditing = true;
					_this2.xBeforeEditing = _this2.scroller.x;
					_this2.yBeforeEditing = _this2.scroller.y;
					if (!intervalHandler) {
						clearInterval(intervalHandler);
					}
					intervalHandler = setInterval(function () {
						_this2.scroller.refresh();
					}, 1000);
				}
				if (action.type === _dispatcher2.default.ActionType.VIEW_PRESENTATION) {
					_this2.isEditing = false;
					clearInterval(intervalHandler);
				}
			});
		}
	}, {
		key: 'template',
		value: function template() {
			return require('../template.html');
		}
	}, {
		key: 'refresh',
		value: function refresh(property) {
			if (property === "scrollToSelector") {
				this.scrollToElement(this.scrollToSelector);
			} else {
				var x = this.scroller.x,
				    y = this.scroller.y;

				this.scroller.destroy();
				this.scroller = new _iscroll2.default(this.element, this);

				if (property === "scrollX" || property === "scrollY") {
					this.scrollToElement(this.scrollToSelector, 0);
				} else if (property !== "startX" && property !== "startY") {
					this.scroller.scrollTo(x, y);
				}

				this.scroller.refresh();
			}
		}
	}, {
		key: 'lockSwipeEvents',
		value: function lockSwipeEvents(element) {
			["up", "down", "left", "right"].forEach(function (side) {
				element.addEventListener("swipe" + side, stopSwipeEvent);
			});
		}
	}, {
		key: 'observe',
		value: function observe() {
			var _this3 = this;

			new MutationObserver(function () {
				_this3.scroller.refresh();
			}).observe(this.element.getElementsByClassName('scroller')[0], { childList: true, subtree: true });
		}
	}, {
		key: 'scrollToElement',
		value: function scrollToElement(selector) {
			var time = arguments.length <= 1 || arguments[1] === undefined ? this.isEditing ? 0 : 200 : arguments[1];
			var offsetX = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
			var offsetY = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];

			if (selector) {
				var element = getDOMElement(this.element, selector);
				this.element.contains(element) && this.scroller.scrollToElement(element, time, offsetX, offsetY);
			}
		}
	}, {
		key: 'defaults',
		get: function get() {
			return {
				"fade-scrollbars": {
					value: false,
					type: Boolean,
					refresh: true,
					optional: true
				},
				"scrollbars": {
					value: true,
					values: [true, false, "custom"],
					type: String,
					refresh: true
				},
				"scroll-x": {
					value: true,
					type: Boolean,
					refresh: true
				},
				"scroll-y": {
					value: true,
					type: Boolean,
					refresh: true
				},
				"start-x": {
					value: 0,
					type: Number,
					refresh: true,
					optional: true,
					units: "px"
				},
				"start-y": {
					value: 0,
					type: Number,
					refresh: true,
					optional: true,
					units: "px"
				},
				"mouse-wheel": {
					value: true,
					type: Boolean,
					refresh: true
				},
				"mouse-wheel-speed": {
					value: 20,
					type: Number,
					refresh: true,
					optional: true,
					units: "px"
				},
				"interactive-scrollbars": {
					value: true,
					type: Boolean,
					refresh: true,
					optional: true
				},
				"momentum": {
					value: true,
					type: Boolean,
					refresh: true
				},
				"use-transition": {
					value: true,
					type: Boolean,
					refresh: true,
					optional: true
				},
				"bounce": {
					value: true,
					type: Boolean,
					refresh: true
				},
				"bounce-easing": {
					value: "",
					values: ["quadratic", "circular", "back", "bounce", "elastic", ""],
					type: String,
					refresh: true,
					optional: true
				},
				"bounce-time": {
					value: 600,
					type: Number,
					refresh: true,
					optional: true,
					units: "ms"
				},
				"scroll-to-selector": {
					value: "",
					type: String,
					refresh: true,
					optional: true
				},
				"snap": {
					value: "",
					type: String,
					refresh: true,
					optional: true
				}
			};
		}
	}]);

	return Iscroller;
}(_component.Component);

function stopSwipeEvent(event) {
	
	event.stopPropagation();
}

function getDOMElement(parentElement, selector) {
	return parentElement.querySelector(selector);
}