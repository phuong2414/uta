import touch from 'touch'
import {dispatchEvent, mixin} from 'utils'
import {Component} from 'component'
import {onenter, onleave} from 'nav'

const userAgent = window.navigator.userAgent
const IS_IPAD = !!~userAgent.toLowerCase().indexOf("ipad") //for fixes for ipad
const IS_IE11 = !!userAgent.match(/Trident\/7\./) //for fixes for ie11
const IS_EDGE = /Edge\/\d./i.test(userAgent) //for fixes for Edge

export default Textarea
export class Textarea extends Component {

	constructor(){
		super(...arguments)
		this.init()
	}

	init(){
		this.textarea = this.element.getElementsByTagName('textarea')[0]
		this.input = document.createElement('INPUT')
		this.dispatchOptions = {bubbles: false, detail: {'co-textarea': this}}
		this.isFocus = false

		this.addEvents()

		Object.keys(this.defaults)
			.forEach(this.refresh, this)

		onenter(function(){ // fix bug in .ipa offset the cursor by swipe
			this.textarea.style.width = ''
			this.textarea.disabled = this.disabled
			this.input.disabled = false

			window.focus()
			this.textarea.focus()
			this.textarea.blur()

		}.bind(this))

		onleave(function(){ // fix bug in .ipa offset the cursor by swipe
			var rect = this.textarea.getBoundingClientRect()
			var width = rect.width - 1

			this.textarea.disabled = true
			this.textarea.style.width = width + 'px'
			this.input.disabled = true
			this.isFocus = false
		}.bind(this))
	}

	addEvents(){
		['error', 'invalid']
			.forEach((event) =>{
				this.textarea.addEventListener(event, (event) =>{
					if (!event.bubbles) {
						dispatchEvent(this.element, event.type, mixin(this.dispatchOptions, event))
					}
				})
			})

		this.textarea.addEventListener('input', () =>{
			this.value = this.textarea.value

			if (!this.isFocus) {
				this.isFocus = true
				dispatchEvent(this.element, 'focus', this.dispatchOptions)
			}
		})
		this.textarea.addEventListener('keydown', () => this.correctCursor())

		document.addEventListener('beforeScroll', this.blurElement.bind(this, true));
		
		const events = ['tap', 'hold']


		events.forEach(eventName => {
			document.addEventListener(eventName, event => {
				if (event.target === this.textarea ||
					event.target === this.element) {
					this.focusElement()
				} else {
					this.blurElement()
				}
			})
		})

		document.addEventListener('swipeleft', event => this.blurElement())
		document.addEventListener('swiperight', event => this.blurElement())
	}

	correctCursor(){
		if (IS_IPAD) {
			window.focus()
			setTimeout(() =>{
				this.textarea.focus()
			}, 0)
		}
	}

	focusElement(){
		if (!this.isFocus) {
			this.isFocus = true

			setTimeout(() =>{ // fix bug in .ipa suspension by double tap
				this.input.focus()
				this.textarea.focus()

				dispatchEvent(this.element, 'focus', this.dispatchOptions)
			}, 0)
		}
	}

	blurElement(isBeforeScroll){
		if (this.isFocus || isBeforeScroll) {
			this.isFocus = false
			window.focus()
			this.textarea.blur()
			dispatchEvent(this.element, 'blur', this.dispatchOptions)
		}
	}

	get defaults(){
		let defaultProperties = {
			'autocomplete': {
				values: ['on', 'off'],
				type: String,
				refresh: true,
				optional: true
			},
			'autofocus': {
				type: Boolean,
				refresh: true,
				optional: true
			},
			'cols': {
				value: 50,
				type: Number,
				refresh: true,
				optional: true
			},
			'disabled': {
				type: Boolean,
				refresh: true,
				optional: true
			},
			'maxLength': {
				value: 1000,
				type: Number,
				refresh: true
			},
			'minLength': {
				type: Number,
				refresh: true,
				optional: true
			},
			'name': {
				type: String,
				refresh: true,
				optional: true
			},
			'placeholder': {
				type: String,
				refresh: true
			},
			'read-only': {
				type: Boolean,
				refresh: true
			},
			'required': {
				type: Boolean,
				refresh: true,
				optional: true
			},
			'rows': {
				value: 10,
				type: Number,
				refresh: true,
				optional: true
			},
			'spellcheck': {
				type: Boolean,
				refresh: true,
				optional: true
			},
			'value': {
				type: String,
				refresh: true,
				value: ''
			}
		}
		if (!IS_IE11 && !IS_EDGE) {
			defaultProperties['wrap'] = {
				values: ['soft', 'hard', 'off'],
				type: String,
				refresh: true,
				optional: true
			}
		}
		return defaultProperties
	}

	normalizeValue(value, maxLength){
		if (value && value.length > maxLength) {
			value = value.substring(0, maxLength)
		}
		return value
	}

	refresh(attribute){
		let property = this[attribute]
		if (attribute === 'value') {
			property = this.normalizeValue(property, this.maxLength)
		}
		if (this.textarea[attribute] && !property) {
			this.textarea[attribute] = (typeof this.textarea[attribute] === 'boolean') ? false : ''
		} else if (property) {
			this.textarea[attribute] = property
		}
	}

	template(){
		return require('../template.html')
	}

}