import {Component} from 'component'
import {mixin} from 'utils'

export class Tabs extends Component {
	constructor(){
		super(...arguments)

		this.scrollerModel = {
			scrollbars: 'custom'
		}
	}

	ready() {
		this.buttons = this.getButtonsData()
		this.contentCollection = this.getContentCollection()
		this.navCollection = this.getNavCollection()
	}

	getButtonsData(){
		return [...this.content]
	}

	getNavCollection(){
		return this.getCollection('navigation-menu-buttons')
	}

	getContentCollection(){
		return this.getCollection('tabs')
	}

	getCollection(classWrapper){
		const wrapper = this.element.getElementsByClassName(classWrapper)[0]
		let collection
		if (wrapper) {
			collection = wrapper.getElementsByTagName('co-collection')[0]
		}
		if (collection) {
			return collection
		}
		throw new Error("Can't find co-collection")
	}

	get defaults(){
		return {
			'orientation': {
				type: String,
				value: 'horizontal',
				values: ['horizontal', 'vertical'],
				refresh: true
			},
			'buttons': {
				type: Array,
				sealed: true,
				value: [{}],
				refresh: true
			},
			'content': {
				type: Array,
				sealed: true,
				value: [
					{
						'navHeaderActive': {'html': '<b>Tab 1</b>'},
						'navHeaderInactive': {'html': '<b>Tab 1</b>'},
						'image': {},
						'headerText': {'html': 'Lorem ipsum dolor sit amet'},
						'text': {'html': 'Tab 1 -- Consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.'}
					},
					{
						'navHeaderActive': {'html': '<b>Tab 2</b>'},
						'navHeaderInactive': {'html': '<b>Tab 2</b>'},
						'image': {},
						'headerText': {'html': 'Lorem ipsum dolor sit amet'},
						'text': {'html': 'Tab 2 -- Consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.'}
					},
					{
						'navHeaderActive': {'html': '<b>Tab 3</b>'},
						'navHeaderInactive': {'html': '<b>Tab 3</b>'},
						'image': {},
						'headerText': {'html': 'Lorem ipsum dolor sit amet'},
						'text': {'html': 'Tab 3 -- Consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.'}
					},
					{
						'navHeaderActive': {'html': '<b>Tab 4</b>'},
						'navHeaderInactive': {'html': '<b>Tab 4</b>'},
						'image': {},
						'headerText': {'html': 'Lorem ipsum dolor sit amet'},
						'text': {'html': 'Consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.'}
					}

				],
				refresh: true
			}
		}
	}

	template(){
		return require('../template.html')
	}

	refresh(attrName){
		switch (attrName) {
			case 'buttons':
				this.updateData(this.contentCollection, this.content, this.buttons)
				break
			case 'content':
				this.updateData(this.navCollection, this.buttons, this.content)
				break
		}
	}

	updateData(collection, target, opposite){
		const isInsert = isMore(opposite, target)
		const isRemove = isLess(opposite, target)

		if (isInsert) {
			this.insert(collection, opposite, target)
		}

		if (isRemove) {
			this.remove(collection, target, opposite)
		}
	}

	insert(target, content, comparedContent){
		processContent(content, comparedContent, (index, chunkOfContent) => target.model.insert(mixin({}, chunkOfContent), index))
	}

	remove(target, content, comparedContent){
		processContent(content, comparedContent, index => target.model.remove(index))
	}

}

function processContent(content, comparedContent, cb){
	content.forEach((chunkOfContent, index) =>{
		if (!isEqualObj(chunkOfContent, comparedContent[index])) {
			cb(index, chunkOfContent)
		}
	})
}

function isEqualObj(base, compared){
	let isEqual = !isEmpty(base, compared)

	if (!isEqual) {
		return isEqual
	}

	const baseKeys = Object.keys(base)
	const comparedKeys = Object.keys(compared)

	isEqual = isEqualLength(baseKeys, comparedKeys)
	if (!isEqual) {
		return isEqual
	}

	return baseKeys.every(key => base[key] === compared[key])
}

function isEmpty(base, compared){
	return !(base && compared)
}

function isEqualLength(base, compared){
	return base.length === compared.length
}

function isMore(base, compared){
	return base.length > compared.length
}

function isLess(base, compared){
	return base.length < compared.length
}
