var ViewPort = require('./viewport.js').ViewPort
var routie = require('routie')
var structure = require('structure')
var params = require('params')
var utils = require('utils')
var settings = require('settings')

var getFirstEnabledSlide = require('./utils').getFirstEnabledSlide
var getFirstNotEmptyChapter = require('./utils').getFirstNotEmptyChapter
var isEnableSlide = require('./utils').isEnableSlide;

var NEXT = 'next'
var PREV = 'prev'

var DIRECTIONS = {
  'horizontal': {
    prev: 'left',
    next: 'right'
  },
  'vertical': {
    prev: 'up',
    next: 'down'
  }
}

//This constant has to be synchronized with the same one in module 'build-nav', 'mitouch-spa/index.js' file.
var launchOptionsKey = 'presentationLaunchOptions'

function Navigator (viewId) {
  this.viewport = new ViewPort(document.getElementById(viewId))
  this.popupViews = []
  this.collectedPopupsCount = 0
  this.current = {}
  this.storage = {}

  this.viewport.subscribe('slidechange', function () {
    var currentFrame = this.viewport.currentFrame

    this.current.chapter = structure.chapters[this.viewport.chapter]
    this.current.slide = {
      id: this.viewport.slide,
      element: currentFrame.element,
      frame: currentFrame.iframe
    }
    this.current.index = this.viewport.index

    this.changing = true
    this.routeTo({chapter: this.viewport.chapter, slide: this.viewport.slide})
  }.bind(this))

  this.popupLeave = this.closePopup.bind(this)
  this.addLoader()

  this.start()
}

Navigator.prototype.start = function () {
  var firstChapterId, firstSlideId
  var launchOptions, startChapter, startSlide

  routie('/:chapter/:slide?', function (chapter, slide) {
    if (!this.changing) {
      this.viewport.start({chapter: chapter, slide: slide})
    }

    this.changing = false
  }.bind(this))

  if (hasLaunchOptions()) {
    launchOptions = getLaunchOptions()

    removeLaunchOptions()

    startChapter = launchOptions.chapter
    startSlide = launchOptions.slide
  }

  if (!this.current.slide) {
    var presentationStart = getStart(startChapter, startSlide, structure);

    this.viewport.start(this.getSlidesData(presentationStart.chapter, presentationStart.slide))
  }
}

Navigator.prototype.getSlidesData = function(chapter, slide){
  if(params.callNumber){
    return this.getStartSlideDataForScenarios();
  }

  if(params.division && structure.chapters[params.division]){
    return this.getFirstSlideByChapter(params.division);
  }

  return {
    chapter: chapter,
    slide: slide
  };
}

Navigator.prototype.getStartSlideDataForScenarios = function(){
  var chapterId = params.callNumber,
    visitMode = params.visitMode;

  if(visitMode === 'short'){
    return this.getFirstSlideDataByDivision(chapterId, visitMode);
  }

  return {
    slide: structure.chapters[chapterId].content[0],
    chapter: chapterId.toString()
  }
}

Navigator.prototype.getFirstSlideDataByDivision = function(chapterId, visitMode){
  var visitChapterId = [chapterId, visitMode].join('_');

  return {
    slide: structure.chapters[visitChapterId].content[0],
    chapter: visitChapterId
  }
}

Navigator.prototype.getFirstSlideByChapter = function(chapterId){
  return {
    slide: structure.chapters[chapterId].content[0],
    chapter: chapterId
  }
}

function getStart (launchChapter, launchSlide, structure) {
  var startChapter = launchChapter || (isStart(structure) && structure.start.chapter);
  var startSlide = launchSlide || (isStart(structure) && structure.start.slide);
  
  if (!startChapter && !startSlide) {
    return getAvailableChapter(structure);
  }

  if (startChapter && !chapterExists(startChapter, structure)) {
    return getAvailableChapter(structure);
  }

  if (startChapter && emptyChapter(startChapter, structure)) {
    return getAvailableChapter(structure, startChapter);
  }

  if (startChapter && startSlide) {
    return {
      chapter: startChapter,
      slide: structure.chapters[startChapter].content.includes(startSlide) ? startSlide : getFirstEnabledSlide(structure, startChapter)
    }
  }

  return getStartBySlide(startSlide, structure);
}

function getStartBySlide (slide, structure) {
  if (!structure.slides[slide]) {
    return getAvailableChapter(structure);
  }
  return {
    slide: slide
  };
}

function getAvailableChapter (structure, startChapter) {
  var chapter = getFirstNotEmptyChapter(structure, startChapter);
  return {
    chapter: chapter,
    slide: getFirstEnabledSlide(structure, chapter)
  };
}

function chapterExists (chapter, structure) {
  return !!structure.chapters[chapter] && structure.storyboard.includes(chapter);
}

function emptyChapter (chapter, structure) {
  var chapterSlides = structure.chapters[chapter].content.filter(isEnableSlide);
  return !chapterSlides.length;
}

function isStart (structure) {
  return structure.start && !!Object.keys(structure.start).length
}

function getLaunchOptions() {
  var launchOptions = sessionStorage.getItem(launchOptionsKey)
  if (launchOptions) {
    return JSON.parse(launchOptions);
  }
}

function removeLaunchOptions() {
  sessionStorage.removeItem(launchOptionsKey)
}

function hasLaunchOptions() {
  var launchOptions = getLaunchOptions();
  return !!launchOptions;
}


Navigator.prototype.goto = function (options) {
  var popupView = this.popupViews.length && this.getLastPopupView()

  if (popupView && popupView.chapter === options.chapter) {
    popupView.goto(options)
  } else {
    this.viewport.goto(options)
  }
}

Navigator.prototype.isPopup = function () {
  return !!this.popupViews.length
}

Navigator.prototype.nextChapter = function () {
  this.viewport.goToSibling(DIRECTIONS[this.viewport.chapterDirection][NEXT])
}

Navigator.prototype.previousChapter = function () {
  this.viewport.goToSibling(DIRECTIONS[this.viewport.chapterDirection][PREV])
}

Navigator.prototype.nextSlide = function () {
  this.viewport.goToSibling(DIRECTIONS[this.viewport.slideDirection][NEXT])
}

Navigator.prototype.previousSlide = function () {
  this.viewport.goToSibling(DIRECTIONS[this.viewport.slideDirection][PREV])
}

Navigator.prototype.moveRight = function () {
  this.viewport.goToSibling('right')
}

Navigator.prototype.moveLeft = function () {
  this.viewport.goToSibling('left')
}

Navigator.prototype.moveDown = function () {
  this.viewport.goToSibling('down')
}

Navigator.prototype.moveUp = function () {
  this.viewport.goToSibling('up')
}

Navigator.prototype.routeTo = function (options) {
  routie('/' + options.chapter + '/' + (options.slide || ''))
}

Navigator.prototype.getCurrentViewPort = function () {
  return this.popupViews.length ? this.getLastPopupView() : this.viewport
}

Navigator.prototype.getLastPopupView = function () {
  return this.popupViews[this.popupViews.length - 1];
}

Navigator.prototype.createPopup = function (options, parameters) {
  var popupElement
  var popupViewPort
  parameters = parameters || {}

  this.getCurrentViewPort().dispatchSlideLeaveForCurrentSlide()

  parameters.isPopup = true
  popupElement = document.createElement('div')
  popupViewPort = new ViewPort(popupElement, parameters)

  popupElement.className = 'popup loaded'

  this.viewport.subscribe('slidechange', this.popupLeave)

  this.pushPopupView(popupViewPort)
  document.body.appendChild(popupElement)

  utils.once(document, 'slideenter', function() {
    popupElement.className = 'popup'
	popupViewPort.dispatchSlideEvent('open-collect-popup', popupViewPort.frames.current)
  })
  popupViewPort.goto(options)
}

Navigator.prototype.openPopup = function (options) {
  if (validateChapter(options.chapter)) {
    this.createPopup(options)
  } else {
    console.log('Popup has incorrect structure.')
  }
}

function validateChapter (chapterId) {
  var chapter = structure.chapters[chapterId]
  return chapter && validateContent(chapter.content)
}

function validateContent (content) {
  return content.every(function (slide) {
    return structure.slides[slide]
  })
}

Navigator.prototype.closePopup = function () {
  var popupViewPort = this.popPopupView()

  if (popupViewPort) {
    popupViewPort.dispatchSlideEvent('close-collect-popup', popupViewPort.frames.current);
    popupViewPort.dispatchSlideEvent('slideleave', popupViewPort.frames.current)

    popupViewPort.element.parentNode.removeChild(popupViewPort.element)
    if (popupViewPort.isCollectPopup) {
      delete structure.chapters[popupViewPort.chapter];
    }
  }

  this.getCurrentViewPort().dispatchSlideEnterToCurrentSlide()
  this.viewport.unsubscribe('slidechange', this.popupLeave)
}

Navigator.prototype.collectPopup = function (slides, slide) {
  var id = 'collected-popup-' + (++this.collectedPopupsCount);

  if(settings.isScenario && !isSlideInStructure(slide)){
    slides = this.setPresentationIdToSlides(slides)
    slide = this.setPresentationIdToSlide(slide)
  }

  if (validateContent(slides)) {
    structure.chapters[id] = {
      id: id,
      name: 'Collected Popup ' + this.collectedPopupsCount,
      content: slides
    }
    this.createPopup({
      chapter: id,
      slide: slide,
      noTransition: true,
    }, {isCollectPopup: true})
  } else {
    console.log('Collect Popup has incorrect structure.')
  }
}

Navigator.prototype.addLoader = function(){
  var loader = getLoader();

  if(this.isShowLoader()){
    document.addEventListener('willgoto', function() {
      loader.classList.add('active');
    })

    document.addEventListener('slideenter', function() {
      loader.classList.remove('active');
    })
  }
}

Navigator.prototype.setPresentationIdToSlides = function(slides){
  return slides.map(function(slide) {
    return this.setPresentationIdToSlide(slide)
  }.bind(this));
}

Navigator.prototype.setPresentationIdToSlide = function(slideId){
  return [
    this.getSettingsId(),
    slideId
  ].join('_')
}

Navigator.prototype.getSettingsId = function(){
  var settings = this.viewport.currentFrame.iframe.contentWindow.require('settings')

  return settings.id
}

Navigator.prototype.isShowLoader = function(){
  var clm = settings._env.currentClm === 'dev' ? 'spa' : settings._env.currentClm
  return settings.clms && settings.clms[clm] && settings.clms[clm].showLoader
}

function getLoader(){
  return document.getElementsByClassName('loader-wrapper')[0];
}

function isSlideInStructure(slideId){
  return !!structure.slides[slideId]
}

Navigator.prototype.pushPopupView = function (popupViewPort) {
  markViewAsDisable(this.getCurrentViewPort())
  this.popupViews.push(popupViewPort)
}

Navigator.prototype.popPopupView = function () {
  var removedView = this.popupViews.pop();
  removeDisableMarkFromView(this.getCurrentViewPort())
  return removedView;
}

function markViewAsDisable(view) {
  view.element.classList.add("disable");
}

function removeDisableMarkFromView(view) {
  view.element.classList.remove("disable");
}

module.exports = Navigator
