var utils = require('utils')
var interpolate = require('./interpolate')

function getExternalChapterId(structure, chapter) {
  if (chapter) {
    return structure.chapters[chapter] ? structure.chapters[chapter].chapterExternalId : ''
  }
}

function getChapter(structure, slideId) {
  var chapterId = Object.keys(structure.chapters)
    .find(function (chapter) {
      return structure.chapters[chapter].content.includes(slideId) || structure.chapters[chapter].content.includes('!' + slideId)
    })

  if (chapterId) {
    return Object.assign({}, structure.chapters[chapterId], {
      id: chapterId
    })
  }

  return {}
}

function mixinIrepFormat(settings, irepFormat) {
  irepFormat = irepFormat || 'crm'
  var mixinedSettings = Object.assign({}, settings)

  if (mixinedSettings.clms && mixinedSettings.clms.irep && typeof mixinedSettings.clms.irep[irepFormat] === 'object') {
    Object.keys(mixinedSettings.clms.irep[irepFormat]).map(function (key) {
      if (key !== 'sharedResourceName') {
        mixinedSettings.clms.irep[key] = mixinedSettings.clms.irep[irepFormat][key]
      }
    })
  }

  return mixinedSettings
}

module.exports = function (settings, structure) {
  function createTemplate(slideId) {
    var chapter = getChapter(structure, slideId) || {
      id: '',
      chapterExternalId: ''
    }
    var slideIndex = chapter && chapter.content && chapter.content.indexOf(slideId) + 1
    var chapterIndex = (chapter && chapter.index) || structure.storyboard.indexOf(chapter.id) + 1

    chapter.chapterExternalId = chapter.chapterExternalId || chapter.id
    return {
      settings: settings,
      structure: {
        slide: utils.mixin({
          id: slideId,
          index: slideIndex
        }, structure.slides[slideId] || {}),
        chapter: utils.mixin({
          id: chapter.id,
          index: chapterIndex
        }, chapter || {})
      }
    }
  }

  return {
    slide: function slide(slideId, irepFormat) {
      var interpolatedSettings = slideId ? interpolate(settings, createTemplate(slideId)) :
        settings
      return mixinIrepFormat(interpolatedSettings, irepFormat)
    },
    createTemplate: createTemplate,
    getClmPresentationSettings: function (options) {
      var mixinedFormatSettings = mixinIrepFormat(settings, options.irepFormat)
      var existClmPresentation = mixinedFormatSettings.clms && mixinedFormatSettings.clms[options.clm] && mixinedFormatSettings.clms[options.clm].presentation

      return existClmPresentation ? interpolateSettings(settings, options.irepFormat).clms[options.clm].presentation : {}
    },
    interpolateSettings: function (settings) {
      return interpolate(settings, {
        settings: settings
      }, irepFormat)
    },
    template: function (options) {
      var chapter = structure.chapters[options.chapter]
      var slideIndex = chapter && chapter.content && chapter.content.indexOf(options.slide) + 1
      var chapterIndex = (chapter && chapter.index) || structure.storyboard.indexOf(options.chapter) + 1

      var dynamicSettings = interpolate(settings, {
        settings: settings,
        structure: {
          slide: utils.mixin({
            id: options.slide,
            index: slideIndex
          }, structure.slides[options.slide] || {}),
          chapter: utils.mixin({
            id: options.chapter,
            index: chapterIndex
          }, chapter || {})
        }
      })

      dynamicSettings.clms = dynamicSettings.clms || {}
      dynamicSettings.clms.irep = dynamicSettings.clms.irep || {}

      dynamicSettings = mixinIrepFormat(dynamicSettings, options.irepFormat)

      dynamicSettings.clms.irep.chapterExternalId = dynamicSettings.clms.irep.chapterExternalId || getExternalChapterId(structure, options.chapter)

      return dynamicSettings
    },
    allSlides: function allSlides() {
      return this.getStructureSlides().map(slide)
    },
    getStructureSlides: function getStructureSlides() {
      return Object.keys(structure.slides)
    }
  }
}
