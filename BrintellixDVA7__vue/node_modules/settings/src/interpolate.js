var template = require('lodash-template')
var getValueByKeypath = require('./get-by-keypath')

module.exports = function (obj, data) {
  var ROOT_KEYPATH = 'settings'
  var keypathStack = []
  var objCopy = copyObject(obj)

  data[ROOT_KEYPATH] = objCopy

  return processObject(objCopy, data, ROOT_KEYPATH, keypathStack)
}

function processObject(obj, data, keypath, keypathStack) {
  return Object.keys(obj).reduce(function (result, key) {
    var value = obj[key]
    var templateDelimiter = /\{([^\}]+)\}/

    if (isString(value)) {
      keypathStack = [concatKeypath(keypath, key)]
      result[key] = processString(value, data, templateDelimiter, keypathStack)
    } else if (isObject(value)) {
      result[key] = processObject(value, data, concatKeypath(keypath, key), keypathStack)
    }

    return result
  }, obj);
}

function processString(string, data, delimiter, keypathStack) {
  var match = string.match(delimiter)

  if (!match) {
    return string
  }

  var nextKeypath = match[1]
  var startingKeypath = keypathStack[0]

  string = applyMasks(string, data)

  if (keypathStack.indexOf(nextKeypath) >= 0) {
    return getValueByKeypath(data, startingKeypath)
  }

  keypathStack.push(nextKeypath)

  try {
    return processString(template(string, data, {
      interpolate: delimiter
    }), data, delimiter, keypathStack)
  } catch (err) {
    return string
  }
}

function copyObject(obj) {
  return JSON.parse(JSON.stringify(obj))
}

function isString(value) {
  return typeof value === 'string'
}

function isObject(value) {
  return typeof value === 'object'
}

function concatKeypath(keypath, key) {
  return keypath + '.' + key
}

function applyMasks(string, data) {
  var allKeypaths = string.match(/\{([^\}]+)\}/g)

  allKeypaths.forEach(function (keypath) {
    if (hasMask(keypath)) {
      var newKeypath = randomstring();
      var maskedKeyRE = /{(.+)\|(.+)}/
      var match = keypath.match(maskedKeyRE)
      var keypathWithoutMask = match[1]
      var mask = match[2]
      var value = getValueByKeypath(data, keypathWithoutMask)
      var stringifiedValue = value === undefined ? '' : value.toString()
      data[newKeypath] = applyMask(mask, stringifiedValue)
      string = string.replace(keypath, '{' + newKeypath + '}')
    };
  })

  return string
}

function hasMask(string) {
  return string.split('|').length === 2
}

function applyMask(mask, value) {
  var match = mask.match(/#+/)

  if (match && value.length <= match[0].length) {
    return mask.replace(match[0], value.padStart(match[0].length, '0'))
  }

  return value
}

function randomstring() {
  var length = 8
  var alphabet = 'abcdefghijklmnopqrstuvwxyz'
  var string = ''

  for (var i = 0; i < length; i++) {
    string += alphabet[Math.floor(Math.random() * alphabet.length)]
  }

  return string
}
