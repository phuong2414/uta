'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Popup = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _utils = require('utils');

var _nav = require('nav');

var _nav2 = _interopRequireDefault(_nav);

var _coImage = require('co-image');

var _coImage2 = _interopRequireDefault(_coImage);

var _coShower = require('co-shower');

var _coShower2 = _interopRequireDefault(_coShower);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Popup = exports.Popup = function (_coShower$constructor) {
  _inherits(Popup, _coShower$constructor);

  function Popup() {
    _classCallCheck(this, Popup);

    var _this = _possibleConstructorReturn(this, (Popup.__proto__ || Object.getPrototypeOf(Popup)).apply(this, arguments));

    _this.element.setAttribute('container', 'container');
    _this.subscribeToEvents();
    _this.setId();
    _this.openPopupHandler = function (event) {
      return _this.openPopup(event);
    };
    _this.closePopupHandler = function (event) {
      return _this.closePopup(event);
    };
    return _this;
  }

  _createClass(Popup, [{
    key: 'hideHandler',
    value: function hideHandler(event) {
      if (event.popupId !== this.id) {
        _get(Popup.prototype.__proto__ || Object.getPrototypeOf(Popup.prototype), 'hideHandler', this).call(this, event);
      }
    }
  }, {
    key: 'template',
    value: function template() {
      return require('../template.html');
    }
  }, {
    key: 'refresh',
    value: function refresh(key) {
      if (key === 'id') {
        this.setId();
      }

      _get(Popup.prototype.__proto__ || Object.getPrototypeOf(Popup.prototype), 'refresh', this).call(this, key);
    }
  }, {
    key: 'subscribeToEvents',
    value: function subscribeToEvents() {
      var _this2 = this;

      this.element.addEventListener('open', function (event) {
        return _this2.openPopupHandler(event);
      });

      this.element.addEventListener('show', function () {
        (0, _utils.dispatchEvent)(_this2.element, 'popupenter');
      });

      this.element.addEventListener('hide', function () {
        (0, _utils.dispatchEvent)(_this2.element, 'popupleave');
      });

      _nav2.default.onleave(function () {
        _this2.deactivate();
      });

      _nav2.default.onenter(function () {
        if (_this2.showOnSlideenter) {
          _this2.showPopup();
        }
      });
    }
  }, {
    key: 'openPopup',
    value: function openPopup(event) {
      if (!this.isAnimate) {
        this.showPopup();
        this.stopPropagation(event);
      }
    }
  }, {
    key: 'closePopup',
    value: function closePopup(event) {
      if (!this.isAnimate) {
        this.hidePopup();
        this.stopPropagation(event);
      }
    }
  }, {
    key: 'showPopup',
    value: function showPopup() {
      this.visible = true;
    }
  }, {
    key: 'hidePopup',
    value: function hidePopup() {
      this.visible = false;
    }
  }, {
    key: 'activate',
    value: function activate() {
      this.showPopup();
      this.showElement();
    }
  }, {
    key: 'deactivate',
    value: function deactivate() {
      this.hidePopup();
      this.hideElement();
    }
  }, {
    key: 'setId',
    value: function setId() {
      if (!this.id) {
        this.id = this.element.id;
      }

      if (this.id) {
        this.element.dataset.eid = this.id;
      } else if (this.element.dataset.eid) {
        delete this.element.dataset.eid;
      }
    }
  }, {
    key: 'stopPropagation',
    value: function stopPropagation(event) {
      if (event) {
        event.stopPropagation();
      }
    }
  }, {
    key: 'defaults',
    get: function get() {
      var copy = _get(Popup.prototype.__proto__ || Object.getPrototypeOf(Popup.prototype), 'defaults', this);
      copy['show-on'].sealed = true;
      copy['hide-on'].sealed = true;
      copy.visible.sealed = true;

      return (0, _utils.mixin)({
        id: {
          value: '',
          type: String,
          refresh: true,
          sealed: true
        },
        title: {
          value: 'Popup label',
          type: String
        },
        'show-on-slideenter': {
          value: false,
          optional: true,
          refresh: true,
          type: Boolean
        },
        'show-close-button': {
          type: Boolean,
          value: true
        },
        'close-button-image': {
          value: {
            src: resolve('../../media/images/close-black.png')
          },
          scheme: _coImage2.default.constructor.prototype.defaults,
          base: _coImage2.default.constructor,
          type: Object
        }
      }, copy);
    }
  }]);

  return Popup;
}(_coShower2.default.constructor);

exports.Popup = Popup;