(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (resolve){
'use strict';

var Popup = require('./src/js/popup').Popup,
    createComponent = require("component").createComponent;

module.exports = createComponent({
	name: 'co-popup',
	constructor: Popup,
	localExtensions: {
		components: {
			'co-button': require('co-button'),
			'co-container': require('co-container'),
			'co-image': require('co-image')
		}
	},
	localizationTemplate: resolve('i18n/{lang}.json')
});
require("rivets").components[module.exports.name] = module.exports;

}).call(this,function(relativePath){
			var settings = require('settings'),
				componentsDirecotry = settings.components,
				emptyString = '';

			  return componentsDirecotry.replace(new RegExp('/$'), emptyString) + '/co-popup/' + relativePath.replace(new RegExp('^/'), emptyString);
		})
},{"./src/js/popup":24,"co-button":3,"co-container":6,"co-image":10,"component":18,"rivets":"rivets","settings":"settings"}],2:[function(require,module,exports){
"use strict";

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Cache = function () {
  function Cache() {
    _classCallCheck(this, Cache);

    this.storage = {};
  }

  _createClass(Cache, [{
    key: "set",
    value: function set(key, data) {
      this.storage[key] = data;
    }
  }, {
    key: "get",
    value: function get(key) {
      return this.storage[key];
    }
  }, {
    key: "isCache",
    value: function isCache(key) {
      return Object.prototype.hasOwnProperty.call(this.storage, key);
    }
  }]);

  return Cache;
}();

module.exports = Cache;

},{}],3:[function(require,module,exports){
(function (resolve){
'use strict';

var createComponent = require('component').createComponent,
    Button = require('./src/js/Button.js').Button;

module.exports = createComponent({
	name: 'co-button',
	constructor: Button,
	localizationTemplate: resolve('i18n/{lang}.json')
});

}).call(this,function(relativePath){
			var settings = require('settings'),
				componentsDirecotry = settings.components,
				emptyString = '';

			  return componentsDirecotry.replace(new RegExp('/$'), emptyString) + '/co-popup/_assets/co-button/' + relativePath.replace(new RegExp('^/'), emptyString);
		})
},{"./src/js/Button.js":4,"component":18,"settings":"settings"}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Button = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _component = require('component');

var _nav = require('nav');

var _nav2 = _interopRequireDefault(_nav);

var _touch = require('touch');

var _utils = require('utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Button = exports.Button = function (_Component) {
	_inherits(Button, _Component);

	function Button() {
		_classCallCheck(this, Button);

		var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));

		_this.element.addEventListener(_touch.events.start, _this);
		_this.element.addEventListener('tap', _this);
		Object.keys(_this.defaults).forEach(function (property) {
			if (_this.defaults[property].refresh) {
				_this.refresh(property);
			}
		});

		_nav2.default.onleave(function () {
			_this.active = false;
		});
		return _this;
	}

	_createClass(Button, [{
		key: 'handleEvent',
		value: function handleEvent(event) {
			if (this.disabled) {
				return;
			}
			switch (event.type) {
				case 'tap':
					{
						if (this.toggles) {
							this.toggle();
						}
						break;
					}
				case _touch.events.start:
					{
						this.press();
						if (!this.toggles) {
							this.activateButton();
						}
						document.addEventListener(_touch.events.end, this, true);
						break;
					}
				case _touch.events.end:
					{
						this.release();
						if (!this.toggles) {
							this.deactivateButton();
						}
						document.removeEventListener(_touch.events.end, this, true);
						break;
					}
			}
		}
	}, {
		key: 'activateButton',
		value: function activateButton() {
			this.active = true;
		}
	}, {
		key: 'deactivateButton',
		value: function deactivateButton() {
			this.active = false;
		}
	}, {
		key: 'press',
		value: function press() {
			this.pressed = true;
			utils.dispatchEvent(this.element, 'press');
		}
	}, {
		key: 'release',
		value: function release() {
			this.pressed = false;
			utils.dispatchEvent(this.element, 'release');
		}
	}, {
		key: 'toggle',
		value: function toggle() {
			this.active = !this.active;
			utils.dispatchEvent(this.element, 'toggle');
		}
	}, {
		key: 'dispatchActiveState',
		value: function dispatchActiveState() {
			if (this.notInitialActivation) {
				utils.dispatchEvent(this.element, this.active ? 'activatebutton' : 'deactivatebutton');
			}
			this.notInitialActivation = true;
		}
	}, {
		key: 'toggleOff',
		value: function toggleOff() {
			if (!this.toggles && this.active) {
				this.deactivateButton();
				utils.dispatchEvent(this.element, 'toggle');
			}
		}
	}, {
		key: 'template',
		value: function template() {
			return require('../template.html');
		}
	}, {
		key: 'refresh',


		// on selected change
		// android 4.0 does not support the second parameter for the classList.toggle method
		value: function refresh(changedProperty) {
			var method = this[changedProperty] ? 'add' : 'remove';
			this.element.classList[method](changedProperty);

			if (changedProperty === 'toggles') {
				this.toggleOff();
			} else if (changedProperty === 'active') {
				this.dispatchActiveState();
			}
		}
	}, {
		key: 'defaults',
		get: function get() {
			return {
				toggles: {
					type: Boolean,
					value: false
				},
				active: {
					type: Boolean,
					value: false,
					refresh: true
				},
				pressed: {
					type: Boolean,
					value: false,
					refresh: true
				},
				"shadow": {
					type: Boolean,
					value: false,
					refresh: true
				},
				disabled: {
					type: Boolean,
					value: false,
					refresh: true
				}
			};
		}
	}]);

	return Button;
}(_component.Component);

},{"../template.html":5,"component":18,"nav":"nav","touch":"touch","utils":"utils"}],5:[function(require,module,exports){
module.exports = '<content co-button></content>'
},{}],6:[function(require,module,exports){
(function (resolve){
'use strict';

var createComponent = require('component').createComponent,
    Container = require('./src/js/Container.js').Container;

module.exports = createComponent({
	name: 'co-container',
	constructor: Container,
	localizationTemplate: resolve('i18n/{lang}.json')
});

}).call(this,function(relativePath){
			var settings = require('settings'),
				componentsDirecotry = settings.components,
				emptyString = '';

			  return componentsDirecotry.replace(new RegExp('/$'), emptyString) + '/co-popup/_assets/co-container/' + relativePath.replace(new RegExp('^/'), emptyString);
		})
},{"./src/js/Container.js":7,"component":18,"settings":"settings"}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Container = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _component = require("component");

var _dispatcher = require("dispatcher");

var _dispatcher2 = _interopRequireDefault(_dispatcher);

var _utils = require("./utils.js");

var localUtils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HIDDEN_ELEMENT = 'hidden-element';
var HIGHLIGHTED_CLASS = 'highlighted';
var EMPTY_CLASS = 'empty';

var Container = exports.Container = function (_Component) {
	_inherits(Container, _Component);

	function Container() {
		_classCallCheck(this, Container);

		var _this = _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));

		if (_this.element.getAttribute('container') === 'false') {
			_this.element.removeAttribute('container');
		} else {
			_this.element.setAttribute('container', 'true');
		}

		_this.subscribeAction = _dispatcher2.default.subscribeAction(function (action) {
			console.log(action.type);
			if (action.type === _dispatcher2.default.ActionType.EDIT_PRESENTATION) {
				//element.classList.add(HIGHLIGHTED_CLASS)
				_this.element.classList.add(HIGHLIGHTED_CLASS);
			} else if (action.type === _dispatcher2.default.ActionType.VIEW_PRESENTATION) {
				//element.classList.remove(HIGHLIGHTED_CLASS)
				_this.element.classList.remove(HIGHLIGHTED_CLASS);
			}
		});

		_this.addEmptyClass();
		localUtils.observe(_this.element, { childList: true, subtree: true }, _this.addEmptyClass.bind(_this));
		return _this;
	}

	_createClass(Container, [{
		key: "getChilds",
		value: function getChilds() {
			var children = this.element.children;

			return Array.from(children).filter(function (elem) {
				return elem.model;
			}).filter(function (elem) {
				return !elem.classList.contains(HIDDEN_ELEMENT);
			});
		}
	}, {
		key: "addEmptyClass",
		value: function addEmptyClass() {
			this.element.classList[!this.getChilds().length ? 'add' : 'remove'](EMPTY_CLASS);
		}
	}, {
		key: "unbind",
		value: function unbind() {
			this.subscribeAction.unsubscribe();
		}
	}, {
		key: "template",
		value: function template() {
			return require("../template.html");
		}
	}, {
		key: "defaults",
		get: function get() {
			return {};
		}
	}]);

	return Container;
}(_component.Component);

},{"../template.html":9,"./utils.js":8,"component":18,"dispatcher":"dispatcher"}],8:[function(require,module,exports){
'use strict';

var _utils = require('utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

module.exports.observe = function (element, config, callback) {
	new MutationObserver(function (mutations) {
		callback(mutations);
	}).observe(element, config);
	callback([]);
};

},{"utils":"utils"}],9:[function(require,module,exports){
module.exports = '<content co-container></content>'
},{}],10:[function(require,module,exports){
(function (resolve){
'use strict';

var Image = require('./src/js/image').Image,
    createComponent = require("component").createComponent;

module.exports = createComponent({
	name: 'co-image',
	constructor: Image,
	localizationTemplate: resolve('i18n/{lang}.json')
});

}).call(this,function(relativePath){
			var settings = require('settings'),
				componentsDirecotry = settings.components,
				emptyString = '';

			  return componentsDirecotry.replace(new RegExp('/$'), emptyString) + '/co-popup/_assets/co-image/' + relativePath.replace(new RegExp('^/'), emptyString);
		})
},{"./src/js/image":11,"component":18,"settings":"settings"}],11:[function(require,module,exports){
(function (resolve){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Image = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _component = require('component');

var _settings = require('settings');

var _settings2 = _interopRequireDefault(_settings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Image = exports.Image = function (_Component) {
	_inherits(Image, _Component);

	function Image() {
		_classCallCheck(this, Image);

		return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
	}

	_createClass(Image, [{
		key: 'template',
		value: function template() {
			return require('../template.html');
		}
	}, {
		key: 'formatSrc',
		value: function formatSrc() {
			return (/\/common\//.test(this.src) ? _settings2.default.media + this.src : this.src
			);
		}
	}, {
		key: 'getBackgroundStyles',
		value: function getBackgroundStyles() {
			return 'background: url(\'' + this.formatSrc() + '\') ' + this.position + ' no-repeat; background-size: ' + this.size + ';';
		}
	}, {
		key: 'defaults',
		get: function get() {
			return {
				src: {
					value: resolve("../../media/images/default.png"),
					type: "File",
					fileTypes: ["image"]
				},
				position: {
					value: "center center",
					values: ["left top", "left center", "left bottom", "right top", "right center", "right bottom", "center top", "center center", "center bottom"],
					type: String
				},
				size: {
					value: "contain",
					values: ["contain", "cover", "100% 100%"],
					type: String
				}
			};
		}
	}]);

	return Image;
}(_component.Component);

exports.default = Image;

}).call(this,function(relativePath){
			var settings = require('settings'),
				componentsDirecotry = settings.components,
				emptyString = '';

			  return componentsDirecotry.replace(new RegExp('/$'), emptyString) + '/co-popup/_assets/co-image/src/js/' + relativePath.replace(new RegExp('^/'), emptyString);
		})
},{"../template.html":12,"component":18,"settings":"settings"}],12:[function(require,module,exports){
module.exports = '<div rv-style="getBackgroundStyles &lt; src position size" rv-show="src" co-image></div>'
},{}],13:[function(require,module,exports){
(function (resolve){
'use strict';

var Shower = require('./src/js/shower').Shower,
    createComponent = require("component").createComponent;

module.exports = createComponent({
	name: 'co-shower',
	constructor: Shower,
	localExtensions: {
		binders: {
			'animate-binder': require('animate-binder')
		}
	},
	localizationTemplate: resolve('i18n/{lang}.json')
});

}).call(this,function(relativePath){
			var settings = require('settings'),
				componentsDirecotry = settings.components,
				emptyString = '';

			  return componentsDirecotry.replace(new RegExp('/$'), emptyString) + '/co-popup/_assets/co-shower/' + relativePath.replace(new RegExp('^/'), emptyString);
		})
},{"./src/js/shower":15,"animate-binder":"animate-binder","component":18,"settings":"settings"}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventManager = exports.EventManager = function () {
	function EventManager(handler) {
		_classCallCheck(this, EventManager);

		this.handler = handler.bind(handler);
		this.events = [];
	}

	_createClass(EventManager, [{
		key: "updateListeners",
		value: function updateListeners(events) {
			this.removeUnusedListeners(events);
			this.addListeners(events);
		}
	}, {
		key: "addListeners",
		value: function addListeners(newEvents) {
			var _this = this;

			newEvents.forEach(function (newEvent) {
				if (_this.events.indexOf(newEvent) < 0) {
					document.addEventListener(newEvent, _this.handler);
					_this.events.push(newEvent);
				}
			});
		}
	}, {
		key: "removeUnusedListeners",
		value: function removeUnusedListeners(newEvents) {
			var _this2 = this;

			this.events = this.events.filter(function (event) {
				if (newEvents.indexOf(event) < 0) {
					document.removeEventListener(event, _this2.handler);
					return false;
				}
				return true;
			});
		}
	}]);

	return EventManager;
}();

},{}],15:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Shower = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _component = require('component');

var _utils = require('utils');

var utils = _interopRequireWildcard(_utils);

var _prefixer = require('prefixer');

var _nav = require('nav');

var _nav2 = _interopRequireDefault(_nav);

var _animateBinder = require('animate-binder');

var _animateBinder2 = _interopRequireDefault(_animateBinder);

var _eventManager = require('./event-manager');

var _dispatcher = require('dispatcher');

var _dispatcher2 = _interopRequireDefault(_dispatcher);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Shower = exports.Shower = function (_Component) {
	_inherits(Shower, _Component);

	function Shower() {
		_classCallCheck(this, Shower);

		var _this = _possibleConstructorReturn(this, (Shower.__proto__ || Object.getPrototypeOf(Shower)).apply(this, arguments));

		_this.saveEvent = null;

		_this.animationModel = {};

		_this.show = function (event) {
			return _this.showHandler(event);
		};
		_this.hide = function (event) {
			return _this.hideHandler(event);
		};

		_this.allowHide = utils.debounce(function () {
			_this.forbidHide = false;
		}, 25);

		_this.showManager = new _eventManager.EventManager(_this.show);
		_this.hideManager = new _eventManager.EventManager(_this.hide);

		_this.element.addEventListener(_prefixer.events.animationstart, _this);
		_this.element.addEventListener(_prefixer.events.animationend, _this);

		_nav2.default.onenter(function () {
			_this.isOnleave = false;
		});
		_nav2.default.onleave(function () {
			_this.isOnleave = true;
			_this.isAnimate = false;
		});

		_this.element.addEventListener('tap', _this);

		_this.updateShowGlobalEvents();
		_this.updateHideGlobalEvents();

		_this.element.addEventListener('show', function (event) {
			return event.stopPropagation();
		});
		_this.element.addEventListener('hide', function (event) {
			return event.stopPropagation();
		});

		_this.setOutsideClose();

		_this[_this.showOnSlideEnter ? 'showElement' : 'hideElement']();

		if (!_this.blockDispatcher) {
			_this.subscribeDispatcher();
		}

		document.addEventListener('resetModel', function () {
			_this.visible = _this.showOnSlideEnter;
		});

		return _this;
	}

	_createClass(Shower, [{
		key: 'ready',
		value: function ready(localView) {
			var fixedValue = this.element.getAttribute('fixed') ? this.element.getAttribute('fixed') + ',animation' : 'animation';
			this.element.setAttribute('fixed', fixedValue);
			localView.addBinding(this.element, 'animate', 'animationModel');
			this.animationModel.blockDispatcher = this.showAnimation.blockDispatcher || this.hideAnimation.blockDispatcher;
		}
	}, {
		key: 'subscribeDispatcher',
		value: function subscribeDispatcher() {
			var _this2 = this;

			_dispatcher2.default.subscribeAction(function (action) {
				switch (action.type) {
					case _dispatcher2.default.ActionType.EDIT_PRESENTATION:
						_this2.visible = _this2.showOnSlideEnter;
						_this2.saveStateVisible = _this2.visible;
						break;
					case _dispatcher2.default.ActionType.VIEW_PRESENTATION:
						_this2.deactivate();
						setTimeout(function (_) {
							_this2.visible = _this2.showOnSlideEnter;
						}, 100);
						break;
					default:
						break;
				}
			});
		}
	}, {
		key: 'activate',
		value: function activate() {
			this.saveStateVisible = this.visible;
			this.visible = true;
			this.showElement();
		}
	}, {
		key: 'deactivate',
		value: function deactivate() {
			this.visible = this.saveStateVisible;
			if (!this.visible) {
				this.hideElement();
			}
		}
	}, {
		key: 'showHandler',
		value: function showHandler(event) {
			if (this.saveEvent !== event && !this.visible) {
				this.visible = true;
				this.saveEvent = event;
			}
		}
	}, {
		key: 'hideHandler',
		value: function hideHandler(event) {
			if (this.saveEvent !== event && this.visible && !this.forbidHide) {
				this.visible = false;
				if (this.lockSwipeWhenOpened) {
					_nav2.default.unlock();
				}
				this.saveEvent = event;
			}
		}
	}, {
		key: 'template',
		value: function template() {
			return require('../template.html');
		}
	}, {
		key: 'handleEvent',
		value: function handleEvent(event) {
			switch (event.type) {
				case 'tap':
					event.stopPropagation();
					break;
				case 'animationstart':
				case 'webkitAnimationStart':
					if (event.target === this.element) {
						this.isAnimate = true;
						this.showElement();
					}
					break;
				case 'animationend':
				case 'webkitAnimationEnd':
					if (event.target === this.element) {
						this.isAnimate = false;
						this.hideElement();
					}
					break;
			}
		}
	}, {
		key: 'refresh',
		value: function refresh(key) {
			switch (key) {
				case 'visible':
					if (this.element.binders.animate.isEditMode || this.isOnleave) {
						if (this[key]) {
							this.showElement();
						} else {
							this.hideElement();
						}
					}
					this.animateContainer();
					break;
				case 'hideOnOutsideTap':
					this.setOutsideClose();
					break;
				case 'showOn':
					this.updateShowGlobalEvents();
					break;
				case 'hideOn':
					this.updateHideGlobalEvents();
					break;
			}
		}
	}, {
		key: 'animateContainer',
		value: function animateContainer() {
			if (this.visible) {
				this.showContainer();
			} else {
				this.hideContainer();
			}
		}
	}, {
		key: 'isWithoutAnimation',
		value: function isWithoutAnimation(model) {
			return !model.name || model.disabled;
		}
	}, {
		key: 'showContainer',
		value: function showContainer() {
			this.forbidHide = true;
			this.allowHide();
			if (this.isWithoutAnimation(this.showAnimation)) {
				this.showElement();
				this.disableAnimation();
			}
			this.animateElement(this.showAnimation);
			utils.dispathEvent(this.element, "show", { cancelable: true });
		}
	}, {
		key: 'hideContainer',
		value: function hideContainer() {
			if (this.isWithoutAnimation(this.hideAnimation)) {
				this.hideElement();
				this.disableAnimation();
			}
			this.animateElement(this.hideAnimation);
			utils.dispathEvent(this.element, "hide", { cancelable: true });
		}
	}, {
		key: 'disableAnimation',
		value: function disableAnimation() {
			this.animationModel.name = '';
			this.animationModel.disabled = true;
		}
	}, {
		key: 'animateElement',
		value: function animateElement(animation) {
			this.animationModel.delay = animation.delay; // from utils.mixin a keys did not ordered
			this.animationModel.duration = animation.duration;
			this.animationModel.disabled = animation.disabled;
			utils.mixin(this.animationModel, animation);
		}
	}, {
		key: 'showElement',
		value: function showElement() {
			if (this.visible) {
				this.element.classList.add('visible');
			}
		}
	}, {
		key: 'hideElement',
		value: function hideElement() {
			if (!this.visible) {
				this.element.classList.remove('visible');
			}
		}
	}, {
		key: 'updateShowGlobalEvents',
		value: function updateShowGlobalEvents() {
			this.showManager.updateListeners(this.getEvents("showOn"));
		}
	}, {
		key: 'updateHideGlobalEvents',
		value: function updateHideGlobalEvents() {
			this.hideManager.updateListeners(this.getEvents("hideOn"));
		}
	}, {
		key: 'getEvents',
		value: function getEvents(type) {
			return this[type] ? this[type].split(' ') : [];
		}
	}, {
		key: 'setOutsideClose',
		value: function setOutsideClose() {
			document[this.hideOnOutsideTap ? 'addEventListener' : 'removeEventListener']('tap', this.hide);
		}
	}, {
		key: 'defaults',
		get: function get() {
			return {
				"visible": {
					value: false,
					type: Boolean,
					refresh: true
				},
				showOnSlideEnter: {
					value: false,
					type: Boolean,
					optional: true
				},
				"show-on": {
					value: 'show',
					type: String,
					refresh: true,
					optional: true
				},
				"hide-on": {
					value: 'hide',
					type: String,
					refresh: true,
					optional: true
				},
				"show-animation": {
					value: {
						name: "fadeIn",
						duration: 0.5,
						delay: 0,
						disabled: false,
						infinite: false,
						on: "",
						initVisibility: false,
						blockDispatcher: false
					},
					scheme: _animateBinder2.default.prototype.defaults,
					base: _animateBinder2.default,
					type: Object
				},
				"hide-animation": {
					value: {
						name: "fadeOut",
						duration: 0.5,
						delay: 0,
						disabled: false,
						infinite: false,
						on: "",
						initVisibility: true,
						blockDispatcher: false
					},
					scheme: _animateBinder2.default.prototype.defaults,
					base: _animateBinder2.default,
					type: Object
				},
				"hide-on-outside-tap": {
					value: false,
					type: Boolean,
					refresh: true,
					optional: true
				},
				'lock-swipe-when-opened': {
					value: false,
					type: Boolean
				}
			};
		}
	}]);

	return Shower;
}(_component.Component);

},{"../template.html":16,"./event-manager":14,"animate-binder":"animate-binder","component":18,"dispatcher":"dispatcher","nav":"nav","prefixer":"prefixer","utils":"utils"}],16:[function(require,module,exports){
module.exports = '<content co-shower></content>'
},{}],17:[function(require,module,exports){
module.exports={
	"localizationPath": "components/{name}/i18n/{lang}.json"
}
},{}],18:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var rivets = require('rivets');
var utils = require('utils');
var ComponentConstructor = require('./src/js/ComponentConstructor.js').ComponentConstructor;
var buildModel = require('./src/js/buildModel.js');
var buildObservations = require('./src/js/buildObservations.js');
var config = require('./config.json');

function registerComponent(name, Constructor, localExtensions) {
  rivets.components[name] = createComponent(name, Constructor, localExtensions);
}

function createComponent(options, Constructor, localExtensions) {
  var name;

  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
    name = options.name;
    Constructor = options.constructor;
    localExtensions = options.localExtensions;
  } else {
    name = options;
  }

  Constructor.prototype.localizationTemplate = options.localizationTemplate || config.localizationPath;

  var descriptor = {
    name: name,
    block: Constructor.block,
    static: getStaticProperties(Constructor.prototype.defaults),
    template: Constructor.prototype.template,
    constructor: Constructor,
    initialize: function initialize(element, data) {
      var defaultProperties = utils.toCamelCaseObject(Constructor.prototype.defaults);
      var model = buildModel(defaultProperties, data, name);
      var componentInstance = new Constructor(element, model, this.view, this);

      Constructor.prototype.name = name;

      buildObservations.call(this, componentInstance, defaultProperties, data.model || {});

      return componentInstance;
    },
    unbind: function unbind() {
      // TODO: make unobserve..
    }
  };

  if (localExtensions) {
    rivets._.extensions.forEach(function (extensionName) {
      var extension = localExtensions[extensionName];

      if (extension) {
        descriptor[extensionName] = extension;
      }
    });
  }

  return descriptor;
}

function getStaticProperties(properties) {
  return Object.keys(properties).filter(function (property) {
    return isStaticProperty(properties, property);
  }).map(function (property) {
    return utils.toCamelCase(property);
  });
}

function isStaticProperty(properties, property) {
  return properties[property] && properties[property].static;
}

module.exports = registerComponent;
module.exports.createComponent = createComponent;
module.exports.Component = ComponentConstructor;

},{"./config.json":17,"./src/js/ComponentConstructor.js":19,"./src/js/buildModel.js":22,"./src/js/buildObservations.js":23,"rivets":"rivets","utils":"utils"}],19:[function(require,module,exports){
'use strict';

var _Promise = typeof Promise === 'undefined' ? require('es6-promise').Promise : Promise;

var utils = require('utils');
var builKeypath = require('./buildKeypath.js');
var getLocalizationByConstructor = require('./buildLocalization.js');
var generalModel = require('general-model');
var dispatcher = require('dispatcher');

function ComponentConstructor(element, model, view, binding) {
  this.element = element;
  this.parentScope = view.models;
  utils.mixin(this, model);
  this.element.model = this;
  this.element.view = {
    subscribe: subscribeToView.bind(this)
  };
  this.element.setAttribute('co-component', '');
  this.model = model;
  this.view = view;
  this.binding = binding;
  this.element.addEventListener('activate', handleActivation.bind(this));
  this.element.addEventListener('deactivate', handleDeactivation.bind(this));

  this.setIsConfigurable();
}

ComponentConstructor.prototype.isCommon = function () {
  return isCommonModel(this) || isCommonBinders(this);
};

ComponentConstructor.prototype.getTextElementsByProperty = function (property) {
  return utils.toArray(this.element.querySelectorAll('[rv-html]')).filter(function (element) {
    return element.getAttribute('rv-html') === property;
  }).filter(function (element) {
    return element.scope === this;
  }, this);
};

ComponentConstructor.prototype.getLocalization = function (lang) {
  return getLocalizationByConstructor(this.__proto__.constructor, lang);
};

ComponentConstructor.prototype.getAbsoluteKeypath = function () {
  return builKeypath(this.parentScope, this.getKeypath());
};

ComponentConstructor.prototype.getKeypath = function () {
  return this.element.getAttribute('model') || '';
};

ComponentConstructor.prototype.toJSON = function () {
  var that = this;
  return Object.keys(this).reduce(function (acc, property) {
    if (that.model.hasOwnProperty(property)) {
      acc[property] = that[property];
    }
    return acc;
  }, {});
};

ComponentConstructor.prototype.setIsConfigurable = function () {
  var keypath = this.getKeypath();
  Object.defineProperty(this, 'isConfigurable', {
    value: utils.startsWith(keypath, 'm.'),
    enumerable: true,
    configurable: false,
    writable: true
  });
};

ComponentConstructor.prototype.getLabel = function (lang) {
  return new _Promise(function (resolve, reject) {
    var label = getLabelFromElement(this.element);

    if (label) {
      resolve(label);
    } else {
      getLocalizationByConstructor(this.__proto__.constructor, lang).then(function (localization) {
        resolve(localization.name);
      }).catch(function (err) {
        resolve(getNameFromTagNameComponent(this.name || this.element.tagName.toLowerCase()));
      }.bind(this));
    }
  }.bind(this));
};

ComponentConstructor.prototype.setLabel = function (label) {
  this.element.setAttribute('user-label', label);
};

ComponentConstructor.prototype.subscribe = function (callback) {
  return new generalModel.ModelNotifier().observe(this.model).subscribe(function (model) {
    callback(model);
  }, true);
};

function getNameFromTagNameComponent(coTagName) {
  var normalName = coTagName.replace('co-', '').split('-').join(' ');

  return normalName[0].toUpperCase() + normalName.substring(1, normalName.lenght);
}

function handleActivation(event) {
  if (typeof this.activate === 'function' && isCobaltEvent(event)) {
    var prevModelState = utils.parse(this);
    this.activate(event.target);
    this.difference = utils.difference(prevModelState, utils.parse(this));
  }
}

function handleDeactivation(event) {
  if (typeof this.deactivate === 'function' && isCobaltEvent(event)) {
    this.deactivate(event.target);
  }

  utils.deepMixin(this, this.difference);
}

function isCobaltEvent(event) {
  return event.detail && !!event.detail.isCobaltEvent;
}

function isCommonModel(scope) {
  return getParentKeypathes(scope).some(function (keypath) {
    return isCommonKeypath(keypath);
  });
}

function isCommonBinders(scope) {
  var binders = scope.element && scope.element.binders;
  return binders && Object.keys(binders).some(function (binder) {
    return isCommonKeypath(binders[binder].keypath);
  });
}

function isCommonKeypath(keypath) {
  return utils.startsWith(keypath, 'm.common');
}

function getParentKeypathes(scope, keypathes) {
  keypathes = keypathes || [];
  if (scope && typeof scope.getKeypath === 'function') {
    keypathes.push(scope.getKeypath());
    getParentKeypathes(scope.parentScope, keypathes);
  }

  return keypathes;
}

function getLabelFromElement(element) {
  return element.getAttribute('user-label');
}

function subscribeToView(callback) {
  var _this = this;

  dispatcher.subscribeEvent(function (event) {
    if (event.type === dispatcher.EventType.DOM_REFRESHED && event.element === _this.element) {
      callback(_this.element);
    }
  });
}

exports.ComponentConstructor = ComponentConstructor;

},{"./buildKeypath.js":20,"./buildLocalization.js":21,"dispatcher":"dispatcher","es6-promise":"es6-promise","general-model":"general-model","utils":"utils"}],20:[function(require,module,exports){
'use strict';

function buildAbsoluteKeypath(parentPath, keypath) {
	var key = removeAlias(keypath);

	if (parentPath) {
		return key ? parentPath + '.' + removeAlias(keypath) : parentPath;
	} else {
		return keypath;
	}
}

function collectParentsKeypath(model, keypathes) {
	keypathes = keypathes || [];
	if (model && model.keypath) {
		keypathes.unshift(keypathModifier(model), model.index);
		collectParentsKeypath(model.__proto__, keypathes);
	}

	return keypathes;
}

function keypathModifier(model) {
	if (model.__proto__.keypath) {
		return removeAlias(model.keypath);
	}

	return model.keypath;
}

function removeAlias(keypath) {
	return keypath.split('.').slice(1).join('.');
}

module.exports = function (parentScope, keypath) {
	return buildAbsoluteKeypath(collectParentsKeypath(parentScope).join('.'), keypath);
};

},{}],21:[function(require,module,exports){
'use strict';

var _loader = require('loader');

var _utils = require('utils');

var _cache = require('cache');

var _cache2 = _interopRequireDefault(_cache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Promise = typeof Promise === 'undefined' ? require('es6-promise').Promise : Promise;

var cache = new _cache2.default();

module.exports = getLocalizationByConstructor;

function getLocalizationByConstructor(constructor, outsideLang) {
  var defaultLang = 'en';
  var lang = outsideLang || defaultLang;
  // TODO: works only if localizationTemplate and name were added to the prototype during component registration

  return getLocalization(constructor, lang, defaultLang).then(function (localization) {
    return extendLocalizationByScheme(localization.defaults, constructor.prototype.defaults, lang).then(function () {
      return localization;
    });
  });
}

function getLocalization(constructor, lang, defaultLang) {
  var localizationPath = getLocalizationPath(constructor, lang);

  return loadLocalizationData(localizationPath).then(function (localization) {
    if (isLocalization(localization)) {
      return localization;
    } else if (lang !== defaultLang) {
      var defaultLocalizationPath = getLocalizationPath(constructor, defaultLang);
      return loadLocalizationData(defaultLocalizationPath);
    }
    return _Promise.resolve({});
  });
}

function getLocalizationPath(constructor, lang) {
  return (0, _utils.template)(constructor.prototype.localizationTemplate, { name: constructor.prototype.name, lang: lang });
}

function loadLocalizationData(path) {
  var loadFromCache = true;
  var reviver = null;

  if (!cache.isCache(path)) {
    cache.set(path, (0, _loader.loadJSON)(path, reviver, loadFromCache));
  }

  return cache.get(path).then(function (data) {
    return Object.assign({}, data);
  });
}

function isLocalization(localization) {
  return localization && Object.keys(localization).length;
}

// if property described in scheme has 'base' defined, it's localization is extended with localization from 'base'
function extendLocalizationByScheme(localization, scheme, lang) {
  var localizationPromises = [];

  var _loop = function _loop(prop) {
    var propertyDescriptor = scheme[prop],
        localizationLoadingPromise = void 0;

    if (propertyDescriptor.sealed) {
      return 'continue';
    }

    if (propertyDescriptor.base) {
      localizationLoadingPromise = getLocalizationByConstructor(propertyDescriptor.base, lang).then(function (subLocalization) {
        return localization[prop].defaults = subLocalization.defaults;
      });
    } else if (propertyDescriptor.scheme) {
      localizationLoadingPromise = extendLocalizationByScheme(localization[prop].defaults, propertyDescriptor.scheme, lang);
    } else {
      return 'continue';
    }
    localizationPromises.push(localizationLoadingPromise);
  };

  for (var prop in scheme) {
    var _ret = _loop(prop);

    if (_ret === 'continue') continue;
  }

  return _Promise.all(localizationPromises);
}

},{"cache":2,"es6-promise":"es6-promise","loader":"loader","utils":"utils"}],22:[function(require,module,exports){
"use strict";

var utils = require("utils");

function buildModel(defaultProperties, data, name) {
	var defaultModel = getDefaultModel(defaultProperties),
	    elementModel = utils.toCamelCaseObject(data.model || {}),
	    attributesData = getDataFromAttributes(defaultProperties, data),
	    model = mixin(mixin(defaultModel, elementModel, defaultProperties), attributesData, defaultProperties);

	return model;
}

function mixin(target, source, defaultProperties) {
	Object.keys(source).forEach(function (property) {
		if (source.hasOwnProperty(property) && defined(source[property]) && defaultProperties.hasOwnProperty(property)) {
			if (target[property] && target[property].constructor === Object) {
				addMissingProperies(defaultProperties[property].value, source[property]); // add missing properties and keep reference for correct observing
			}
			target[property] = source[property];
		}
	});

	return target;
}

function addMissingProperies(defaultProperties, source) {
	return Object.keys(defaultProperties).forEach(function (property) {
		if (!source.hasOwnProperty(property)) {
			source[property] = defaultProperties[property];
		}
	});
}

function getDefaultModel(defaultProperties) {
	return Object.keys(defaultProperties).reduce(function (acc, property) {
		acc[property] = defaultProperties[property].value;
		return acc;
	}, {});
}

function getDataFromAttributes(defaultProperties, data) {
	return Object.keys(defaultProperties).reduce(function (acc, property) {
		if (data.hasOwnProperty(property)) {
			if (defaultProperties[property] && defaultProperties[property].static) {
				acc[property] = utils.revive(data[property]);
			} else {
				acc[property] = data[property];
			}
		}
		return acc;
	}, {});
}

function defined(value) {
	return value !== undefined && value !== null;
}

module.exports = buildModel;

},{"utils":"utils"}],23:[function(require,module,exports){
'use strict';

var generalModel = require('general-model');
var complexProperties = [Object, Array, DataView, 'Object', 'Array', 'DataView'];

module.exports = function buildObservations(componentInstance, defaultProperties, model) {
  Object.keys(defaultProperties).forEach(function (property) {
    model[property] = componentInstance[property];

    if (isRefreshableProperty(defaultProperties, property) && isComplexProperty(defaultProperties, property)) {
      observeComplexProperty(property, componentInstance);
    }

    this.observe(componentInstance, property, function () {
      if (isRefreshableProperty(defaultProperties, property)) {
        componentInstance.refresh(property);
      }
      componentInstance.model[property] = componentInstance[property];
      model[property] = componentInstance[property];
    });

    this.observe(componentInstance.model, property, function () {
      componentInstance[property] = componentInstance.model[property];
    });

    this.observe(model, property, function () {
      componentInstance[property] = model[property];
    });
  }, this);
};

function observeComplexProperty(property, componentInstance) {
  // setTimeout because nested bindings...
  setTimeout(function () {
    new generalModel.ModelNotifier().deepObserve(componentInstance, property).subscribe(function (model) {
      componentInstance.refresh(property);
    }, true);
  }, 50);
}

function isComplexProperty(defaultProperties, property) {
  var isComplexProp = complexProperties.indexOf(defaultProperties[property].type) !== -1;
  return !isComplexProp ? Array.isArray(defaultProperties[property].type) : isComplexProp;
}

function isRefreshableProperty(defaultProperties, property) {
  return !!defaultProperties[property].refresh;
}

},{"general-model":"general-model"}],24:[function(require,module,exports){
(function (resolve){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Popup = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _utils = require('utils');

var _nav = require('nav');

var _nav2 = _interopRequireDefault(_nav);

var _coImage = require('co-image');

var _coImage2 = _interopRequireDefault(_coImage);

var _coShower = require('co-shower');

var _coShower2 = _interopRequireDefault(_coShower);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Popup = exports.Popup = function (_coShower$constructor) {
	_inherits(Popup, _coShower$constructor);

	function Popup() {
		_classCallCheck(this, Popup);

		var _this = _possibleConstructorReturn(this, (Popup.__proto__ || Object.getPrototypeOf(Popup)).apply(this, arguments));

		_this.element.setAttribute('container', 'container');
		_this.subscribeToEvents();
		_this.setId();
		_this.openPopupHandler = function (event) {
			return _this.openPopup(event);
		};
		_this.closePopupHandler = function (event) {
			return _this.closePopup(event);
		};
		return _this;
	}

	_createClass(Popup, [{
		key: 'hideHandler',
		value: function hideHandler(event) {
			if (event.popupId !== this.id) {
				_get(Popup.prototype.__proto__ || Object.getPrototypeOf(Popup.prototype), 'hideHandler', this).call(this, event);
			}
		}
	}, {
		key: 'sortObjectByArray',
		value: function sortObjectByArray(obj, orderArr) {
			return orderArr.reduce(function (result, key) {
				result[key] = obj[key];
				return result;
			}, {});
		}
	}, {
		key: 'template',
		value: function template() {
			return require('../template.html');
		}
	}, {
		key: 'refresh',
		value: function refresh(key) {
			if (key === 'id') {
				this.setId();
			}

			_get(Popup.prototype.__proto__ || Object.getPrototypeOf(Popup.prototype), 'refresh', this).call(this, key);
		}
	}, {
		key: 'subscribeToEvents',
		value: function subscribeToEvents() {
			var _this2 = this;

			this.element.addEventListener('open', function (event) {
				return _this2.openPopupHandler(event);
			});

			this.element.addEventListener('show', function () {
				_this2.dispatchEvent(_this2.element, 'popupenter', {
					id: _this2.id
				});
			});

			this.element.addEventListener('hide', function () {
				_this2.dispatchEvent(_this2.element, 'popupleave', {
					id: _this2.id
				});
			});

			if (this.closeOnWillgoto) {
				_nav2.default.onleave(this.deactivate.bind(this));
				_nav2.default.onwillgoto(this.deactivate.bind(this));
			}

			_nav2.default.onenter(function () {
				if (_this2.showOnSlideEnter) {
					_this2.showPopup();
				} else {
					_this2.hidePopup();
				}
			});
		}
	}, {
		key: 'openPopup',
		value: function openPopup(event) {
			if (this.lockSwipeWhenOpened) {
				_nav2.default.lock();
			}
			if (!this.isAnimate) {
				this.showPopup();
				this.stopPropagation(event);
			}
		}
	}, {
		key: 'closePopup',
		value: function closePopup(event) {
			if (this.lockSwipeWhenOpened) {
				_nav2.default.unlock();
			}
			if (!this.isAnimate) {
				this.hidePopup();
				this.stopPropagation(event);
			}
		}
	}, {
		key: 'showPopup',
		value: function showPopup() {
			this.setPopupVisible();
			this.trackWasOpened();
		}
	}, {
		key: 'setPopupVisible',
		value: function setPopupVisible() {
			this.visible = true;
		}
	}, {
		key: 'trackWasOpened',
		value: function trackWasOpened() {
			this.wasOpened = true;
		}
	}, {
		key: 'hidePopup',
		value: function hidePopup() {
			this.visible = false;
		}
	}, {
		key: 'activate',
		value: function activate() {
			var _this3 = this;

			if (this.timeout) {
				clearTimeout(this.timeout);
			}
			setTimeout(function () {
				_this3.setPopupVisible();
				_this3.showElement();
			}, 0);
		}
	}, {
		key: 'deactivate',
		value: function deactivate() {
			var _this4 = this;

			this.timeout = setTimeout(function () {
				_this4.hidePopup();
				_this4.hideElement();
			}, 100);
		}
	}, {
		key: 'setId',
		value: function setId() {
			if (!this.id) {
				this.id = this.element.id;
			}

			if (this.id) {
				this.element.dataset.eid = this.id;
			} else if (this.element.dataset.eid) {
				delete this.element.dataset.eid;
			}
		}
	}, {
		key: 'stopPropagation',
		value: function stopPropagation(event) {
			if (event) {
				event.stopPropagation();
			}
		}
	}, {
		key: 'dispatchEvent',
		value: function dispatchEvent(target, eventType, options) {
			(0, _utils.dispatchEvent)(target, eventType, {
				detail: options || {}
			});
		}
	}, {
		key: 'defaults',
		get: function get() {
			var copy = _get(Popup.prototype.__proto__ || Object.getPrototypeOf(Popup.prototype), 'defaults', this);

			copy['showOnSlideEnter'].optional = false;
			copy['hide-on-outside-tap'].optional = false;
			copy['hide-on-outside-tap'].optional = false;
			copy['show-on'].sealed = true;
			copy['hide-on'].sealed = true;
			copy.visible.sealed = true;

			var order = ['id', 'title', 'show-close-button', 'showOnSlideEnter', 'lock-swipe-when-opened', 'hide-on-outside-tap', 'close-button-image', 'was-opened', 'close-on-willgoto', 'visible', 'show-on', 'hide-on', 'show-animation', 'hide-animation', 'screenshotStates'];

			return this.sortObjectByArray((0, _utils.mixin)({
				id: {
					value: '',
					type: String,
					refresh: true,
					sealed: true
				},
				title: {
					value: 'Popup label',
					type: String
				},
				'show-close-button': {
					type: Boolean,
					value: true
				},
				'close-button-image': {
					value: {
						src: resolve('../../media/images/close-black.png')
					},
					scheme: _coImage2.default.constructor.prototype.defaults,
					base: _coImage2.default.constructor,
					type: Object
				},
				'was-opened': {
					value: false,
					sealed: true,
					type: Boolean
				},
				'close-on-willgoto': {
					type: Boolean,
					optional: true,
					value: true
				},
				screenshotStates: {
					type: String,
					value: 'on',
					values: ['on', 'once', 'off']
				}

			}, copy), order);
		}
	}]);

	return Popup;
}(_coShower2.default.constructor);

exports.Popup = Popup;

}).call(this,function(relativePath){
			var settings = require('settings'),
				componentsDirecotry = settings.components,
				emptyString = '';

			  return componentsDirecotry.replace(new RegExp('/$'), emptyString) + '/co-popup/src/js/' + relativePath.replace(new RegExp('^/'), emptyString);
		})
},{"../template.html":25,"co-image":10,"co-shower":13,"nav":"nav","settings":"settings","utils":"utils"}],25:[function(require,module,exports){
module.exports = '<content co-popup></content><co-button sealed class="close-button" rv-class-image="closeButtonImage.src" rv-show="showCloseButton" rv-on-tap="closePopupHandler" fixed="animation" co-popup><co-container user-label="Popup close button" co-popup><co-image model="closeButtonImage" sealed co-popup></co-image></co-container></co-button>'
},{}]},{},[1]);
