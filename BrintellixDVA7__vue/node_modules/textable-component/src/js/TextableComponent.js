import {Component} from 'component';
import translate from 'translate';
import utils from 'utils';
import sightglass from 'sightglass';
import rivets from 'rivets';

const textProperties = [Text, 'Text'];

export class TextableComponent extends Component {
	constructor(){
		super(...arguments);
		this.t = translate.getCurrentLocalization();

		translate.onLanguageChange(localization => {
			utils.mixin(this.t, localization);
		});

		setTextObservation(this, this.defaults, co.scope.t);
	}
}

function setTextObservation(component, defaultProperties, model) {
	const defaults = utils.toCamelCaseObject(defaultProperties);

	const isTextRefresh = property => isRefreshableProperty(defaults, property) && isTextProperty(defaults, property);

	Object.keys(defaults)
		.filter(isTextRefresh)
		.forEach(property => {
			const value = component[property];
			if(typeof value === "string"){
				const key = utils.startsWith(value, 't.') && value.split(/t.(.+)?/)[1];

				if (key) {
					configureSightglass();
					sightglass(model, key, () => {
						component.refresh(property);
					});
				}
			}
		});
}

function isRefreshableProperty(defaultProperties, property) {
	return !!defaultProperties[property].refresh;
}

function isTextProperty(defaultProperties, property) {
	const type = defaultProperties[property].type;
	return textProperties.indexOf(type) !== -1;
}

function configureSightglass(){
	sightglass.adapters = rivets.adapters;
	sightglass.root = rivets.rootInterface;
}