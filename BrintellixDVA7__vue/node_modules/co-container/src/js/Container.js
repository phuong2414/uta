import {Component} from "component";
import dispatcher from "dispatcher";
import * as localUtils from './utils.js';

const HIDDEN_ELEMENT = 'hidden-element';
const HIGHLIGHTED_CLASS = 'highlighted';
const EMPTY_CLASS = 'empty';


export class Container extends Component {
	constructor() {
		super(...arguments);
		if(this.element.getAttribute('container') === 'false') {
			this.element.removeAttribute('container')
		} else {
			this.element.setAttribute('container', 'true');
		}

		this.subscribeAction = dispatcher.subscribeAction((action) =>{
			console.log(action.type);
			if(action.type === dispatcher.ActionType.EDIT_PRESENTATION){
				//element.classList.add(HIGHLIGHTED_CLASS)
				this.element.classList.add(HIGHLIGHTED_CLASS)
			}
			else if(action.type === dispatcher.ActionType.VIEW_PRESENTATION){
				//element.classList.remove(HIGHLIGHTED_CLASS)
				this.element.classList.remove(HIGHLIGHTED_CLASS)
			}
		});

		this.addEmptyClass();
		localUtils.observe(this.element, {childList: true, subtree: true}, this.addEmptyClass.bind(this))
	}

	getChilds(){
		const children = this.element.children;

		return Array.from(children)
			.filter(elem => elem.model)
			.filter(elem => !elem.classList.contains(HIDDEN_ELEMENT))
	}

	addEmptyClass(){
		this.element.classList[!this.getChilds().length ? 'add' : 'remove'](EMPTY_CLASS);
	}

	unbind(){
		this.subscribeAction.unsubscribe();
	}



	get defaults() {
		return {}
	}
	template() {
		return require("../template.html");
	}
}
