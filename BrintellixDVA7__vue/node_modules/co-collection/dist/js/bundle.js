(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (resolve){
'use strict';

var Collection = require('./src/js/collection.js').Collection,
    createComponent = require("component").createComponent;

module.exports = createComponent({
	name: 'co-collection',
	constructor: Collection,
	localizationTemplate: resolve('i18n/{lang}.json')
});require("rivets").components[module.exports.name] = module.exports;

}).call(this,function(relativePath){
			var settings = require('settings'),
				componentsDirecotry = settings.components,
				emptyString = '';

			  return componentsDirecotry.replace(new RegExp('/$'), emptyString) + '/co-collection/' + relativePath.replace(new RegExp('^/'), emptyString);
		})
},{"./src/js/collection.js":9,"component":3,"rivets":"rivets","settings":"settings"}],2:[function(require,module,exports){
module.exports={
	"localizationPath": "components/{name}/i18n/{lang}.json"
}
},{}],3:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var rivets = require('rivets');
var utils = require('utils');
var ComponentConstructor = require('./src/js/ComponentConstructor.js').ComponentConstructor;
var buildModel = require('./src/js/buildModel.js');
var buildObservations = require('./src/js/buildObservations.js');
var config = require('./config.json');

function registerComponent(name, Constructor, localExtensions) {
  rivets.components[name] = createComponent(name, Constructor, localExtensions);
}

function createComponent(options, Constructor, localExtensions) {
  var name;

  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
    name = options.name;
    Constructor = options.constructor;
    localExtensions = options.localExtensions;
  } else {
    name = options;
  }

  Constructor.prototype.localizationTemplate = options.localizationTemplate || config.localizationPath;

  var descriptor = {
    name: name,
    block: Constructor.block,
    static: getStaticProperties(Constructor.prototype.defaults),
    template: Constructor.prototype.template,
    constructor: Constructor,
    initialize: function initialize(element, data) {
      var defaultProperties = utils.toCamelCaseObject(Constructor.prototype.defaults);
      var model = buildModel(defaultProperties, data, name);
      var componentInstance = new Constructor(element, model, this.view, this);

      Constructor.prototype.name = name;

      buildObservations.call(this, componentInstance, defaultProperties, data.model || {});

      return componentInstance;
    },
    unbind: function unbind() {
      // TODO: make unobserve..
    }
  };

  if (localExtensions) {
    rivets._.extensions.forEach(function (extensionName) {
      var extension = localExtensions[extensionName];

      if (extension) {
        descriptor[extensionName] = extension;
      }
    });
  }

  return descriptor;
}

function getStaticProperties(properties) {
  return Object.keys(properties).filter(function (property) {
    return isStaticProperty(properties, property);
  }).map(function (property) {
    return utils.toCamelCase(property);
  });
}

function isStaticProperty(properties, property) {
  return properties[property] && properties[property].static;
}

module.exports = registerComponent;
module.exports.createComponent = createComponent;
module.exports.Component = ComponentConstructor;

},{"./config.json":2,"./src/js/ComponentConstructor.js":4,"./src/js/buildModel.js":7,"./src/js/buildObservations.js":8,"rivets":"rivets","utils":"utils"}],4:[function(require,module,exports){
'use strict';

var _Promise = typeof Promise === 'undefined' ? require('es6-promise').Promise : Promise;

var utils = require('utils');
var builKeypath = require('./buildKeypath.js');
var getLocalizationByConstructor = require('./buildLocalization.js');
var generalModel = require('general-model');
var dispatcher = require('dispatcher');

function ComponentConstructor(element, model, view, binding) {
  this.element = element;
  this.parentScope = view.models;
  utils.mixin(this, model);
  this.element.model = this;
  this.element.view = {
    subscribe: subscribeToView.bind(this)
  };
  this.element.setAttribute('co-component', '');
  this.model = model;
  this.view = view;
  this.binding = binding;
  this.element.addEventListener('activate', handleActivation.bind(this));
  this.element.addEventListener('deactivate', handleDeactivation.bind(this));

  this.setIsConfigurable();
}

ComponentConstructor.prototype.isCommon = function () {
  return isCommonModel(this) || isCommonBinders(this);
};

ComponentConstructor.prototype.getTextElementsByProperty = function (property) {
  return utils.toArray(this.element.querySelectorAll('[rv-html]')).filter(function (element) {
    return element.getAttribute('rv-html') === property;
  }).filter(function (element) {
    return element.scope === this;
  }, this);
};

ComponentConstructor.prototype.getLocalization = function (lang) {
  return getLocalizationByConstructor(this.__proto__.constructor, lang);
};

ComponentConstructor.prototype.getAbsoluteKeypath = function () {
  return builKeypath(this.parentScope, this.getKeypath());
};

ComponentConstructor.prototype.getKeypath = function () {
  return this.element.getAttribute('model') || '';
};

ComponentConstructor.prototype.toJSON = function () {
  var that = this;
  return Object.keys(this).reduce(function (acc, property) {
    if (that.model.hasOwnProperty(property)) {
      acc[property] = that[property];
    }
    return acc;
  }, {});
};

ComponentConstructor.prototype.setIsConfigurable = function () {
  var keypath = this.getKeypath();
  Object.defineProperty(this, 'isConfigurable', {
    value: utils.startsWith(keypath, 'm.'),
    enumerable: true,
    configurable: false,
    writable: true
  });
};

ComponentConstructor.prototype.getLabel = function (lang) {
  return new _Promise(function (resolve, reject) {
    var label = getLabelFromElement(this.element);

    if (label) {
      resolve(label);
    } else {
      getLocalizationByConstructor(this.__proto__.constructor, lang).then(function (localization) {
        resolve(localization.name);
      }).catch(function (err) {
        resolve(getNameFromTagNameComponent(this.name || this.element.tagName.toLowerCase()));
      }.bind(this));
    }
  }.bind(this));
};

ComponentConstructor.prototype.setLabel = function (label) {
  this.element.setAttribute('user-label', label);
};

ComponentConstructor.prototype.subscribe = function (callback) {
  return new generalModel.ModelNotifier().observe(this.model).subscribe(function (model) {
    callback(model);
  }, true);
};

function getNameFromTagNameComponent(coTagName) {
  var normalName = coTagName.replace('co-', '').split('-').join(' ');

  return normalName[0].toUpperCase() + normalName.substring(1, normalName.lenght);
}

function handleActivation(event) {
  if (typeof this.activate === 'function' && isCobaltEvent(event)) {
    var prevModelState = utils.parse(this);
    this.activate(event.target);
    this.difference = utils.difference(prevModelState, utils.parse(this));
  }
}

function handleDeactivation(event) {
  if (typeof this.deactivate === 'function' && isCobaltEvent(event)) {
    this.deactivate(event.target);
  }

  utils.deepMixin(this, this.difference);
}

function isCobaltEvent(event) {
  return event.detail && !!event.detail.isCobaltEvent;
}

function isCommonModel(scope) {
  return getParentKeypathes(scope).some(function (keypath) {
    return isCommonKeypath(keypath);
  });
}

function isCommonBinders(scope) {
  var binders = scope.element && scope.element.binders;
  return binders && Object.keys(binders).some(function (binder) {
    return isCommonKeypath(binders[binder].keypath);
  });
}

function isCommonKeypath(keypath) {
  return utils.startsWith(keypath, 'm.common');
}

function getParentKeypathes(scope, keypathes) {
  keypathes = keypathes || [];
  if (scope && typeof scope.getKeypath === 'function') {
    keypathes.push(scope.getKeypath());
    getParentKeypathes(scope.parentScope, keypathes);
  }

  return keypathes;
}

function getLabelFromElement(element) {
  return element.getAttribute('user-label');
}

function subscribeToView(callback) {
  var _this = this;

  dispatcher.subscribeEvent(function (event) {
    if (event.type === dispatcher.EventType.DOM_REFRESHED && event.element === _this.element) {
      callback(_this.element);
    }
  });
}

exports.ComponentConstructor = ComponentConstructor;

},{"./buildKeypath.js":5,"./buildLocalization.js":6,"dispatcher":"dispatcher","es6-promise":"es6-promise","general-model":"general-model","utils":"utils"}],5:[function(require,module,exports){
'use strict';

function buildAbsoluteKeypath(parentPath, keypath) {
	var key = removeAlias(keypath);

	if (parentPath) {
		return key ? parentPath + '.' + removeAlias(keypath) : parentPath;
	} else {
		return keypath;
	}
}

function collectParentsKeypath(model, keypathes) {
	keypathes = keypathes || [];
	if (model && model.keypath) {
		keypathes.unshift(keypathModifier(model), model.index);
		collectParentsKeypath(model.__proto__, keypathes);
	}

	return keypathes;
}

function keypathModifier(model) {
	if (model.__proto__.keypath) {
		return removeAlias(model.keypath);
	}

	return model.keypath;
}

function removeAlias(keypath) {
	return keypath.split('.').slice(1).join('.');
}

module.exports = function (parentScope, keypath) {
	return buildAbsoluteKeypath(collectParentsKeypath(parentScope).join('.'), keypath);
};

},{}],6:[function(require,module,exports){
'use strict';

var _loader = require('loader');

var _utils = require('utils');

var _cache = require('cache');

var _cache2 = _interopRequireDefault(_cache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Promise = typeof Promise === 'undefined' ? require('es6-promise').Promise : Promise;

var cache = new _cache2.default();

module.exports = getLocalizationByConstructor;

function getLocalizationByConstructor(constructor, outsideLang) {
  var defaultLang = 'en';
  var lang = outsideLang || defaultLang;
  // TODO: works only if localizationTemplate and name were added to the prototype during component registration

  return getLocalization(constructor, lang, defaultLang).then(function (localization) {
    return extendLocalizationByScheme(localization.defaults, constructor.prototype.defaults, lang).then(function () {
      return localization;
    });
  });
}

function getLocalization(constructor, lang, defaultLang) {
  var localizationPath = getLocalizationPath(constructor, lang);

  return loadLocalizationData(localizationPath).then(function (localization) {
    if (isLocalization(localization)) {
      return localization;
    } else if (lang !== defaultLang) {
      var defaultLocalizationPath = getLocalizationPath(constructor, defaultLang);
      return loadLocalizationData(defaultLocalizationPath);
    }
    return _Promise.resolve({});
  });
}

function getLocalizationPath(constructor, lang) {
  return (0, _utils.template)(constructor.prototype.localizationTemplate, { name: constructor.prototype.name, lang: lang });
}

function loadLocalizationData(path) {
  var loadFromCache = true;
  var reviver = null;

  if (!cache.isCache(path)) {
    cache.set(path, (0, _loader.loadJSON)(path, reviver, loadFromCache));
  }

  return cache.get(path).then(function (data) {
    return Object.assign({}, data);
  });
}

function isLocalization(localization) {
  return localization && Object.keys(localization).length;
}

// if property described in scheme has 'base' defined, it's localization is extended with localization from 'base'
function extendLocalizationByScheme(localization, scheme, lang) {
  var localizationPromises = [];

  var _loop = function _loop(prop) {
    var propertyDescriptor = scheme[prop],
        localizationLoadingPromise = void 0;

    if (propertyDescriptor.sealed) {
      return 'continue';
    }

    if (propertyDescriptor.base) {
      localizationLoadingPromise = getLocalizationByConstructor(propertyDescriptor.base, lang).then(function (subLocalization) {
        return localization[prop].defaults = subLocalization.defaults;
      });
    } else if (propertyDescriptor.scheme) {
      localizationLoadingPromise = extendLocalizationByScheme(localization[prop].defaults, propertyDescriptor.scheme, lang);
    } else {
      return 'continue';
    }
    localizationPromises.push(localizationLoadingPromise);
  };

  for (var prop in scheme) {
    var _ret = _loop(prop);

    if (_ret === 'continue') continue;
  }

  return _Promise.all(localizationPromises);
}

},{"cache":"cache","es6-promise":"es6-promise","loader":"loader","utils":"utils"}],7:[function(require,module,exports){
"use strict";

var utils = require("utils");

function buildModel(defaultProperties, data, name) {
	var defaultModel = getDefaultModel(defaultProperties),
	    elementModel = utils.toCamelCaseObject(data.model || {}),
	    attributesData = getDataFromAttributes(defaultProperties, data),
	    model = mixin(mixin(defaultModel, elementModel, defaultProperties), attributesData, defaultProperties);

	return model;
}

function mixin(target, source, defaultProperties) {
	Object.keys(source).forEach(function (property) {
		if (source.hasOwnProperty(property) && defined(source[property]) && defaultProperties.hasOwnProperty(property)) {
			if (target[property] && target[property].constructor === Object) {
				addMissingProperies(defaultProperties[property].value, source[property]); // add missing properties and keep reference for correct observing
			}
			target[property] = source[property];
		}
	});

	return target;
}

function addMissingProperies(defaultProperties, source) {
	return Object.keys(defaultProperties).forEach(function (property) {
		if (!source.hasOwnProperty(property)) {
			source[property] = defaultProperties[property];
		}
	});
}

function getDefaultModel(defaultProperties) {
	return Object.keys(defaultProperties).reduce(function (acc, property) {
		acc[property] = defaultProperties[property].value;
		return acc;
	}, {});
}

function getDataFromAttributes(defaultProperties, data) {
	return Object.keys(defaultProperties).reduce(function (acc, property) {
		if (data.hasOwnProperty(property)) {
			if (defaultProperties[property] && defaultProperties[property].static) {
				acc[property] = utils.revive(data[property]);
			} else {
				acc[property] = data[property];
			}
		}
		return acc;
	}, {});
}

function defined(value) {
	return value !== undefined && value !== null;
}

module.exports = buildModel;

},{"utils":"utils"}],8:[function(require,module,exports){
'use strict';

var generalModel = require('general-model');
var complexProperties = [Object, Array, DataView, 'Object', 'Array', 'DataView'];

module.exports = function buildObservations(componentInstance, defaultProperties, model) {
  Object.keys(defaultProperties).forEach(function (property) {
    model[property] = componentInstance[property];

    if (isRefreshableProperty(defaultProperties, property) && isComplexProperty(defaultProperties, property)) {
      observeComplexProperty(property, componentInstance);
    }

    this.observe(componentInstance, property, function () {
      if (isRefreshableProperty(defaultProperties, property)) {
        componentInstance.refresh(property);
      }
      componentInstance.model[property] = componentInstance[property];
      model[property] = componentInstance[property];
    });

    this.observe(componentInstance.model, property, function () {
      componentInstance[property] = componentInstance.model[property];
    });

    this.observe(model, property, function () {
      componentInstance[property] = model[property];
    });
  }, this);
};

function observeComplexProperty(property, componentInstance) {
  // setTimeout because nested bindings...
  setTimeout(function () {
    new generalModel.ModelNotifier().deepObserve(componentInstance, property).subscribe(function (model) {
      componentInstance.refresh(property);
    }, true);
  }, 50);
}

function isComplexProperty(defaultProperties, property) {
  var isComplexProp = complexProperties.indexOf(defaultProperties[property].type) !== -1;
  return !isComplexProp ? Array.isArray(defaultProperties[property].type) : isComplexProp;
}

function isRefreshableProperty(defaultProperties, property) {
  return !!defaultProperties[property].refresh;
}

},{"general-model":"general-model"}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Collection = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('utils');

var _component = require('component');

var _rivets = require('rivets');

var _rivets2 = _interopRequireDefault(_rivets);

var _sightglass = require('sightglass');

var _sightglass2 = _interopRequireDefault(_sightglass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function configureSightglass() {
	_sightglass2.default.adapters = _rivets2.default.adapters;
	_sightglass2.default.root = _rivets2.default.rootInterface;
}

var Collection = exports.Collection = function (_Component) {
	_inherits(Collection, _Component);

	function Collection(element, model, parentScope) {
		_classCallCheck(this, Collection);

		var _this = _possibleConstructorReturn(this, (Collection.__proto__ || Object.getPrototypeOf(Collection)).apply(this, arguments));

		_this.iterated = [];
		_this.observers = [];
		configureSightglass();
		return _this;
	}

	_createClass(Collection, [{
		key: 'init',
		value: function init() {
			if (this.isPrerenderedCollection()) {
				this.bindPrerenderedCollectionItems();
			} else {
				this.collectionItem = this.element.getElementsByTagName("co-collection-item")[0];
				this.element.removeChild(this.collectionItem);
				this.refresh();
			}
		}
	}, {
		key: 'isPrerenderedCollection',
		value: function isPrerenderedCollection() {
			return this.element.hasAttribute('prerendered');
		}
	}, {
		key: 'ready',
		value: function ready(view) {
			var localExtensions = {};

			_rivets2.default._.extensions.forEach(function (extensionName) {
				localExtensions[extensionName] = view[extensionName];
			});

			this.localExtensions = localExtensions;

			this.init();
		}
	}, {
		key: 'insert',
		value: function insert(data, index) {
			this.checkPrerenderdMode();

			var scope = Object.create(this.parentScope);

			Object.defineProperty(scope, 'index', {
				enumerable: true,
				configurable: true,
				writable: true,
				value: index
			});
			scope[this.as] = data;

			scope.keypath = this.getKeypath(function (keypath) {
				return keypath + '.items';
			}) + '.' + index;

			var template = cloneNode(this.collectionItem);

			setCollectionItemModel(template, data, scope.keypath);

			this.element.insertBefore(template, this.element.children[index]);

			this.items.splice(index, 0, data);

			this.iterated.splice(index, 0, _rivets2.default.bind(template, scope, this.localExtensions));

			this.updateIteratedIndexes();
		}
	}, {
		key: 'remove',
		value: function remove(index) {
			this.checkPrerenderdMode();

			var elementToDelete = this.element.children[index];
			this.iterated.splice(index, 1);
			this.items.splice(index, 1);
			if (elementToDelete) {
				this.element.removeChild(elementToDelete);
			}

			this.updateIteratedIndexes();
		}
	}, {
		key: 'checkPrerenderdMode',
		value: function checkPrerenderdMode() {
			if (this.isPrerenderedCollection()) {
				console.warn(this.element, 'Was prerendered while build and can not be chaned dynamically. Please set dynamic="true" attribute to enable runtime editing.');
				return;
			}
		}
	}, {
		key: 'updateIteratedIndexes',
		value: function updateIteratedIndexes() {
			var _this2 = this;

			this.items.forEach(function (item, index) {
				if (_this2.iterated[index].models.index !== index) {
					_this2.iterated[index].models.index = index;
				}
			});
		}
	}, {
		key: 'template',
		value: function template() {
			return require('../template.html');
		}
	}, {
		key: 'refresh',
		value: function refresh() {
			this.buildCollectionElements();
			this.buildIteratedViews();
		}
	}, {
		key: 'buildCollectionElements',
		value: function buildCollectionElements() {
			this.refreshObjectCollection();
		}
	}, {
		key: 'buildIteratedViews',
		value: function buildIteratedViews() {
			var index = 0;
			if (this.iterated.length <= this.items.length && !this.isNormalChildrenCount() && this.collectionItem) {
				for (; index < this.items.length; index++) {
					//TODO: "for" loop for iterated through new Array(length)
					var model = this.items[index];
					var keypath = this.getKeypath(function (keypath) {
						return keypath + '.items';
					}) + '.' + index;
					var data = this.buildCollectionItemModel(index, model);

					if (data.keypath) {
						data.keypath = data.keypath + '.' + this.removeAlias(keypath);
					} else {
						data.keypath = keypath;
					}

					if (!defined(this.iterated[index])) {
						var template = cloneNode(this.collectionItem);

						this.buildObservations(this.parentScope, data);
						setCollectionItemModel(template, model, keypath);
						this.iterated.push(_rivets2.default.bind(template, data, this.localExtensions));

						this.element.appendChild(template);
					} else if (this.iterated[index].models[this.as] !== model) {
						this.buildObservations(this.parentScope, data);
						this.iterated[index].update(data);
					} else if (this.iterated[index].models.index !== index) {
						this.iterated[index].models.index = index;
					}
				};
			}
		}
	}, {
		key: 'bindPrerenderedCollectionItems',
		value: function bindPrerenderedCollectionItems() {
			var index = 0;
			for (; index < this.items.length; index++) {
				//TODO: "for" loop for iterated through new Array(length)
				var model = this.items[index];
				var data = this.buildCollectionItemModel(index, model);

				this.buildObservations(this.parentScope, data);
				this.iterated.push(_rivets2.default.bind(this.element.children[index], data, this.localExtensions));
			};
		}
	}, {
		key: 'buildCollectionItemModel',
		value: function buildCollectionItemModel(index, model) {
			var data = Object.create(this.parentScope);

			Object.defineProperty(data, 'index', {
				enumerable: true,
				configurable: true,
				writable: true,
				value: index
			});

			data[this.as] = model;
			data.iteratedAlias = this.as;
			return data;
		}
	}, {
		key: 'buildObservations',
		value: function buildObservations(model, data) {
			var _this3 = this;

			var observers = Object.keys(model).filter(function (key) {
				return !!_this3.getDescriptor(model, key).get;
			}).filter(function (key) {
				return key !== _this3.as;
			}).map(function (key) {
				return (0, _sightglass2.default)(model, key, function () {
					data[key] = model[key];
				});
			});

			if (this.observers[data.index]) {
				this.unobserve(data.index);
			}
			this.observers[data.index] = observers;
		}
	}, {
		key: 'getDescriptor',
		value: function getDescriptor(object, key) {
			return Object.getOwnPropertyDescriptor(object, key) || {};
		}
	}, {
		key: 'unobserve',
		value: function unobserve(index) {
			this.observers[index].forEach(function (observer) {
				return observer.unobserve();
			});
		}
	}, {
		key: 'removeAlias',
		value: function removeAlias(keypath) {
			return keypath.split('.').slice(1).join('.');
		}
	}, {
		key: 'refreshObjectCollection',
		value: function refreshObjectCollection() {
			var _this4 = this;

			this.iterated.filter(function (iteratedItem, index) {
				return _this4.items.indexOf(iteratedItem.models[_this4.as]) === -1;
			}).map(function (iteratedItemToRemove) {
				return _this4.iterated.splice(_this4.iterated.indexOf(iteratedItemToRemove), 1)[0];
			}).forEach(function (viewToRemove) {
				_this4.unobserve(viewToRemove.models.index);
				viewToRemove.unbind();
				_this4.element.removeChild(viewToRemove.els[0]);
			});
		}

		// deprecated

	}, {
		key: 'refreshPrimitiveCollection',
		value: function refreshPrimitiveCollection() {
			var difference = new Array(this.iterated.length - this.items.length),
			    index = 0,
			    view = void 0;

			for (; index < difference.length; index++) {
				view = this.iterated.pop();
				view.unbind();
				this.element.removeChild(view.els[0]);
			}
		}
	}, {
		key: 'getKeypath',
		value: function getKeypath() {
			var keypathModifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (keypath) {
				return keypath;
			};

			var modelKeypath = this.getAttribute('model');
			var itemsKeypath = this.getAttribute("items");

			return modelKeypath ? keypathModifier(modelKeypath) : itemsKeypath;
		}
	}, {
		key: 'isNormalChildrenCount',
		value: function isNormalChildrenCount() {
			return this.items.length === this.element.children.length;
		}
	}, {
		key: 'getAttribute',
		value: function getAttribute(attribute) {
			return this.element.getAttribute(attribute);
		}
	}, {
		key: 'defaults',
		get: function get() {
			return {
				items: {
					value: [],
					type: Array,
					refresh: true,
					sealed: true
				},
				as: {
					value: "item",
					type: String,
					static: true
				}
			};
		}
	}], [{
		key: 'block',
		get: function get() {
			return true;
		}
	}]);

	return Collection;
}(_component.Component);

function cloneNode(node) {
	return node.cloneNode(true);
}

function defined(value) {
	return value !== undefined && value !== null;
}

function isObjectCollection(collection) {
	return collection.every(function (collectionItem) {
		return (0, _utils.isObject)(collectionItem);
	});
}

function setCollectionItemModel(template, model, keypath) {
	if ((0, _utils.isObject)(model)) {
		template.setAttribute('model', keypath);
	}
}

},{"../template.html":10,"component":3,"rivets":"rivets","sightglass":"sightglass","utils":"utils"}],10:[function(require,module,exports){
module.exports = '<content co-collection=""></content>'
},{}]},{},[1]);
