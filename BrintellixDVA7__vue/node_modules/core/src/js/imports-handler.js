import path from 'path'
import { toArray, startsWith, prependChild, isUnique } from 'utils'
import settings from 'settings'
import componentStyles from 'components-styles-paths'
import clmList from '@cobalt-engine/co-clm-list'
// TODO: rivets should be passed as a parameter
import rivets from 'rivets'

const DEV = 'dev'
const COMPONENTS = 'components/'

export function importComponents (rootElement) {
  const rvImports = getEntriesByAttr(rootElement, 'rv-import')
  const rvComponents = getEntriesByAttr(rootElement, 'rv-component')
  const entries = rvImports
    .concat(rvComponents)
    .filter(isUnique)

  return importsResolver(entries)
}

function importsResolver (entries) {
  const currentClm = getCurrentClm()

  if (currentClm === DEV) {
    return Promise.all([includeStyles(entries), includeScripts(entries)])
  } else {
    return includeScripts(entries)
  }
}

export function importComponentByName (name) {
  return Promise.all([addComponentStyle(name), addComponentScript(name)])
}

function includeScripts (imports) {
  let components = imports.map(addComponentScript)

  return Promise.all(components)
}

function addComponentScript (component) {
  // TODO: we should probably try to load using script tag, and if it fails, use require
  const componentDeclaration = requireComponent(component)

  if (componentDeclaration) {
    rivets.components[componentDeclaration.name] = componentDeclaration

    return Promise.resolve()
  }

  const bundle = path.join(resolveImport(component), 'dist/js/bundle.js')

  return addScript(bundle)
}

function requireComponent (name) {
  const map = require('__modulesMap')
  try {
    return require(map[name])
  } catch (e) {
    return
  }
}

function addScript (bundlePath) {
  return new Promise((resolve, reject) => {
    let script = document.createElement('script')

    addElement(script, document.body, 'src', bundlePath, resolve, reject)
  })
    .catch(err => { })
}

function includeStyles (imports) {
  let components = imports.map(addComponentStyle)

  return Promise.all(components)
}

function addComponentStyle (component) {
  const stylesFileName = removePrefixBySplitter(component, '-')
  const bundleCSSPath = path.join(resolveImport(component), 'dist/css/bundle.css')
  const stylesWithoutScopingPath = path.join(resolveImport(component), 'dist/css', stylesFileName + '.css')
  const irregularStylesPath = componentStyles[component]

  let stylePaths = [bundleCSSPath, stylesWithoutScopingPath].concat(irregularStylesPath || [])

  return addLink(stylePaths)
}

function addLink (stylesPaths) {
  return new Promise((resolve, reject) => {
    let link = document.createElement('link')

    link.rel = 'stylesheet'
    addElement(link, document.head, 'href', stylesPaths.shift(), resolve, reject, prependChild)
  })
    .catch(() => {
      if (stylesPaths.length) {
        return addLink(stylesPaths)
      }
    })
}

function addElement (element, parent, attr, url, resolve, reject, insertFunction) {
  let tags = toArray(document.getElementsByTagName(element.tagName)),
    included = tags.map(element => element[attr])

  element.addEventListener('load', resolve)
  element.addEventListener('error', () => {
    parent.removeChild(element)
    reject(new Error('File not found: ' + element[attr]))
  })

  element[attr] = url
  if (included.indexOf(element[attr]) < 0) {
    if (insertFunction) {
      insertFunction(parent, element)
    } else {
      parent.appendChild(element)
    }
  } else {
    resolve()
  }
}

function removePrefixBySplitter (string, splitter) {
  return string.split(splitter).slice(1).join(splitter)
}

function resolveImport (keypath) {
  var componentsDir = settings.components || COMPONENTS

  if (!isRelativePath(keypath) && !startsWith(keypath, componentsDir)) {
    return append(resolveComponentPath(keypath), componentsDir)
  }

  return keypath
}

function isRelativePath (path) {
  return startsWith(path, './') || startsWith(path, '/')
}

function append (string, start = '', end = '') {
  start = startsWith(string, start) ? '' : start

  return start.concat(string, end)
}

function getEntriesByAttr (rootElement, attr) {
  return toArray(rootElement.querySelectorAll(`[${attr}]`))
    .map(element => element.getAttribute(attr))
}

function resolveComponentPath (keypath) {
  const currentClm = getCurrentClm()

  if ((isShared() || clmList.isExternalResource(currentClm)) && startsWith(keypath, COMPONENTS)) {
    return keypath.replace(COMPONENTS, '')
  }

  return keypath
}

function getCurrentClm () {
  if (settings._env) {
    return settings._env.currentClm
  }

  return ''
}

function isShared () {
  return settings.components.indexOf('./shared/') > -1
}
