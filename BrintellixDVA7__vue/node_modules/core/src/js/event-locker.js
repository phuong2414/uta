import dispatcher from 'dispatcher';

//get all events - \m/
const ignoresEvents = ['load', 'error'];
const ALL_DOCUMENT_EVENTS = findAllDocumentEvents(ignoresEvents);

function findAllDocumentEvents(ignoresEvents){
	return Object.getOwnPropertyNames(document)
		.concat(Object.getOwnPropertyNames(Object.getPrototypeOf(Object.getPrototypeOf(document))))
		.filter(function(property){
			return !property.indexOf('on') && (document[property] == null || typeof document[property] == 'function');
		})
		.map(normalizeEventName)
		.filter(filterIgnoresEvent(ignoresEvents))
}

function normalizeEventName(event){
	return event.replace(event.substr(0, 2), '');
}

function filterIgnoresEvent(ignores) {
	return (event) => ignores.indexOf(event) === -1;
}

function eventBlocker(event){
	event.stopPropagation();
}

function lockEvents(){
	ALL_DOCUMENT_EVENTS.forEach(event => {
		window.addEventListener(event, eventBlocker, true);
	});
}

function unlockEvents(){
	ALL_DOCUMENT_EVENTS.forEach(event => {
		window.removeEventListener(event, eventBlocker, true);
	});
}

dispatcher.subscribeAction(action => {
	switch(action.type) {
		case dispatcher.ActionType.EDIT_PRESENTATION :
			lockEvents();
			break;
		case dispatcher.ActionType.VIEW_PRESENTATION :
			unlockEvents();
			break;
	}
});

export { lockEvents, unlockEvents };