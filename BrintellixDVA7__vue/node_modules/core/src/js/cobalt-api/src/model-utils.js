import {deepMixin, startsWith, isArray} from 'utils';
import {buildObservation, publishModelChanges} from 'model';
import {getModelKeypath, getNestedComponents, isLastIndex, getNestedBinderKeypaths} from './dom-utils.js';
import generalModel from 'general-model';

export function updateModel(slideModel, modelName, model, isCommon){
	const targetModel = getTargetModel(slideModel, isCommon);

	if(isCommon){
		buildBindingCommonModel(targetModel, modelName, model);
	}else{
		addBindingModel(targetModel, modelName, model);
	}
}

export function observeModelChanges(slideModel, modelName, isCommon){
	const model = getTargetModel(slideModel, isCommon)[modelName];
	buildObservation(model, isCommon);
}

export function removeComponentModel(element, scope){
	getNestedComponents(element)
		.map(getModelKeypath)
		.concat(getNestedBinderKeypaths(element))
		.filter(getUniquePathes)
		.filter(keypath => keypath)
		.filter(isSlideModelKeypath)
		.forEach(modelKeypath => removeModel(modelKeypath, scope));
}

export function buildModelKeypath(modelName, isCommon){
	if(isModelKeypath(modelName)){
		return modelName;
	}

	return createModelKeypath(modelName, isCommon);
}

export function getTargetModel(model, isCommon){
	return isCommon ? model.common : model;
}

export function publishBothModelChanges(){
	publishModelChanges(true);
	publishModelChanges();
}

export function removeModel(modelKeypath, scope){
	modelKeypath.split('.').reduce((accum, key, index, array) => {
		if(isArray(accum)){
			accum.splice(0, 1);
		}else if(canDelete(accum, key) && isLastIndex(index, array)){
			delete accum[key];
		}
		return accum.hasOwnProperty(key) && accum[key] ? accum[key] : {};
	}, scope);
}

export function isModelKeypath(keypath){
	return startsWith(keypath, 'm.');
}

function buildBindingCommonModel(targetModel, modelName, model){
	if(targetModel[modelName]){
		new generalModel.ModelSessionStorage()
			.setModel(deepMixin(model, targetModel[modelName]));
	}else{
		targetModel[modelName] = model;
	}
}

function addBindingModel(targetModel, modelName, model){
	if(!isModelKeypath(modelName)){
		targetModel[modelName] = model;
	}
}

function createModelKeypath(modelName, isCommon){
	const modelAlias = isCommon ? 'common.' : '';

	return `m.${modelAlias + modelName}`;
}

function canDelete(object, property){
	return object.hasOwnProperty(property) && Object.getOwnPropertyDescriptor(object, property).configurable;
}

function isSlideModelKeypath(keypath){
	return !startsWith(keypath, 'm.common');
}

function getUniquePathes(value, index, array) { 
	return array.indexOf(value) === index;
}