import {buildModelKeypath, removeModel} from './model-utils';
import {addBinderAttribute, getBinderKeypath, removeBinderAttribute} from './dom-utils';
import BindingHandler from './BindingHandler.js';

export default class ComponentHandler extends BindingHandler{
	constructor(cobalt){
		super(...arguments);
		this.cobalt = cobalt;
	}

	addBinder(options){
		this.add(options, this.cobalt.scope.m);
	}

	removeBinder(options){
		this.remove(options);
	}

	buildBinding(element, options){
		const modelKeypath = this.buildModelKeypath(options);
		this.cobalt.mainView.addBinding(element, options.type, modelKeypath);
	}

	updateDOM(element, options){
		const modelKeypath = this.buildModelKeypath(options);
		addBinderAttribute(element, options.type, modelKeypath);
	}

	removeInstance(options){
		let {element, type} = options;
		const binderInstance = element.binders && element.binders[type];

		destroyBinderInstance(element, type);

		if(binderInstance){
			unbind(binderInstance);
		}
	}

	removeModel(options){
		let {element, type} = options;

		if(isCobaltBinder(element, type)){
			removeModel(getBinderKeypath(element, type), this.cobalt.scope);
		}
	}

	buildModelKeypath(options){
		let {modelName, isCommon} = options;
		return buildModelKeypath(modelName, isCommon);
	}
}

function unbind(binderInstance){
	if(typeof binderInstance.unbind == 'function'){
		binderInstance.unbind()
	}
}

function destroyBinderInstance(element, type){
	removeBinderAttribute(element, type);
	
	if(element.binders){	
		delete element.binders[type];
		
		if(!Object.getOwnPropertyNames(element.binders).length){
			element.removeAttribute('co-binder');
		}
	}
}

function isCobaltBinder(element, type){
	return element.binders && element.binders[type];
}