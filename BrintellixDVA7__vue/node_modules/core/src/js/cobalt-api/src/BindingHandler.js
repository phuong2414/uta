import {publishModelChanges} from 'model';
import {observeModelChanges, publishBothModelChanges, updateModel, isModelKeypath} from './model-utils';

export default class BindingHandler{
	constructor(){}

	add(options, slideModel){
		let {
			modelName,
			model,
			isCommon
		} = options;

		const element = this.getElement(options);

		this.updateModel(slideModel, modelName, model, isCommon);
		this.buildBinding(element, options);
		this.updateDOM(element, options);
		this.observeModel(slideModel, modelName, isCommon);
		this.publishModelChanges(isCommon);
	}

	remove(options){
		this.removeModel(options);
		this.removeInstance(options);
		this.publishBothModelChanges();
	}

	//TODO: expediency of this method...
	getElement(options){
		return options.element;
	}

	updateModel(slideModel, modelName, model, isCommon){
		updateModel(slideModel, modelName, model, isCommon);
	}

	observeModel(slideModel, modelName, isCommon){
		if(!isModelKeypath(modelName)){
			observeModelChanges(slideModel, modelName, isCommon);
		}
	}

	publishModelChanges(isCommon){
		publishModelChanges(isCommon);
	}

	publishBothModelChanges(){
		publishBothModelChanges();
	}

	buildBinding(element, options){}

	updateDOM(element, options){}

	removeInstance(options){}
	
	removeModel(options){}
}