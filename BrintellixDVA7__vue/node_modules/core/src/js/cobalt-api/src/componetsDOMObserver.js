import DOMObserver from './DOMObserver.js';
import {isUnique, toArray} from 'utils';

const slideElement = document.querySelector('.slide');
const defaultConfig = {
	subtree: true,
	childList: true
};

export default {
	subscribe: (callback, target = slideElement, config = defaultConfig) => {
		return DOMObserver.subscribe(mutationsHandler(callback), target, config);
	}
}

function mutationsHandler(callback){
	return mutations => mutations
		.filter(componentNodeAddedOrRemoved)
		.map(mutation => mutation.target)
		.map(getRootComponent)
		.filter(isUnique)
		.forEach(callback);
}


function getRootComponent(element){
	if(isComponent(element)){
		return element;
	}

	return element.parentNode ? getRootComponent(element.parentNode) : null;
}

function isComponent(element){
	return (element instanceof Element) && element.hasAttribute('co-component');
}

function componentNodeAddedOrRemoved(mutationRecord){
	const added = toArray(mutationRecord.addedNodes);
	const removed = toArray(mutationRecord.removedNodes);

	return mutationRecord.type == 'childList'
		&& added.some(isComponent)
		|| removed.some(isComponent)
}