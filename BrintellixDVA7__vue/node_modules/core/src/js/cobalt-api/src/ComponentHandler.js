import * as domUtils from './dom-utils';
import {removeComponentModel, buildModelKeypath} from './model-utils';
import {importComponents, importComponentByName} from '../../imports-handler';
import BindingHandler from './BindingHandler';

export default class ComponentBuilder extends BindingHandler{
	constructor(cobalt){
		super(...arguments);
		this.cobalt = cobalt;
	}

	addComponent(options){
		return this.include(options)
			.then(() => this.add(options, this.cobalt.scope.m));
	}

	removeComponent(options){
		return Promise.resolve(this.remove(options));
	}

	buildBinding(element){
		this.cobalt.bind(element);
	}

	updateDOM(element, options){
		domUtils.appendComponent(element, options.rootElement)
	}

	removeInstance(options){
		domUtils.removeDOMElement(options.element);
	}

	removeModel(options){
		removeComponentModel(options.element, this.cobalt.scope);
	}

	hideComponent(element){
		domUtils.hideDOMElement(element);
	}

	getElement(options){
		let {
			component,
			id,
			modelName,
			isCommon
		} = options;

		const modelkeypath = buildModelKeypath(modelName, isCommon);
		
		return domUtils.getComponentElement(component, id, modelkeypath);
	}

	include(options){
		if(this.isComponentTemplate(options.component)){
			return importComponents(this.getElement(options));
		}

		return importComponentByName(options.component);
	}

	isComponentTemplate(component){
		return component instanceof Element || component instanceof DocumentFragment;
	}
}