import {Observer, debounce, mixin, load} from 'utils';
import slide from 'slide';
import settings from 'settings';

const observer = new Observer();
const localizationChangeEventName = 'localizationchanged';
const commonPath = `${settings.translations}${settings.lang}/`;
const slideLocalizationPath = `${commonPath}${slide.id}.json`;
const commonLocalizationPath = `${commonPath}common.json`;
const throttle = 100;

export default class Translate{
	constructor(scopeLocalization, separateLocalization){
		this.localization = scopeLocalization;
		this.publishLocalizationChanges = debounce(key => {
			this.publishChanges(key);
		}, throttle);

		const {commonLocalization, slideLocalization} = separateLocalization;

		mixin(this, {commonLocalization, slideLocalization});
	}

	subscribe(callback){
		observer.subscribe(localizationChangeEventName, callback);
	}

	unsubscribe(callback){
		observer.unsubscribe(localizationChangeEventName, callback);
	}

	add(key, value, isCommon){
		this.localization[key] = value;
		this.getTargetLocalization(isCommon)[key] = value;

		this.publishLocalizationChanges(key);
	}

	remove(key){
		delete this.localization[key];
		delete this.getTargetLocalization(this.isCommon(key))[key];

		this.publishLocalizationChanges(key);
	}

	edit(key, value){
		this.localization[key] = value;
		this.getTargetLocalization(this.isCommon(key))[key] = value;

		this.publishLocalizationChanges(key);
	}

	getTargetLocalization(isCommon){
		return isCommon ? this.commonLocalization : this.slideLocalization;
	}

	getActualLocalization(keypath){
		const localization = this.getTargetLocalization(this.isCommon(keypath));

		return this.syncLocalization(localization, keypath);
	}

	getActualPath(keypath){
		 return this.isCommon(keypath) ? commonLocalizationPath : slideLocalizationPath;
	}

	isCommon(keypath){
		return !this.slideLocalization.hasOwnProperty(keypath);
	}

	syncLocalization(localization, keypath){
		if(defined(this.localization[keypath])){
			localization[keypath] = this.localization[keypath];
		}else{
			delete localization[keypath];
		}

		return localization;
	}

	publishChanges(keypath){
		observer.publish(localizationChangeEventName, {
			path: this.getActualPath(keypath),
			localization: this.getActualLocalization(keypath)
		});
	}

}

function defined(value){
	return value !== undefined && value !== null;
}