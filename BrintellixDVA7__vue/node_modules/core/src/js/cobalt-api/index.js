import rivets from 'rivets'
import {dispatchEvent} from 'utils'
import cobaltDispatcher from 'dispatcher'
import CobaltDispatcherApi from './src/CobaltDispatcherApi'
import Cobalt from '../cobalt'
import ComponentHandler from './src/ComponentHandler.js'
import BinderHandler from './src/BinderHandler.js'
import Translate from './src/Translate.js'
import ViewObservationLifeCycle from './src/ViewObservationLifeCycle.js'
import * as utils from 'utils'
import * as model from 'model'
import { declareDefaultBindings } from 'extension'
import { importComponents } from '../imports-handler.js'
import presentationIdentifier from 'presentation-identifier'
import {loadJSON} from 'loader';
const initialCommonModelKey = presentationIdentifier + '-initialCommonModel'

export default class CobaltApi extends Cobalt {
  constructor (scope, localization) {
    super(scope, localization)

    this.componentHandler = new ComponentHandler(this)
    this.binderHandler = new BinderHandler(this)
    this.translate = new Translate(scope.t, localization)

    new ViewObservationLifeCycle(cobaltDispatcher)

    this.dispatcher = new CobaltDispatcherApi(cobaltDispatcher)
  }

  extendRivets (scope) {
    declareDefaultBindings(rivets, scope)
  }

  initialize (rootElement){
    this.bindTemplates(rootElement)

    return importComponents(rootElement)
      .then(() => {
        super.initialize(rootElement)
        model.init()
      })
  }

  bindTemplates (rootElement) {
    const rvTemplate = 'rv-template'
    const templates = rootElement.getElementsByTagName(rvTemplate)

    let components = rivets.components
    let binders = rivets.binders

    rivets.components = {
      [rvTemplate]: components[rvTemplate]
    }

    rivets.binders = {
      '*': binders['*']
    }

    utils.toArray(templates).forEach(template => this.bind(template, this.scope))

    rivets.components = components
    rivets.binders = binders
  }

  initCommonModel() {
    var initialCommonModel = utils.deepMixin(utils.parse(this.scope.m.common), JSON.parse(sessionStorage.getItem(initialCommonModelKey)))

    sessionStorage.setItem(initialCommonModelKey, JSON.stringify(initialCommonModel))
    this.addModelToScope('initialSlideModel', this.scope.m)
    this.addModelToScope('initialCommonModel', initialCommonModel)
    super.initCommonModel()
  }

  addModelToScope (name, model) {
    Object.defineProperty(this.scope, name, {
      enumerable: false,
      writable: false,
      configurable: false,
      value: utils.parse(model)
    })
  }

  addComponent (options) {
    return this.componentHandler.addComponent(options)
  }

  removeComponent (element) {
    return this.componentHandler.removeComponent({
      element
    })
  }

  hideComponent (element) {
    this.componentHandler.hideComponent(element)
  }

  addBinder (options) {
    this.binderHandler.addBinder(options, this.mainView, this.scope.m)
  }

  removeBinder (options) {
    this.binderHandler.removeBinder(options, this.scope)
  }

  activateElement(domElement){
    dispatchEvent(domElement, 'activate', {
      detail: {
        isCobaltEvent: true
      }
    })
  }

  deactivateElement(domElement){
    dispatchEvent(domElement, 'deactivate', {
      detail: {
        isCobaltEvent: true
      }
    })
  }

  getBlocksList(){
    return loadJSON('blocks-library/blocks.json')
      .then((data) => data.blocks || [])
  }

  getModulesList(){
    return loadJSON('modules-library/modules.json')
      .then((data) => data.modules || [])
  }

  // deprecated API
  init (component, id, modelName, model, isCommon, rootElement) {
    console.warn('Warning: init() method has been deprecated. Use addComponent() instead.')
    this.addComponent({component, id, modelName, model, isCommon, rootElement})
  }

  destroy (element) {
    console.warn('Warning: destroy() method has been deprecated. Use removeComponent() instead.')
    this.removeComponent(element)
  }

  hide (element) {
    console.warn('Warning: hide() method has been deprecated. Use hideComponent() instead.')
    this.hideComponent(element)
  }
}
