'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _rivets = require('rivets');

var _rivets2 = _interopRequireDefault(_rivets);

var _utils = require('utils');

var utils = _interopRequireWildcard(_utils);

var _dispatcher = require('dispatcher');

var _dispatcher2 = _interopRequireDefault(_dispatcher);

var _CobaltDispatcherApi = require('./src/CobaltDispatcherApi');

var _CobaltDispatcherApi2 = _interopRequireDefault(_CobaltDispatcherApi);

var _cobalt = require('../cobalt');

var _cobalt2 = _interopRequireDefault(_cobalt);

var _ComponentHandler = require('./src/ComponentHandler.js');

var _ComponentHandler2 = _interopRequireDefault(_ComponentHandler);

var _BinderHandler = require('./src/BinderHandler.js');

var _BinderHandler2 = _interopRequireDefault(_BinderHandler);

var _Translate = require('./src/Translate.js');

var _Translate2 = _interopRequireDefault(_Translate);

var _ViewObservationLifeCycle = require('./src/ViewObservationLifeCycle.js');

var _ViewObservationLifeCycle2 = _interopRequireDefault(_ViewObservationLifeCycle);

var _model = require('model');

var model = _interopRequireWildcard(_model);

var _extension = require('extension');

var _importsHandler = require('../imports-handler.js');

var _presentationIdentifier = require('presentation-identifier');

var _presentationIdentifier2 = _interopRequireDefault(_presentationIdentifier);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var initialCommonModelKey = _presentationIdentifier2.default + '-initialCommonModel';

var CobaltApi = function (_Cobalt) {
  _inherits(CobaltApi, _Cobalt);

  function CobaltApi(scope, localization) {
    _classCallCheck(this, CobaltApi);

    var _this = _possibleConstructorReturn(this, (CobaltApi.__proto__ || Object.getPrototypeOf(CobaltApi)).call(this, scope, localization));

    _this.componentHandler = new _ComponentHandler2.default(_this);
    _this.binderHandler = new _BinderHandler2.default(_this);
    _this.translate = new _Translate2.default(scope.t, localization);

    new _ViewObservationLifeCycle2.default(_dispatcher2.default);

    _this.dispatcher = new _CobaltDispatcherApi2.default(_dispatcher2.default);
    return _this;
  }

  _createClass(CobaltApi, [{
    key: 'extendRivets',
    value: function extendRivets(scope) {
      (0, _extension.declareDefaultBindings)(_rivets2.default, scope);
    }
  }, {
    key: 'initialize',
    value: function initialize(rootElement) {
      var _this2 = this;

      this.bindTemplates(rootElement);

      return (0, _importsHandler.importComponents)(rootElement).then(function () {
        _get(CobaltApi.prototype.__proto__ || Object.getPrototypeOf(CobaltApi.prototype), 'initialize', _this2).call(_this2, rootElement);
        model.init();
      });
    }
  }, {
    key: 'bindTemplates',
    value: function bindTemplates(rootElement) {
      var _this3 = this;

      var rvTemplate = 'rv-template';
      var templates = rootElement.getElementsByTagName(rvTemplate);

      var components = _rivets2.default.components;
      var binders = _rivets2.default.binders;

      _rivets2.default.components = _defineProperty({}, rvTemplate, components[rvTemplate]);

      _rivets2.default.binders = {
        '*': binders['*']
      };

      utils.toArray(templates).forEach(function (template) {
        return _this3.bind(template, _this3.scope);
      });

      _rivets2.default.components = components;
      _rivets2.default.binders = binders;
    }
  }, {
    key: 'initCommonModel',
    value: function initCommonModel() {
      var initialCommonModel = utils.deepMixin(utils.parse(this.scope.m.common), JSON.parse(sessionStorage.getItem(initialCommonModelKey)));

      sessionStorage.setItem(initialCommonModelKey, JSON.stringify(initialCommonModel));
      this.addModelToScope('initialSlideModel', this.scope.m);
      this.addModelToScope('initialCommonModel', initialCommonModel);
      _get(CobaltApi.prototype.__proto__ || Object.getPrototypeOf(CobaltApi.prototype), 'initCommonModel', this).call(this);
    }
  }, {
    key: 'addModelToScope',
    value: function addModelToScope(name, model) {
      Object.defineProperty(this.scope, name, {
        enumerable: false,
        writable: false,
        configurable: false,
        value: utils.parse(model)
      });
    }
  }, {
    key: 'addComponent',
    value: function addComponent(options) {
      return this.componentHandler.addComponent(options);
    }
  }, {
    key: 'removeComponent',
    value: function removeComponent(element) {
      return this.componentHandler.removeComponent({
        element: element
      });
    }
  }, {
    key: 'hideComponent',
    value: function hideComponent(element) {
      this.componentHandler.hideComponent(element);
    }
  }, {
    key: 'addBinder',
    value: function addBinder(options) {
      this.binderHandler.addBinder(options, this.mainView, this.scope.m);
    }
  }, {
    key: 'removeBinder',
    value: function removeBinder(options) {
      this.binderHandler.removeBinder(options, this.scope);
    }
  }, {
    key: 'activateElement',
    value: function activateElement(domElement) {
      (0, _utils.dispatchEvent)(domElement, 'activate', {
        detail: {
          isCobaltEvent: true
        }
      });
    }
  }, {
    key: 'deactivateElement',
    value: function deactivateElement(domElement) {
      (0, _utils.dispatchEvent)(domElement, 'deactivate', {
        detail: {
          isCobaltEvent: true
        }
      });
    }

    // deprecated API

  }, {
    key: 'init',
    value: function init(component, id, modelName, model, isCommon, rootElement) {
      console.warn('Warning: init() method has been deprecated. Use addComponent() instead.');
      this.addComponent({ component: component, id: id, modelName: modelName, model: model, isCommon: isCommon, rootElement: rootElement });
    }
  }, {
    key: 'destroy',
    value: function destroy(element) {
      console.warn('Warning: destroy() method has been deprecated. Use removeComponent() instead.');
      this.removeComponent(element);
    }
  }, {
    key: 'hide',
    value: function hide(element) {
      console.warn('Warning: hide() method has been deprecated. Use hideComponent() instead.');
      this.hideComponent(element);
    }
  }]);

  return CobaltApi;
}(_cobalt2.default);

exports.default = CobaltApi;