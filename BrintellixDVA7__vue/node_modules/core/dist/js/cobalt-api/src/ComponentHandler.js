'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _domUtils = require('./dom-utils');

var domUtils = _interopRequireWildcard(_domUtils);

var _modelUtils = require('./model-utils');

var _importsHandler = require('../../imports-handler');

var _BindingHandler2 = require('./BindingHandler');

var _BindingHandler3 = _interopRequireDefault(_BindingHandler2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ComponentBuilder = function (_BindingHandler) {
	_inherits(ComponentBuilder, _BindingHandler);

	function ComponentBuilder(cobalt) {
		_classCallCheck(this, ComponentBuilder);

		var _this = _possibleConstructorReturn(this, (ComponentBuilder.__proto__ || Object.getPrototypeOf(ComponentBuilder)).apply(this, arguments));

		_this.cobalt = cobalt;
		return _this;
	}

	_createClass(ComponentBuilder, [{
		key: 'addComponent',
		value: function addComponent(options) {
			var _this2 = this;

			return this.include(options).then(function () {
				return _this2.add(options, _this2.cobalt.scope.m);
			});
		}
	}, {
		key: 'removeComponent',
		value: function removeComponent(options) {
			return Promise.resolve(this.remove(options));
		}
	}, {
		key: 'buildBinding',
		value: function buildBinding(element) {
			this.cobalt.bind(element);
		}
	}, {
		key: 'updateDOM',
		value: function updateDOM(element, options) {
			domUtils.appendComponent(element, options.rootElement);
		}
	}, {
		key: 'removeInstance',
		value: function removeInstance(options) {
			domUtils.removeDOMElement(options.element);
		}
	}, {
		key: 'removeModel',
		value: function removeModel(options) {
			(0, _modelUtils.removeComponentModel)(options.element, this.cobalt.scope);
		}
	}, {
		key: 'hideComponent',
		value: function hideComponent(element) {
			domUtils.hideDOMElement(element);
		}
	}, {
		key: 'getElement',
		value: function getElement(options) {
			var component = options.component,
			    id = options.id,
			    modelName = options.modelName,
			    isCommon = options.isCommon;


			var modelkeypath = (0, _modelUtils.buildModelKeypath)(modelName, isCommon);

			return domUtils.getComponentElement(component, id, modelkeypath);
		}
	}, {
		key: 'include',
		value: function include(options) {
			if (this.isComponentTemplate(options.component)) {
				return (0, _importsHandler.importComponents)(this.getElement(options));
			}

			return (0, _importsHandler.importComponentByName)(options.component);
		}
	}, {
		key: 'isComponentTemplate',
		value: function isComponentTemplate(component) {
			return component instanceof Element || component instanceof DocumentFragment;
		}
	}]);

	return ComponentBuilder;
}(_BindingHandler3.default);

exports.default = ComponentBuilder;