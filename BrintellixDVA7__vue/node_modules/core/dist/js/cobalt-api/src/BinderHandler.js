'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _modelUtils = require('./model-utils');

var _domUtils = require('./dom-utils');

var _BindingHandler2 = require('./BindingHandler.js');

var _BindingHandler3 = _interopRequireDefault(_BindingHandler2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ComponentHandler = function (_BindingHandler) {
	_inherits(ComponentHandler, _BindingHandler);

	function ComponentHandler(cobalt) {
		_classCallCheck(this, ComponentHandler);

		var _this = _possibleConstructorReturn(this, (ComponentHandler.__proto__ || Object.getPrototypeOf(ComponentHandler)).apply(this, arguments));

		_this.cobalt = cobalt;
		return _this;
	}

	_createClass(ComponentHandler, [{
		key: 'addBinder',
		value: function addBinder(options) {
			this.add(options, this.cobalt.scope.m);
		}
	}, {
		key: 'removeBinder',
		value: function removeBinder(options) {
			this.remove(options);
		}
	}, {
		key: 'buildBinding',
		value: function buildBinding(element, options) {
			var modelKeypath = this.buildModelKeypath(options);
			this.cobalt.mainView.addBinding(element, options.type, modelKeypath);
		}
	}, {
		key: 'updateDOM',
		value: function updateDOM(element, options) {
			var modelKeypath = this.buildModelKeypath(options);
			(0, _domUtils.addBinderAttribute)(element, options.type, modelKeypath);
		}
	}, {
		key: 'removeInstance',
		value: function removeInstance(options) {
			var element = options.element,
			    type = options.type;

			var binderInstance = element.binders && element.binders[type];

			destroyBinderInstance(element, type);

			if (binderInstance) {
				unbind(binderInstance);
			}
		}
	}, {
		key: 'removeModel',
		value: function removeModel(options) {
			var element = options.element,
			    type = options.type;


			if (isCobaltBinder(element, type)) {
				(0, _modelUtils.removeModel)((0, _domUtils.getBinderKeypath)(element, type), this.cobalt.scope);
			}
		}
	}, {
		key: 'buildModelKeypath',
		value: function buildModelKeypath(options) {
			var modelName = options.modelName,
			    isCommon = options.isCommon;

			return (0, _modelUtils.buildModelKeypath)(modelName, isCommon);
		}
	}]);

	return ComponentHandler;
}(_BindingHandler3.default);

exports.default = ComponentHandler;


function unbind(binderInstance) {
	if (typeof binderInstance.unbind == 'function') {
		binderInstance.unbind();
	}
}

function destroyBinderInstance(element, type) {
	(0, _domUtils.removeBinderAttribute)(element, type);

	if (element.binders) {
		delete element.binders[type];

		if (!Object.getOwnPropertyNames(element.binders).length) {
			element.removeAttribute('co-binder');
		}
	}
}

function isCobaltBinder(element, type) {
	return element.binders && element.binders[type];
}