'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _model = require('model');

var _modelUtils = require('./model-utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BindingHandler = function () {
	function BindingHandler() {
		_classCallCheck(this, BindingHandler);
	}

	_createClass(BindingHandler, [{
		key: 'add',
		value: function add(options, slideModel) {
			var modelName = options.modelName,
			    model = options.model,
			    isCommon = options.isCommon;


			var element = this.getElement(options);

			this.updateModel(slideModel, modelName, model, isCommon);
			this.buildBinding(element, options);
			this.updateDOM(element, options);
			this.observeModel(slideModel, modelName, isCommon);
			this.publishModelChanges(isCommon);
		}
	}, {
		key: 'remove',
		value: function remove(options) {
			this.removeModel(options);
			this.removeInstance(options);
			this.publishBothModelChanges();
		}

		//TODO: expediency of this method...

	}, {
		key: 'getElement',
		value: function getElement(options) {
			return options.element;
		}
	}, {
		key: 'updateModel',
		value: function updateModel(slideModel, modelName, model, isCommon) {
			(0, _modelUtils.updateModel)(slideModel, modelName, model, isCommon);
		}
	}, {
		key: 'observeModel',
		value: function observeModel(slideModel, modelName, isCommon) {
			if (!(0, _modelUtils.isModelKeypath)(modelName)) {
				(0, _modelUtils.observeModelChanges)(slideModel, modelName, isCommon);
			}
		}
	}, {
		key: 'publishModelChanges',
		value: function publishModelChanges(isCommon) {
			(0, _model.publishModelChanges)(isCommon);
		}
	}, {
		key: 'publishBothModelChanges',
		value: function publishBothModelChanges() {
			(0, _modelUtils.publishBothModelChanges)();
		}
	}, {
		key: 'buildBinding',
		value: function buildBinding(element, options) {}
	}, {
		key: 'updateDOM',
		value: function updateDOM(element, options) {}
	}, {
		key: 'removeInstance',
		value: function removeInstance(options) {}
	}, {
		key: 'removeModel',
		value: function removeModel(options) {}
	}]);

	return BindingHandler;
}();

exports.default = BindingHandler;