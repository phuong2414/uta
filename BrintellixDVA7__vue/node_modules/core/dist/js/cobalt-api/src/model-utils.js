'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.updateModel = updateModel;
exports.observeModelChanges = observeModelChanges;
exports.removeComponentModel = removeComponentModel;
exports.buildModelKeypath = buildModelKeypath;
exports.getTargetModel = getTargetModel;
exports.publishBothModelChanges = publishBothModelChanges;
exports.removeModel = removeModel;
exports.isModelKeypath = isModelKeypath;

var _utils = require('utils');

var _model = require('model');

var _domUtils = require('./dom-utils.js');

var _generalModel = require('general-model');

var _generalModel2 = _interopRequireDefault(_generalModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function updateModel(slideModel, modelName, model, isCommon) {
	var targetModel = getTargetModel(slideModel, isCommon);

	if (isCommon) {
		buildBindingCommonModel(targetModel, modelName, model);
	} else {
		addBindingModel(targetModel, modelName, model);
	}
}

function observeModelChanges(slideModel, modelName, isCommon) {
	var model = getTargetModel(slideModel, isCommon)[modelName];
	(0, _model.buildObservation)(model, isCommon);
}

function removeComponentModel(element, scope) {
	(0, _domUtils.getNestedComponents)(element).map(_domUtils.getModelKeypath).concat((0, _domUtils.getNestedBinderKeypaths)(element)).filter(getUniquePathes).filter(function (keypath) {
		return keypath;
	}).filter(isSlideModelKeypath).forEach(function (modelKeypath) {
		return removeModel(modelKeypath, scope);
	});
}

function buildModelKeypath(modelName, isCommon) {
	if (isModelKeypath(modelName)) {
		return modelName;
	}

	return createModelKeypath(modelName, isCommon);
}

function getTargetModel(model, isCommon) {
	return isCommon ? model.common : model;
}

function publishBothModelChanges() {
	(0, _model.publishModelChanges)(true);
	(0, _model.publishModelChanges)();
}

function removeModel(modelKeypath, scope) {
	modelKeypath.split('.').reduce(function (accum, key, index, array) {
		if ((0, _utils.isArray)(accum)) {
			accum.splice(0, 1);
		} else if (canDelete(accum, key) && (0, _domUtils.isLastIndex)(index, array)) {
			delete accum[key];
		}
		return accum.hasOwnProperty(key) && accum[key] ? accum[key] : {};
	}, scope);
}

function isModelKeypath(keypath) {
	return (0, _utils.startsWith)(keypath, 'm.');
}

function buildBindingCommonModel(targetModel, modelName, model) {
	if (targetModel[modelName]) {
		new _generalModel2.default.ModelSessionStorage().setModel((0, _utils.deepMixin)(model, targetModel[modelName]));
	} else {
		targetModel[modelName] = model;
	}
}

function addBindingModel(targetModel, modelName, model) {
	if (!isModelKeypath(modelName)) {
		targetModel[modelName] = model;
	}
}

function createModelKeypath(modelName, isCommon) {
	var modelAlias = isCommon ? 'common.' : '';

	return 'm.' + (modelAlias + modelName);
}

function canDelete(object, property) {
	return object.hasOwnProperty(property) && Object.getOwnPropertyDescriptor(object, property).configurable;
}

function isSlideModelKeypath(keypath) {
	return !(0, _utils.startsWith)(keypath, 'm.common');
}

function getUniquePathes(value, index, array) {
	return array.indexOf(value) === index;
}