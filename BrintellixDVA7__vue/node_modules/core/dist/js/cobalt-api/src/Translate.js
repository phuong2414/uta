'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('utils');

var _translate = require('translate');

var _translate2 = _interopRequireDefault(_translate);

var _slide = require('slide');

var _slide2 = _interopRequireDefault(_slide);

var _loader = require('loader');

var _settings = require('settings');

var _settings2 = _interopRequireDefault(_settings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var observer = new _utils.Observer();
var localizationChangeEventName = 'localizationchanged';
var commonPath = '' + _settings2.default.translations + _settings2.default.lang + '/';
var slideLocalizationPath = '' + commonPath + _slide2.default.id + '.json';
var commonLocalizationPath = commonPath + 'common.json';
var throttle = 100;

var Translate = function () {
	function Translate(scopeLocalization, separateLocalization) {
		var _this = this;

		_classCallCheck(this, Translate);

		this.localization = scopeLocalization;
		this.publishLocalizationChanges = (0, _utils.debounce)(function (key) {
			_this.publishChanges(key);
		}, throttle);

		var commonLocalization = separateLocalization.commonLocalization,
		    slideLocalization = separateLocalization.slideLocalization;


		(0, _utils.mixin)(this, { commonLocalization: commonLocalization, slideLocalization: slideLocalization });
	}

	_createClass(Translate, [{
		key: 'subscribe',
		value: function subscribe(callback) {
			observer.subscribe(localizationChangeEventName, callback);
		}
	}, {
		key: 'unsubscribe',
		value: function unsubscribe(callback) {
			observer.unsubscribe(localizationChangeEventName, callback);
		}
	}, {
		key: 'add',
		value: function add(key, value, isCommon) {
			this.localization[key] = value;
			this.getTargetLocalization(isCommon)[key] = value;

			this.publishLocalizationChanges(key);
		}
	}, {
		key: 'remove',
		value: function remove(key) {
			delete this.localization[key];
			delete this.getTargetLocalization(this.isCommon(key))[key];

			this.publishLocalizationChanges(key);
		}
	}, {
		key: 'edit',
		value: function edit(key, value) {
			this.localization[key] = value;
			this.getTargetLocalization(this.isCommon(key))[key] = value;

			this.publishLocalizationChanges(key);
		}
	}, {
		key: 'getTargetLocalization',
		value: function getTargetLocalization(isCommon) {
			return isCommon ? this.commonLocalization : this.slideLocalization;
		}
	}, {
		key: 'getActualLocalization',
		value: function getActualLocalization(keypath) {
			var localization = this.getTargetLocalization(this.isCommon(keypath));

			return this.syncLocalization(localization, keypath);
		}
	}, {
		key: 'getActualPath',
		value: function getActualPath(keypath) {
			return this.isCommon(keypath) ? commonLocalizationPath : slideLocalizationPath;
		}
	}, {
		key: 'isCommon',
		value: function isCommon(keypath) {
			return !this.slideLocalization.hasOwnProperty(keypath);
		}
	}, {
		key: 'syncLocalization',
		value: function syncLocalization(localization, keypath) {
			if (defined(this.localization[keypath])) {
				localization[keypath] = this.localization[keypath];
			} else {
				delete localization[keypath];
			}

			return localization;
		}
	}, {
		key: 'publishChanges',
		value: function publishChanges(keypath) {
			observer.publish(localizationChangeEventName, {
				path: this.getActualPath(keypath),
				localization: this.getActualLocalization(keypath)
			});
		}
	}]);

	return Translate;
}();

exports.default = Translate;


function defined(value) {
	return value !== undefined && value !== null;
}