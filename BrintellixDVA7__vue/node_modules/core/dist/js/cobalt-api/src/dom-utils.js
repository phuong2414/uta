'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.getComponentElement = getComponentElement;
exports.buildComponentDOMElement = buildComponentDOMElement;
exports.addBinderAttribute = addBinderAttribute;
exports.getBinderKeypath = getBinderKeypath;
exports.getNestedBinderKeypaths = getNestedBinderKeypaths;
exports.removeBinderAttribute = removeBinderAttribute;
exports.appendComponent = appendComponent;
exports.removeDOMElement = removeDOMElement;
exports.hideDOMElement = hideDOMElement;
exports.getNestedComponents = getNestedComponents;
exports.getComponentModelType = getComponentModelType;
exports.getModelKeypath = getModelKeypath;
exports.isLastIndex = isLastIndex;

var _rivets = require('rivets');

var _rivets2 = _interopRequireDefault(_rivets);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function getComponentElement(component, id, modelKeypath) {
	if (component instanceof Element || component instanceof DocumentFragment) {
		return component;
	}

	return buildComponentDOMElement(component, id, modelKeypath);
}

function buildComponentDOMElement(component, id, modelKeypath) {
	var element = document.createElement(component);
	element.setAttribute('model', modelKeypath);
	element.setAttribute('id', id);
	element.classList.add('default');

	return element;
}

function addBinderAttribute(element, type, keypath) {
	element.setAttribute(_rivets2.default.prefix + '-' + type, keypath);
}

function getBinderKeypath(element, type) {
	return element.getAttribute(_rivets2.default.prefix + '-' + type);
}

function getNestedBinderKeypaths(element) {
	var allElements = [].slice.call(element.querySelectorAll('*')),
	    keyPaths = [];

	allElements.push(element);

	allElements.forEach(function (element) {
		if (_typeof(element.binders) == 'object') {
			Object.keys(element.binders).forEach(function (binderType) {
				keyPaths.push(getBinderKeypath(element, binderType));
			});
		}
	});

	return keyPaths;
}

function removeBinderAttribute(element, type) {
	element.removeAttribute(_rivets2.default.prefix + '-' + type);
}

function appendComponent(element, rootElement) {
	getRootDOMElement(rootElement).appendChild(element);
}

function removeDOMElement(element) {
	element.parentNode.removeChild(element);
}

function hideDOMElement(element) {
	element.style.display = 'none';
}

function getNestedComponents(element) {
	var nestedComponents = [].slice.call(element.querySelectorAll('[co-component]'));
	return [element].concat(_toConsumableArray(nestedComponents));
}

function getComponentModelType(element) {
	return isCommonModel(getModelKeypath(element));
}

function getModelKeypath(element) {
	return element.getAttribute('model') || '';
}

function isLastIndex(index, array) {
	return index === array.length - 1;
}

function getRootDOMElement(rootElement) {
	return rootElement ? rootElement : document.querySelector('.slide');
}

function isCommonModel(keypath) {
	return keypath.startsWith('m.common');
}