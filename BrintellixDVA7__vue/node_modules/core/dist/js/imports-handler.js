'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.importComponents = importComponents;
exports.importComponentByName = importComponentByName;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('utils');

var _settings = require('settings');

var _settings2 = _interopRequireDefault(_settings);

var _componentsStylesPaths = require('components-styles-paths');

var _componentsStylesPaths2 = _interopRequireDefault(_componentsStylesPaths);

var _coClmList = require('co-clm-list');

var _coClmList2 = _interopRequireDefault(_coClmList);

var _rivets = require('rivets');

var _rivets2 = _interopRequireDefault(_rivets);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEV = 'dev';
// TODO: rivets should be passed as a parameter

var COMPONENTS = 'components/';

function importComponents(rootElement) {
  var rvImports = getEntriesByAttr(rootElement, 'rv-import');
  var rvComponents = getEntriesByAttr(rootElement, 'rv-component');
  var entries = rvImports.concat(rvComponents).filter(_utils.isUnique);

  return importsResolver(entries);
}

function importsResolver(entries) {
  var currentClm = getCurrentClm();

  if (currentClm === DEV) {
    return Promise.all([includeStyles(entries), includeScripts(entries)]);
  } else {
    return includeScripts(entries);
  }
}

function importComponentByName(name) {
  return Promise.all([addComponentStyle(name), addComponentScript(name)]);
}

function includeScripts(imports) {
  var components = imports.map(addComponentScript);

  return Promise.all(components);
}

function addComponentScript(component) {
  // TODO: we should probably try to load using script tag, and if it fails, use require
  var componentDeclaration = requireComponent(component);

  if (componentDeclaration) {
    _rivets2.default.components[componentDeclaration.name] = componentDeclaration;

    return Promise.resolve();
  }

  var bundle = _path2.default.join(resolveImport(component), 'dist/js/bundle.js');

  return addScript(bundle);
}

function requireComponent(name) {
  var map = require('__modulesMap');
  try {
    return require(map[name]);
  } catch (e) {
    return;
  }
}

function addScript(bundlePath) {
  return new Promise(function (resolve, reject) {
    var script = document.createElement('script');

    addElement(script, document.body, 'src', bundlePath, resolve, reject);
  }).catch(function (err) {});
}

function includeStyles(imports) {
  var components = imports.map(addComponentStyle);

  return Promise.all(components);
}

function addComponentStyle(component) {
  var stylesFileName = removePrefixBySplitter(component, '-');
  var bundleCSSPath = _path2.default.join(resolveImport(component), 'dist/css/bundle.css');
  var stylesWithoutScopingPath = _path2.default.join(resolveImport(component), 'dist/css', stylesFileName + '.css');
  var irregularStylesPath = _componentsStylesPaths2.default[component];

  var stylePaths = [bundleCSSPath, stylesWithoutScopingPath].concat(irregularStylesPath || []);

  return addLink(stylePaths);
}

function addLink(stylesPaths) {
  return new Promise(function (resolve, reject) {
    var link = document.createElement('link');

    link.rel = 'stylesheet';
    addElement(link, document.head, 'href', stylesPaths.shift(), resolve, reject, _utils.prependChild);
  }).catch(function () {
    if (stylesPaths.length) {
      return addLink(stylesPaths);
    }
  });
}

function addElement(element, parent, attr, url, resolve, reject, insertFunction) {
  var tags = (0, _utils.toArray)(document.getElementsByTagName(element.tagName)),
      included = tags.map(function (element) {
    return element[attr];
  });

  element.addEventListener('load', resolve);
  element.addEventListener('error', function () {
    parent.removeChild(element);
    reject(new Error('File not found: ' + element[attr]));
  });

  element[attr] = url;
  if (included.indexOf(element[attr]) < 0) {
    if (insertFunction) {
      insertFunction(parent, element);
    } else {
      parent.appendChild(element);
    }
  } else {
    resolve();
  }
}

function removePrefixBySplitter(string, splitter) {
  return string.split(splitter).slice(1).join(splitter);
}

function resolveImport(keypath) {
  var componentsDir = _settings2.default.components || COMPONENTS;

  if (!isRelativePath(keypath) && !(0, _utils.startsWith)(keypath, componentsDir)) {
    return append(resolveComponentPath(keypath), componentsDir);
  }

  return keypath;
}

function isRelativePath(path) {
  return (0, _utils.startsWith)(path, './') || (0, _utils.startsWith)(path, '/');
}

function append(string) {
  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  start = (0, _utils.startsWith)(string, start) ? '' : start;

  return start.concat(string, end);
}

function getEntriesByAttr(rootElement, attr) {
  return (0, _utils.toArray)(rootElement.querySelectorAll('[' + attr + ']')).map(function (element) {
    return element.getAttribute(attr);
  });
}

function resolveComponentPath(keypath) {
  var currentClm = getCurrentClm();

  if ((isShared() || _coClmList2.default.isExternalResource(currentClm)) && (0, _utils.startsWith)(keypath, COMPONENTS)) {
    return keypath.replace(COMPONENTS, '');
  }

  return keypath;
}

function getCurrentClm() {
  if (_settings2.default._env) {
    return _settings2.default._env.currentClm;
  }

  return '';
}

function isShared() {
  return _settings2.default.components.indexOf('./shared/') > -1;
}