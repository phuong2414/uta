'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _rivets = require('rivets');

var _rivets2 = _interopRequireDefault(_rivets);

var _extension = require('extension');

var _model = require('model');

var _utils = require('utils');

var _utils2 = _interopRequireDefault(_utils);

var _generalModel = require('general-model');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cobalt = function () {
  function Cobalt(scope, localization) {
    _classCallCheck(this, Cobalt);

    this.scope = scope;

    this.extendRivets(scope);
    (0, _model.setElementData)(document, scope.m);
  }

  _createClass(Cobalt, [{
    key: 'extendRivets',
    value: function extendRivets(scope) {
      (0, _extension.declareDefaultBindings)(_rivets2.default, scope);
      (0, _extension.declareImportsBindings)(_rivets2.default, scope);
    }
  }, {
    key: 'initialize',
    value: function initialize(rootElement) {
      delete _rivets2.default.components['rv-template'];
      this.mainView = this.bind(rootElement);
      this.initCommonModel();

      return Promise.resolve();
    }
  }, {
    key: 'initCommonModel',
    value: function initCommonModel() {
      new _generalModel.CommonModel(this.scope.m.common);
    }
  }, {
    key: 'bind',
    value: function bind(element) {
      var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.scope;

      return _rivets2.default.bind(element, scope);
    }
  }]);

  return Cobalt;
}();

exports.default = Cobalt;