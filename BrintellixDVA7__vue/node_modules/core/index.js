var spa = require('spa')
var slidePopup = require('slideshow-popup')
var isSpaPopup = spa && spa.isPopup && spa.isPopup()
var isPopup = slidePopup.isPopup() || isSpaPopup
var translate = require('translate')
var utils = require('utils')
var model = require('model')
var settings = require('settings')
var CommonModel = require('general-model').CommonModel
var Cobalt = require('cobalt').default

require('android-fixes')()
require('polyfills')
require('touch').init(document, settings.touch)
require('keyboard-navigation').unlock()

var scope = {
  isPopup: isPopup,
  t: {}
}
var localizationsPromise = new Promise(function (resolve) {
  translate.onLanguageChange(function (localizations) {
    utils.mixin(scope.t, translate.getCurrentLocalization())
    resolve(localizations)
  })
})
var loadedDOM = new Promise(function (resolve) {
  window.addEventListener('load', resolve)
})
var loadedFrame = new Promise(function (resolve) {
  window.frameElement ? utils.once(window.frameElement, 'load', resolve) : resolve()
})

translate.init({
  path: 'i18n/{ lang }/{ id }.json',
  id: require('slide').id,
  defaultLang: settings.lang
})

var slideModel = model.getSlideModel(require('slide').id)
var commonModel = CommonModel.load()

Promise.all([ localizationsPromise, slideModel, commonModel, loadedDOM, loadedFrame ])
  .then(function (results) {
    var localization = results[0] // spread
    var slideModel = results[1] // spread
    var commonModel = results[2] // spread

    scope.m = slideModel
    scope.m.common = commonModel

    var cobalt = new Cobalt(scope, localization)

    window.co = cobalt

    cobalt.initialize(document)
      .then(() => {
        utils.dispatchEvent(document, 'slidedataloaded')
      })
  })

require('orientation-fix').fix(window)
