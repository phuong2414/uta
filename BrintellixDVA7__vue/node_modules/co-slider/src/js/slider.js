var touch = require('touch'),
	utils = require('utils'),
	rivets = require('rivets'),
	prefixer = require('prefixer'),
	Component = require('component').Component;

rivets.binders.visible = function(element, value){
	if(!value){
		element.style.visibility = 'hidden';
	}else{
		element.style.visibility = '';
	}
}

require('co-container');

utils.inherits(Slider, Component);

function Slider(element){
	Component.apply(this, Array.prototype.slice.call(arguments));

	this.filler = this.element.querySelector('.slider-fill');

	['value', 'disabled'].forEach(function(property){
		Object.defineProperty(this.element, property, {
			get: (function() {
				return this[property];
			}).bind(this),
			set: (function(newValue){
				this[property] = newValue;
			}).bind(this)
		})
	}, this);
}

Slider.prototype.template = function(){
	return require('../template.html');
};

Slider.prototype.ready = function(view){
	view.addBinding(this.element, 'class', 'orientation');
	view.addBinding(this.element, 'class-reverse', 'reverse');
	this.checkDisabled();
	this.refresh();
}

Slider.prototype.defaults = {
	min: {
		type: Number,
		value: 0,
		refresh: true
	},
	max: {
		type: Number,
		value: 100,
		refresh: true
	},
	step: {
		type: Number,
		value: 1,
		refresh: true
	},
	value: {
		type: Number,
		value: 0,
		refresh: true
	},
	fill: {
		type: Boolean,
		value: true,
		refresh: true,
		optional: true
	},
	reverse: {
		type: Boolean,
		value: false,
		refresh: true,
		optional: true
	},
	orientation: {
		type: String,
		value: 'horizontal',
		values: ['horizontal', 'vertical'],
		refresh: true
	},
	disabled: {
		type: Boolean,
		value: false,
		refresh: true
	}
};

Slider.prototype.refresh = function(attr){
	var isNegMax = this.max < this.min;
	if(attr){
		this[attr] = utils.reviveByType(this[attr], this.defaults[attr].type);
	}

	switch(attr){
		case 'disabled':
			this.checkDisabled();
			break;

		case 'value':
			this.element.value = this.value;
			this.redraw();
			break;

		case 'max':
			if(isNegMax){
				this.min = this.max;
			}
			if(this.value > this.max){
				this.value = this.max;
			}
			this.redraw();
			break;
		case 'min':
			if(isNegMax){
				this.max = this.min;
			}
			if(this.value < this.min){
				this.value = this.min;
			}
			this.redraw();
			break;
		case 'step':
			if(this[attr] <= 0){
				this[attr] = 1;
			}
			break;
		case 'orientation':
			this.filler.style.width = this.filler.style.height = 'auto';
			this.redraw();
			break;
		default:
			this.redraw();
			break;
	}

	utils.dispatchEvent(this.element, 'refresh', {detail: attr});
};

Slider.prototype.handleEvent = function(event){
	var touchesCount = event.touches ? event.touches.length : 1;

	event.stopPropagation();

	if(touchesCount < 2){
		switch(event.type){
			case touch.events.start:
				this.focus();

			case touch.events.move:
				event.preventDefault();
				event = touch.getOriginalEvent(event);
				this.processEvent(event);
				utils.dispatchEvent(this.element, 'change');
				break;

			case touch.events.end:
				this.blur();
				break;
		}
	}
};

Slider.prototype.checkDisabled = function(){
	this.disabled ? this.disable() : this.enable();
};

Slider.prototype.enable = function(){
	this.element.addEventListener(touch.events.start, this);
};

Slider.prototype.disable = function(){
	this.element.removeEventListener(touch.events.start, this);
};

Slider.prototype.focus = function(){
	document.addEventListener(touch.events.move, this);
	document.addEventListener(touch.events.end, this);
	utils.dispatchEvent(this.element, 'focus');
};

Slider.prototype.blur = function(){
	document.removeEventListener(touch.events.move, this);
	document.removeEventListener(touch.events.end, this);
	utils.dispatchEvent(this.element, 'blur');
};

Slider.prototype.processEvent = function(event){
	var position, value, rect = this.element.getBoundingClientRect();

	if(this.orientation == 'horizontal'){
		position = (event.pageX - rect.left) / rect.width;
	}else{
		position = (event.pageY - rect.top) / rect.height;
	}

	if(this.reverse){
		position = 1 - position;
	}

	this.value = (this.max - this.min) * position + this.min;
};

Slider.prototype.redraw = function(){
	this.value = this.getValidValue(this.value);
	this.position = this.getPositionFromValue(this.value);
	this.draw();
};

Slider.prototype.getValidValue = function(value){
	value = utils.rangeValue(value, this.min, this.max);
	if(value >= this.max){
		return this.max;
	}

	value = Math.round((value - this.min) / this.step) * this.step + this.min;
	value = this.normalizeFloatNumber(value);

	return value;
}

Slider.prototype.getPositionFromValue = function(value){
	if(this.max === this.min) {
		return 0;
	}
	return (value - this.min) / (this.max - this.min);
}

Slider.prototype.draw = function(){
	var property = this.orientation === 'horizontal' ? 'width' : 'height';
	this.filler.style[property] = this.position * 100 + '%';
}

Slider.prototype.normalizeFloatNumber = function(value){
	var incremented = this.step + 1, // '1 + ' - fix to avoid scientific notation after convert to string
		split = incremented.toString().split('.'),
		symbolsNumber = split[1] ? split[1].length : 0;

	return parseFloat(value.toFixed(symbolsNumber));
};

exports.Slider = Slider;
