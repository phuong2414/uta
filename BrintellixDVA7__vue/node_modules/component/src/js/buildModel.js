var utils = require("utils");

function buildModel(defaultProperties, data, name){
	var defaultModel = getDefaultModel(defaultProperties),
		elementModel = utils.toCamelCaseObject(data.model || {}),
		attributesData = getDataFromAttributes(defaultProperties, data),
		model = mixin(mixin(defaultModel, elementModel, defaultProperties), attributesData, defaultProperties);

	return model;
}

function mixin(target, source, defaultProperties){
	Object.keys(source).forEach(function(property){
		if(source.hasOwnProperty(property) && defined(source[property]) && defaultProperties.hasOwnProperty(property)){
			if(target[property] && target[property].constructor === Object){
				addMissingProperies(defaultProperties[property].value, source[property]); // add missing properties and keep reference for correct observing
			}
			target[property] = source[property];
		}
	});

	return target;
}

function addMissingProperies(defaultProperties, source){
	return Object.keys(defaultProperties).forEach(function(property){
		if(!source.hasOwnProperty(property)){
			source[property] = defaultProperties[property];
		}
	})
}

function getDefaultModel(defaultProperties){
	return Object.keys(defaultProperties).reduce(function(acc, property){
		acc[property] = defaultProperties[property].value;
		return acc;
	}, {});
}

function getDataFromAttributes(defaultProperties, data){
	return Object.keys(defaultProperties).reduce(function(acc, property){
		if(data.hasOwnProperty(property)){
			if(defaultProperties[property] && defaultProperties[property].static){
				acc[property] = utils.revive(data[property]);
			}else{
				acc[property] = data[property];
			}
		}
		return acc;
	}, {});
}

function defined(value){
	return value !== undefined && value !== null;
}

module.exports = buildModel;