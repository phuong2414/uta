var utils = require('utils')
var builKeypath = require('./buildKeypath.js')
var getLocalizationByConstructor = require('./buildLocalization.js')
var generalModel = require('general-model')
var dispatcher = require('dispatcher')

function ComponentConstructor (element, model, view, binding) {
  this.element = element
  this.parentScope = view.models
  utils.mixin(this, model)
  this.element.model = this
  this.element.view = {
    subscribe: subscribeToView.bind(this)
  }
  this.element.setAttribute('co-component', '')
  this.model = model
  this.view = view
  this.binding = binding
  this.element.addEventListener('activate', handleActivation.bind(this))
  this.element.addEventListener('deactivate', handleDeactivation.bind(this))

  this.setIsConfigurable()
}

ComponentConstructor.prototype.isCommon = function () {
  return isCommonModel(this) || isCommonBinders(this);
}

ComponentConstructor.prototype.getTextElementsByProperty = function (property) {
  return utils.toArray(this.element.querySelectorAll('[rv-html]'))
    .filter(function (element) {
      return element.getAttribute('rv-html') === property
    })
    .filter(function (element) {
      return element.scope === this
    }, this)
}

ComponentConstructor.prototype.getLocalization = function (lang) {
  return getLocalizationByConstructor(this.__proto__.constructor, lang)
}

ComponentConstructor.prototype.getAbsoluteKeypath = function () {
  return builKeypath(this.parentScope, this.getKeypath())
}

ComponentConstructor.prototype.getKeypath = function () {
  return this.element.getAttribute('model') || ''
}

ComponentConstructor.prototype.toJSON = function () {
  var that = this
  return Object.keys(this).reduce(function (acc, property) {
    if (that.model.hasOwnProperty(property)) {
      acc[property] = that[property]
    }
    return acc
  }, {})
}

ComponentConstructor.prototype.setIsConfigurable = function () {
  var keypath = this.getKeypath()
  Object.defineProperty(this, 'isConfigurable', {
    value: utils.startsWith(keypath, 'm.'),
    enumerable: true,
    configurable: false,
    writable: true
  })
}

ComponentConstructor.prototype.getLabel = function (lang) {
  return new Promise(function (resolve, reject) {
    var label = getLabelFromElement(this.element)

    if (label) {
      resolve(label)
    } else {
      getLocalizationByConstructor(this.__proto__.constructor, lang)
        .then(function (localization) {
          resolve(localization.name)
        })
        .catch(function (err) {
          resolve(getNameFromTagNameComponent(this.name || (this.element.tagName).toLowerCase()))
        }.bind(this))
    }
  }.bind(this))
}

ComponentConstructor.prototype.setLabel = function (label) {
  this.element.setAttribute('user-label', label)
}

ComponentConstructor.prototype.subscribe = function (callback) {
  return new generalModel.ModelNotifier()
    .observe(this.model)
    .subscribe(function (model) {
      callback(model)
    }, true)
}

function getNameFromTagNameComponent (coTagName) {
  var normalName = coTagName.replace('co-', '').split('-').join(' ')

  return normalName[0].toUpperCase() + normalName.substring(1, normalName.lenght)
}

function handleActivation (event) {
  if (typeof this.activate === 'function' && isCobaltEvent(event)) {
    var prevModelState = utils.parse(this)
    this.activate(event.target)
    this.difference = utils.difference(prevModelState, utils.parse(this))
  }
}

function handleDeactivation (event) {
  if (typeof this.deactivate === 'function' && isCobaltEvent(event)) {
    this.deactivate(event.target)
  }

  utils.deepMixin(this, this.difference)
}

function isCobaltEvent (event) {
  return event.detail && !!event.detail.isCobaltEvent
}

function isCommonModel(scope) {
  return getParentKeypathes(scope).some(function (keypath) {
    return isCommonKeypath(keypath);
  });
}

function isCommonBinders(scope) {
  const binders = scope.element && scope.element.binders;
  return binders && Object.keys(binders).some(function (binder) {
    return isCommonKeypath(binders[binder].keypath);
  });
}

function isCommonKeypath(keypath) {
  return utils.startsWith(keypath, 'm.common');
}

function getParentKeypathes (scope, keypathes) {
  keypathes = keypathes || []
  if (scope && typeof scope.getKeypath === 'function') {
    keypathes.push(scope.getKeypath())
    getParentKeypathes(scope.parentScope, keypathes)
  }

  return keypathes
}

function getLabelFromElement (element) {
  return element.getAttribute('user-label')
}

function subscribeToView (callback) {
  dispatcher.subscribeEvent(event => {
    if (event.type === dispatcher.EventType.DOM_REFRESHED && event.element === this.element) {
      callback(this.element)
    }
  })
}

exports.ComponentConstructor = ComponentConstructor
