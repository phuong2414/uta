var rivets = require('rivets')
var utils = require('utils')
var ComponentConstructor = require('./src/js/ComponentConstructor.js').ComponentConstructor
var buildModel = require('./src/js/buildModel.js')
var buildObservations = require('./src/js/buildObservations.js')
var config = require('./config.json')

function registerComponent (name, Constructor, localExtensions) {
  rivets.components[name] = createComponent(name, Constructor, localExtensions)
}

function createComponent (options, Constructor, localExtensions) {
  var name

  if (typeof options === 'object') {
    name = options.name
    Constructor = options.constructor
    localExtensions = options.localExtensions
  } else {
    name = options
  }

  Constructor.prototype.localizationTemplate = options.localizationTemplate || config.localizationPath

  var descriptor = {
    name: name,
    block: Constructor.block,
    static: getStaticProperties(Constructor.prototype.defaults),
    template: Constructor.prototype.template,
    constructor: Constructor,
    initialize: function (element, data) {
      var defaultProperties = utils.toCamelCaseObject(Constructor.prototype.defaults)
      var model = buildModel(defaultProperties, data, name)
      var componentInstance = new Constructor(element, model, this.view, this)

      Constructor.prototype.name = name

      buildObservations.call(this, componentInstance, defaultProperties, data.model || {})

      return componentInstance
    },
    unbind: function () {
            // TODO: make unobserve..
    }
  }

  if (localExtensions) {
    rivets._.extensions.forEach(function (extensionName) {
      var extension = localExtensions[extensionName]

      if (extension) {
        descriptor[extensionName] = extension
      }
    })
  }

  return descriptor
}

function getStaticProperties (properties) {
  return Object.keys(properties)
    .filter(function (property) {
      return isStaticProperty(properties, property)
    })
    .map(function (property) {
      return utils.toCamelCase(property)
    })
}

function isStaticProperty (properties, property) {
  return properties[property] && properties[property].static
}

module.exports = registerComponent
module.exports.createComponent = createComponent
module.exports.Component = ComponentConstructor
